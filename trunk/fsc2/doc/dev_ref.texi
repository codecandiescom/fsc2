@c  $Id$
@c
@c  Copyright (C) 1999-2007 Jens Thoms Toerring
@c
@c  This file is part of fsc2.
@c
@c  Fsc2 is free software; you can redistribute it and/or modify
@c  it under the terms of the GNU General Public License as published by
@c  the Free Software Foundation; either version 2, or (at your option)
@c  any later version.
@c
@c  Fsc2 is distributed in the hope that it will be useful,
@c  but WITHOUT ANY WARRANTY; without even the implied warranty of
@c  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c  GNU General Public License for more details.
@c
@c  You should have received a copy of the GNU General Public License
@c  along with fsc2; see the file COPYING.  If not, write to
@c  the Free Software Foundation, 59 Temple Place - Suite 330,
@c  Boston, MA 02111-1307, USA.


@node Device Reference, Reserved Words, Installation, Top
@appendix Device Reference

@ifinfo
@menu
* aeg_s_band::      S-band AEG Magnet Power Supply
* aeg_x_band::      X-band AEG Magnet Power Supply
* bh15::            Bruker Hall Effect Field Controller BH 15 (as gaussmeter)
* bh15_fc::         Bruker Hall Effect Field Controller BH 15 (as field controller)
* bnm12::           Bruker NMR Gaussmeter BNM12
* dg2020_b::        Sony/Tektronix Data Generator DG2020 (Berlin Version)
* dg2020_f::        Sony/Tektronix Data Generator DG2020 (Frankfurt Version)
* egg4402::         EG&G PARC Box-Car Integrator 4402
* ep385::           Bruker Pulse Programmer EP385
* er023m::          Bruker Signal Channel ER 023 M
* er032m::          Bruker Field controller ER 032 M 
* er035m::          Bruker NMR Gaussmeter ER 035 M
* er035m_sa::       Bruker NMR Gaussmeter ER 035 M (Stand-Alone)
* gg_chopper::      Light chopper (Gescheidt group, Graz)
* hfs9000::         Tektronix Stimulus System HFS9000 (Berlin W-Band)
* hp5340a::         HP Frequency Counter HP5340A
* hp8647a::         HP RF Synthesizer HP8647A
* hp8648b::         HP RF Synthesizer HP8648B
* hp8672a::         HP RF Synthesizer HP8672A
* hjs_attenuator::  Home-built microwave attenuator
* hjs_daadc::       Home-built AD and DA converter
* hjs_sfc::         Simple Field Control (HJS_SFC, Steinhoff group, Osnabrueck)
* hjs_fc::          Field Control (HJS_FC, Steinhoff group, Osnabrueck)
* ips20_4::         Oxford Instruments Magnet Sweep Power Supply IPS20-4
* ips120_10::       Oxford Instruments Magnet Sweep Power Supply IPS120-10
* ips120_10_mod::   Oxford Instruments Magnet Sweep Power Supply IPS120-10 with DAC modulation input
* itc503::          Oxford Instruments Temperature Controller ITC503
* keithley228a::    Magnet Power Supply Keithley 228A (Berlin W-Band)
* kontron4060::     Kontron 4060 Multimeter
* lakeshore330::    Lake Shore 330 Temperature Controller
* lecroy9400::      LeCroy Digitizing Oscilloscope 9400
* lecroy9410::      LeCroy Digitizing Oscilloscope 9410
* lecroy9420::      LeCroy Digitizing Oscilloscope 9420
* lecroy9424::      LeCroy Digitizing Oscilloscope 9424
* lecroy9424e::     LeCroy Digitizing Oscilloscope 9424E
* lecroy9450::      LeCroy Digitizing Oscilloscope 9450
* lecroy_wr::       LeCroy Digitizing Oscilloscope Waverunner and Waverunner-2
* lecroy_ws::       LeCroy Digitizing Oscilloscope WaveSurfer
* mcn700_2000::     F.u.G. Elektronik GmbH Power Supply MCN 700-2000
* me6000::          Meilhaus Electronic GmbH ME-6000 and ME-6100 DAC card
* ni6601::          National Instruments 6601 GPCT card
* pci_mio_16e_1::   National Instruments PCI-MIO-16E-1 DAQ card
* pt2025::          Metrolab NMR Teslameter PT2025
* rs_sml01::        Rohde & Schwarz SML01 Signal Generator
* rs_spec10::       Roper Scientific Spec-10 CCD Camera
* rb8509::          Rulbus 12-bit ADC Card
* rb8510::          Rulbus 12-bit DAC Card
* rb_pulser_j::     Rulbus Pulser (J-band version)
* rb_pulser_w::     Rulbus Pulser (W-band version)
* rs690::           Interface Technology RS690 Word Generator (Berlin 360 GHz)
* s_band_magnet_broad::   S-band Magnet Power Supply (broad range)
* s_band_magnet_narrow::  S-band Magnet Power Supply (narrow range)
* schlum7150::      Schlumberger Solartron 7150 Multimeter
* spectrapro_300i:: Acton Research SpectraPro-300i Monochromator
* spex_cd2a::       SPEX Monochromators with CD2A Compudrive
* sr510::           Stanford Research Lock-In Amplifier SR510
* sr530::           Stanford Research Lock-In Amplifier SR530
* sr810::           Stanford Research Lock-In Amplifier SR810
* sr830::           Stanford Research Lock-In Amplifier SR830
* tds520::          Tektronix Digitizing Oscilloscope TDS520
* tds520a::         Tektronix Digitizing Oscilloscope TDS520A
* tds520c::         Tektronix Digitizing Oscilloscope TDS520C
* tds540::          Tektronix Digitizing Oscilloscope TDS540
* tds744a::         Tektronix Digitizing Oscilloscope TDS744A
* tds754a::         Tektronix Digitizing Oscilloscope TDS754A
* tegam2714a_p::    TEGAM 2714A Arbitrary Waveform Generator (as pulser)
* thurlby330::      Thurlby & Thandar Power Supply PL330DP
* witio_48::        Wasco WITIO-48 DIO card
@end menu
@end ifinfo


@c #############################################################


@node aeg_s_band, aeg_x_band, Device Reference, Device Reference
@iftex
@subheading S-band AEG Magnet Power Supply
@end iftex
@ifnottex
@section S-band AEG Magnet Power Supply
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{aeg_s_band}

@paragraphindent 0
@strong{Additionally required modules}: @code{er035m} or @code{er035m_s}
or @code{bh15}

@paragraphindent 0
@strong{Description}: Power supply for AEG magnet with home-built
computer control to be used with an S-band spectrometer. Requires either
the @code{er035m} or @code{er035m_s} NMR gaussmeter (with @code{F0}
probe) or the @code{bh15} Hall effect field controller, which must be
listed before the magnet power supply module. Field range depends on the
gaussmeter used, with @code{er035m} or @code{er035m_s} the range is
@w{460 G} to @w{2390 G}, with @code{bh15} it is @w{-50 G} to @w{23000 G}.

@paragraphindent 0
@strong{Controlled via}: Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_fast_init()}
@item @ref{magnet_field()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_sweep_down()}
@item @ref{magnet_reset_field()}
@item @ref{set_field()} (deprecated)
@item @ref{get_field()} (deprecated)
@item @ref{sweep_up()} (deprecated)
@item @ref{sweep_down()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node aeg_x_band, bh15, aeg_s_band, Device Reference
@iftex
@subheading X-band AEG Magnet Power Supply
@end iftex
@ifnottex
@section X-band AEG Magnet Power Supply
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{aeg_x_band}

@paragraphindent 0
@strong{Additionally required modules}: @code{er035m} or @code{er035m_s}
or @code{bh15}

@paragraphindent 0
@strong{Description}: Power supply for AEG magnet with home-built
computer control to be used with an X-band spectrometer. Requires either
the @code{er035m} or @code{er035m_s} NMR gaussmeter (with @code{F1}
probe) or the @code{bh15} Hall effect field controller to work, which
must be listed before the magnet power supply module. Field range
depends on the gaussmeter used, with @code{er035m} or @code{er035m_s}
the range is @w{1460 G} to @w{19900 G}, with @code{bh15} it is @w{-50 G}
to @w{23000 G}.

@paragraphindent 0
@strong{Controlled via}: Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_fast_init()}
@item @ref{magnet_field()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_sweep_down()}
@item @ref{magnet_reset_field()}
@item @ref{set_field()}  (deprecated)
@item @ref{get_field()} (deprecated)
@item @ref{sweep_up()} (deprecated)
@item @ref{sweep_down()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node bh15, bh15_fc, aeg_x_band, Device Reference
@iftex
@subheading Bruker Hall Effect Field Controller BH 15 (as gaussmeter)
@end iftex
@ifnottex
@section Bruker Hall Effect Field Controller BH 15 (as gaussmeter)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{bh15}

@paragraphindent 0
@strong{Description}: Bruker (@url{http://www.bruker-biospin.com/})
BH15 Hall effect controller for measuring magnetic fields in combination with
power supply controllers @code{aeg_s_band} and @code{aeg_x_band}. Field range
that can be measured is from @w{-50 G} to @w{23000 G}. (For use as a field
controller use module @code{bh15_fc}).


@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"BH15"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos},
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{gaussmeter_name()}
@item @ref{gaussmeter_field()}
@item @ref{gaussmeter_resolution()}
@item @ref{find_field()} (deprecated)
@item gaussmeter_wait()
@end table


@c #############################################################


@node bh15_fc, bnm12, bh15, Device Reference
@iftex
@subheading Bruker Hall Effect Field Controller BH 15 (as field controller)
@end iftex
@ifnottex
@section Bruker Hall Effect Field Controller BH 15 (as field controller)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{bh15_fc}

@paragraphindent 0
@strong{Description}: Bruker (@url{http://www.bruker-biospin.com/})
BH15 Hall effect controller. Field range: @w{-50 G} to @w{23000 G}.
(For use as a gaussmeter only use module @code{bh15}).

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"BH15_FC"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos},
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_sweep_down()}
@item @ref{magnet_reset_field()}
@item @ref{set_field()} (deprecated)
@item @ref{get_field()} (deprecated)
@item @ref{sweep_up()} (deprecated)
@item @ref{sweep_down()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node bnm12, dg2020_b, bh15_fc, Device Reference
@iftex
@subheading Bruker NMR Gaussmeter BNM12
@end iftex
@ifnottex
@section Bruker NMR Gaussmeter BNM12
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{bnm12}

@paragraphindent 0
@strong{Additionally required module}: @code{witio_48}

@paragraphindent 0
@strong{Description}: Bruker (@url{http://www.bruker-biospin.com/})
BNM12 NMR Gaussmeter can only be used to measure fields. Using it requires
that the module for the WITIO-48 DIO card (@code{witio_48}) is loaded.

@paragraphindent 0
@strong{Controlled via}: Read only via WITIO-48 DIO card.

@paragraphindent 0
@strong{Please note}: If a field resolution other than @w{0.1 G} is set
at the front panel of the device, the function
@code{gaussmeter_resolution()} must be called, otherwise the field values
returned by the module will be wrong. Also note that for a resolution
setting of @w{0.01 G} the kG part of the field will be missing, i.e.@: a
field of @w{3125.63 G} will be reported as being @w{125.63 G} for the
highest resolution setting.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{gaussmeter_name()}
@item @ref{gaussmeter_field()}
@item @ref{gaussmeter_resolution()}
@end table


@c #############################################################


@node dg2020_b, dg2020_f, bnm12, Device Reference
@iftex
@subheading Sony/Tektronix Data Generator DG2020 (Berlin Version)
@end iftex
@ifnottex
@section Sony/Tektronix Data Generator DG2020 (Berlin Version)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{dg2020_b}

@paragraphindent 0
@strong{Description}: Sony/Tektronix (@url{http://www.tektronix.com/}) Data
Generator DG2020, used as pulser for the Berlin X-band spectrometer.

@paragraphindent 0
Timebase: between @w{5 ns} and @w{100 ms}@*
Maximum pulse voltage: between @w{-2 V} and @w{7 V}@*
Minimum pulse voltage: between @w{-3 V} and @w{6 V}@*
Difference between minimum and maximum pulse voltage must be not more
than @w{9 V} and at least @w{0.5 V}.@*
Pulse voltage resolution: @w{0.1 V}@*
Trigger-in level: Between @w{-5 V} to @w{5 V}@*
Trigger-in voltage resolution: @w{0.1 V}@*
Trigger-in impedance: 50 Ohm (@code{LOW}) or 1 kOhm (@code{HIGH})@*
Number of output connectors (POD): 12@*
Number of internal channels: 36

@paragraphindent 0
Due to some problems with the firmware of the device pulse sequences
always start with a state where the output of all connectors is the
minimum pulse voltage for the duration of the timebase (this also holds
for function/output channels declared as @code{INVERTED}).

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"DG2020_B"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{pulser_name()}
@item @ref{pulser_state()}
@item @ref{pulser_update()}
@item @ref{pulser_shift()}
@item @ref{pulser_increment()}
@item @ref{pulser_reset()}
@item @ref{pulser_next_phase()}
@item @ref{pulser_phase_reset()}
@item @ref{pulser_pulse_reset()}
@item @ref{pulser_lock_keyboard()}
@item @ref{pulser_shape_to_defense_minimum_distance()}
@item @ref{pulser_defense_to_shape_minimum_distance()}
@item @ref{pulser_automatic_shape_pulses()}
@item @ref{pulser_automatic_twt_pulses()}
@item @ref{pulser_minimum_twt_pulse_distance()}
@item @ref{pulser_keep_all_pulses()}
@item @ref{pulser_maximum_pattern_length()}
@item @ref{pulser_show_pulses()}
@item @ref{pulser_dump_pulses()}
@end table


@c #############################################################


@node dg2020_f, egg4402, dg2020_b, Device Reference
@iftex
@subheading Sony/Tektronix Data Generator DG2020 (Frankfurt Version)
@end iftex
@ifnottex
@section Sony/Tektronix Data Generator DG2020 (Frankfurt Version)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{dg2020_f}

@paragraphindent 0
@strong{Description}: Sony/Tektronix (@url{http://www.tektronix.com/}) Data
Generator DG2020, used as pulser for the S-band spectrometer in the group
of T.@: Prisner at the J.-W.-Goethe University in Frankfurt/Main
(@url{http://www.prisner.de/}).

@paragraphindent 0
Timebase: between @w{5 ns} and @w{100 ms}@*
Maximum pulse voltage: between @w{-2 V} and @w{7 V}@*
Minimum pulse voltage: between @w{-3 V} and @w{6 V}@*
Difference between minimum and maximum pulse voltage must be not more
than @w{9 V} and at least @w{0.5 V}.@*
Pulse voltage resolution: @w{0.1 V}@*
Trigger-in level: Between @w{-5 V} to @w{5 V}@*
Trigger-in voltage resolution: @w{0.1 V}@*
Trigger-in impedance: 50 Ohm (@code{LOW}) or 1 kOhm (@code{HIGH})@*
Number of output connectors (POD): 12@*
Number of internal channels: 36

@paragraphindent 0
Due to some problems with the firmware of the device pulse sequences
always start with a state where the output of all connectors is the
minimum pulse voltage for the duration of the timebase (this also holds
for function/output channels declared as @code{INVERTED}).

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use  @code{"DG2020_F"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{pulser_name()}
@item @ref{pulser_state()}
@item @ref{pulser_update()}
@item @ref{pulser_shift()}
@item @ref{pulser_increment()}
@item @ref{pulser_reset()}
@item @ref{pulser_next_phase()}
@item @ref{pulser_phase_reset()}
@item @ref{pulser_pulse_reset()}
@item @ref{pulser_lock_keyboard()}
@item @ref{pulser_phase_switch_delay()}
@item @ref{pulser_grace_period()}
@item @ref{pulser_keep_all_pulses()}
@item @ref{pulser_maximum_pattern_length()}
@item @ref{pulser_show_pulses()}
@item @ref{pulser_dump_pulses()}
@end table


@c #############################################################


@node egg4402, ep385, dg2020_f, Device Reference
@iftex
@subheading EG&G PARC Box-Car Integrator 4402
@end iftex
@ifnottex
@section EG&G PARC Box-Car Integrator 4402
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{egg4402}

@paragraphindent 0
@strong{Description}: EG&G PARC box-car integrator - only download of
already measured curves and starting and stopping of acquisitions are
currently supported.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use  @code{"EG4402"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{boxcar_name()}
@item @ref{boxcar_curve_length()}
@item @ref{boxcar_get_curve()}
@item @ref{boxcar_start_acquisition()}
@item @ref{boxcar_stop_acquisition()}
@item @ref{boxcar_single_shot()}
@end table


@c #############################################################


@node ep385, er023m, egg4402, Device Reference
@iftex
@subheading Bruker Pulse Programmer EP385
@end iftex
@ifnottex
@section Bruker Pulse Programmer EP385
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{ep385}

@paragraphindent 0
@strong{Description}: Bruker (@url{http://www.bruker-biospin.com/}) Pulse
Programmer EP385, used as pulser for the Berlin X-band spectrometer.

@paragraphindent 0
Timebase: internal clock @w{8 ns}, external clock @w{8 ns} and slower@*
Minimum repetition time: internal clock @w{1.286 ms}, external clock
160768 times timebase@*
Repetition time increments: internal clock @w{102.4 us}, external clock
12800 times timebase@*
Maximum number of pulses per channel: 59@*
Output channels: 8

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"EP385"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos},
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{pulser_name()}
@item @ref{pulser_state()}
@item @ref{pulser_update()}
@item @ref{pulser_shift()}
@item @ref{pulser_increment()}
@item @ref{pulser_reset()}
@item @ref{pulser_next_phase()}
@item @ref{pulser_phase_reset()}
@item @ref{pulser_pulse_reset()}
@item @ref{pulser_shape_to_defense_minimum_distance()}
@item @ref{pulser_defense_to_shape_minimum_distance()}
@item @ref{pulser_automatic_shape_pulses()}
@item @ref{pulser_automatic_twt_pulses()}
@item @ref{pulser_minimum_twt_pulse_distance()}
@item @ref{pulser_show_pulses()}
@item @ref{pulser_dump_pulses()}
@end table


@c #############################################################


@node er023m, er032m, ep385, Device Reference
@iftex
@subheading Bruker Signal Channel ER 023 M
@end iftex
@ifnottex
@section Bruker Signal Channel ER 023 M
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{er023m}

@paragraphindent 0
@strong{Description}: Bruker (@url{http://www.bruker-biospin.com/})
Signal Channel ER 023 M used in older Bruker EPR spectrometers -- lock-in
amplifier with built-in analog-to-digital converter.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use  @code{"ER023M"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{lockin_name()}
@item @ref{lockin_get_data()}
@item @ref{lockin_sensitivity()}
@item @ref{lockin_time_constant()}
@item @ref{lockin_phase()}
@item lockin_offset()
@item @ref{lockin_conversion_time()}
@item @ref{lockin_ref_freq()}
@item @ref{lockin_ref_level()}
@item @ref{lockin_harmonic()}
@item @ref{lockin_resonator()}
@item @ref{lockin_is_overload()}
@item lockin_rg()
@item lockin_tc()
@item lockin_ma()
@item lockin_ct()
@item lockin_mf()
@end table


@c #############################################################


@node er032m, er035m, er023m, Device Reference
@iftex
@subheading Bruker Field controller ER 032 M
@end iftex
@ifnottex
@section Bruker Field controller ER 032 M
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{er032m}

@paragraphindent 0
@strong{Description}: Bruker (@url{http://www.bruker-biospin.com/})
@w{ER 032 M} field controller, used to control the field in older Bruker
EPR spectrometers. Maximum field range is from@w{-50 G} to @w{23000 G},
minimum field step width is @w{1 mG}.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"ER032M"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_sweep_down()}
@item @ref{magnet_reset_field()}
@item @ref{set_field()} (deprecated)
@item @ref{get_field()} (deprecated)
@item @ref{sweep_up()} (deprecated)
@item @ref{sweep_down()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node er035m, er035m_sa, er032m, Device Reference
@iftex
@subheading Bruker NMR Gaussmeter ER 035 M
@end iftex
@ifnottex
@section Bruker NMR Gaussmeter ER 035 M
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{er035m} (GPIB version) or @code{er035m_s}
(serial port version)

@paragraphindent 0
@strong{Description}: Bruker (@url{http://www.bruker-biospin.com/})
NMR gaussmeter @w{ER 035 M} used n conjunction with the magnet power
supply controllers @code{aeg_s_band} and @code{aeg_x_band}. Field
range depends on probe used, with @code{F0} probe it is @w{460 G}
to @w{2390 G}, with @code{F1} probe the range is @w{1460 G} to
@w{19900 G}.

@paragraphindent 0
@strong{Controlled via} (@code{er035m}): GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"ER035M"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{or}

@paragraphindent 0
@strong{Controlled via} (@code{er035m_s}): Serial port


@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{gaussmeter_name()}
@item @ref{gaussmeter_field()}
@item @ref{gaussmeter_resolution()}
@item @ref{gaussmeter_probe_orientation()}
@item @ref{gaussmeter_upper_search_limit()}
@item @ref{gaussmeter_lower_search_limit()}
@item @ref{find_field()} (deprecated)
@item gaussmeter_wait()
@end table


@c #############################################################


@node er035m_sa, gg_chopper, er035m, Device Reference
@iftex
@subheading Bruker NMR Gaussmeter ER 035 M (Stand-Alone)
@end iftex
@ifnottex
@section Bruker NMR Gaussmeter ER 035 M (Stand-Alone)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{er035m_sa} (GPIB version) or @code{er035m_sas}
(serial port version)

@paragraphindent 0
@strong{Description}: Bruker (@url{http://www.bruker-biospin.com/}) NMR
gaussmeter @w{ER 035 M} used as simple, stand-alone gaussmeter. Field 
range depends on probe being used, with @code{F0} probe it is @w{460 G} to
@w{2390 G}, with @code{F1} probe the range is @w{1460 G} to @w{19900 G}.

@paragraphindent 0
@strong{Controlled via} (@code{er035m_sa}): GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"ER035M"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} an @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{or}

@paragraphindent 0
@strong{Controlled via} (@code{er035m_sas}): Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{gaussmeter_name()}
@item @ref{gaussmeter_field()}
@item @ref{measure_field()}
@item @ref{gaussmeter_resolution()}
@item @ref{gaussmeter_probe_orientation()}
@item @ref{gaussmeter_upper_search_limit()}
@item @ref{gaussmeter_lower_search_limit()}
@end table


@c #############################################################

@node gg_chopper, hfs9000, er035m_sa, Device Reference
@iftex
@subheading Light chopper (Gescheidt group, Graz)
@end iftex
@ifnottex
@section Light chopper (Gescheidt group, Graz)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hfs9000}

@paragraphindent 0
@strong{Additionally required module}: @code{pci_mio_16e_1}

@paragraphindent 0
@strong{Description}: Light chopper used in the group of G.@: Gescheidt
at the Graz University of Technology, Austria
(@url{http://www.ptc.tugraz.at/}). This module doesn't control the device
directly but, via some homebuild electronics, by using a data acquisition
card, currently the National Instruments PCI-MIO-16E-1 DAQ card. For
details on the home-built electronics controlling the chopper please see
Torsten Zytowski's PhD thesis, University Z@"urich, 1998.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{chopper_name()}
@item @ref{chopper_rotation_frequency()}
@item @ref{chopper_create_trigger()}
@end table


@c #############################################################


@node hfs9000, hp5340a, gg_chopper, Device Reference
@iftex
@subheading Tektronix Stimulus System HFS9000 (Berlin W-Band)
@end iftex
@ifnottex
@section Tektronix Stimulus System HFS9000 (Berlin W-Band)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hfs9000}

@paragraphindent 0
@strong{Description}: Tektronix (@url{http://www.tektronix.com/}) Stimulus
System HFS9000, used as pulser in the Berlin W-band spectrometer. No support
for phase cycled experiments.

@paragraphindent 0
Timebase: between @w{1.6 ns} and @w{20 us}@*
Maximum pulse voltage: between @w{-1.5 V} and @w{5.5 V}@*
Minimum pulse voltage: between @w{-2 V} and @w{5 V}@*
Difference must be not more than @w{5.5 V} and at least @w{0.5 V}@*
Resolution of pulse voltages: @w{10 mV}@*
Trigger-in levels: between @w{-4.7 V} to @w{4.7 V}@*
Resolution of trigger-in voltages: @w{10 mV}@*
Number of channels: 4 plus a TRIGGER_OUT channel@*
Fixed length of TRIGGER_OUT pulse: @w{20 ns}

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"HFS9000"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} to @code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{pulser_name()}
@item @ref{pulser_state()}
@item @ref{pulser_channel_state()}
@item @ref{pulser_update()}
@item @ref{pulser_shift()}
@item @ref{pulser_increment()}
@item @ref{pulser_reset()}
@item @ref{pulser_pulse_reset()}
@item @ref{pulser_lock_keyboard()}
@item @ref{pulser_stop_on_update()}
@item @ref{pulser_keep_all_pulses()}
@item @ref{pulser_maximum_pattern_length()}
@item @ref{pulser_show_pulses()}
@item @ref{pulser_dump_pulses()}
@end table


@c #############################################################


@node hp5340a, hp8647a, hfs9000, Device Reference
@iftex
@subheading HP Frequency Counter HP5340A
@end iftex
@ifnottex
@section HP Frequency Counter HP5340A
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hp5340a}

@paragraphindent 0
@strong{Description}: Hewlett-Packard HP (now Agilent,
@url{http://www.home.agilent.com/}) frequency counter HP5340A. This is a
very old device even pre-dating the GPIB-standard. Only its capability
to return the measured frequency can be used.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"HP5340A"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos}
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{freq_counter_name()}
@item @ref{freq_counter_measure()}
@end table


@c #############################################################


@node hp8647a, hp8648b, hp5340a, Device Reference
@iftex
@subheading HP RF Synthesizer HP8647A
@end iftex
@ifnottex
@section HP RF Synthesizer HP8647A
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hp8647a}

@paragraphindent 0
@strong{Description}: Hewlett-Packard RF (now Agilent,
@url{http://www.home.agilent.com/}) synthesizer HP8647A with support for
output level normalization via frequency/amplitude table files. For safety
reasons only output attenuations below @w{-5 dB} are allowed -- change the
configuration file to allow higher output levels.

Frequency range is @w{250 kHz} to @w{1 GHz}, attenuation range @w{-136 dB}
to @w{3 dB} in @w{0.1 dB} steps.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"HP8647A"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{synthesizer_name()}
@item @ref{synthesizer_state()}
@item @ref{synthesizer_frequency()}
@item @ref{synthesizer_step_frequency()}
@item @ref{synthesizer_attenuation()}
@item @ref{synthesizer_minimum_attenuation()}
@item @ref{synthesizer_sweep_up()}
@item @ref{synthesizer_sweep_down()}
@item @ref{synthesizer_reset_frequency()}
@item @ref{synthesizer_use_table()}
@item @ref{synthesizer_attenuation()}
@item @ref{synthesizer_att_ref_freq()}
@item @ref{synthesizer_modulation()}
@item @ref{synthesizer_mod_ampl()}
@item @ref{synthesizer_mod_type()}
@item @ref{synthesizer_mod_source()}
@end table


@c #############################################################


@node hp8648b, hp8672a, hp8647a, Device Reference
@iftex
@subheading HP RF Synthesizer HP8648B
@end iftex
@ifnottex
@section HP RF Synthesizer HP8648B
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hp8648b}

@paragraphindent 0
@strong{Description}: Hewlett-Packard (now Agilent,
@url{http://www.home.agilent.com/}) RF synthesizer HP8648B with
support for output level normalization via frequency/amplitude table
files.

Frequency range is @w{10 kHz} to @w{2 GHz}, attenuation range @w{-136 dB}
to @w{14.5 dB} in @w{0.1 dB} steps.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"HP8647B"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{synthesizer_name()}
@item @ref{synthesizer_state()}
@item @ref{synthesizer_frequency()}
@item @ref{synthesizer_step_frequency()}
@item @ref{synthesizer_attenuation()}
@item @ref{synthesizer_minimum_attenuation()}
@item @ref{synthesizer_sweep_up()}
@item @ref{synthesizer_sweep_down()}
@item @ref{synthesizer_reset_frequency()}
@item @ref{synthesizer_use_table()}
@item @ref{synthesizer_attenuation()}
@item @ref{synthesizer_att_ref_freq()}
@item @ref{synthesizer_modulation()}
@item @ref{synthesizer_mod_ampl()}
@item @ref{synthesizer_mod_type()}
@item @ref{synthesizer_mod_source()}
@end table


@c #############################################################


@node hp8672a, hjs_attenuator, hp8648b, Device Reference
@iftex
@subheading HP RF Synthesizer HP8672A
@end iftex
@ifnottex
@section HP RF Synthesizer HP8672A
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hp8672a}

@paragraphindent 0
@strong{Description}: Hewlett-Packard (now Agilent,
@url{http://www.home.agilent.com/}) RF synthesizer HP8672A with
support for output level normalization via frequency/amplitude table
files

Frequency range is @w{2 GHz} to @w{9 GHz}, attenuation range @w{-120 dB}
to @w{10 dB} in @w{1 dB} steps.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).
In the GPIB configuration file use @code{"HP8672A"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{synthesizer_name()}
@item @ref{synthesizer_state()}
@item @ref{synthesizer_frequency()}
@item @ref{synthesizer_step_frequency()}
@item @ref{synthesizer_attenuation()}
@item @ref{synthesizer_minimum_attenuation()}
@item @ref{synthesizer_sweep_up()}
@item @ref{synthesizer_sweep_down()}
@item @ref{synthesizer_reset_frequency()}
@item @ref{synthesizer_use_table()}
@item @ref{synthesizer_attenuation()}
@item @ref{synthesizer_att_ref_freq()}
@item @ref{synthesizer_modulation()}
@item @ref{synthesizer_mod_ampl()}
@item @ref{synthesizer_mod_type()}
@end table


@c #############################################################


@node hjs_attenuator, hjs_daadc, hp8672a, Device Reference
@iftex
@subheading Home-built microwave attenuator
@end iftex
@ifnottex
@section Home-built microwave attenuator
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hjs_attenuator}

@paragraphindent 0
@strong{Description}: Home-built computer controlled microwave
attenuator from the group of H.-J.@: Steinhoff at the University of
Osnabrueck (@url{http://www.physik.uni-osnabrueck.de/mts/}). Works with
a stepper motor to mechanically adjust a microwave attenuator. Requires
a default calibration table file that gets read in when the module is
loaded. The name of the file can be set in the configuration file for the
module. During the @code{PREPARATIONS} section the function
@code{mw_attenuator_initial_attenuation()} @strong{must} be called to tell
the module about the initial attenuation setting.

@paragraphindent 0
@strong{Controlled via}: Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{mw_attenuator_name()}
@item @ref{mw_attenuator_load_calibration()}
@item @ref{mw_attenuator_initial_attenuation()}
@item @ref{mw_attenuator_attenuation()}
@end table


@c #############################################################


@node hjs_daadc, hjs_sfc, hjs_attenuator, Device Reference
@iftex
@subheading Home-built AD and DA converter
@end iftex
@ifnottex
@section Home-built AD and DA converter
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hjs_daadc}

@paragraphindent 0
@strong{Description}: Home-built single channel AD and DA converter from
the group of H.-J.@: Steinhoff at the University of Osnabrueck
(@url{http://www.physik.uni-osnabrueck.de/mts/}). Output voltage can be
reduced via a potentiometer at the front panel.

@paragraphindent 0
@strong{Controlled via}: Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{daq_name()}
@item @ref{daq_reserve_dac()}
@item @ref{daq_set_voltage()}
@item @ref{daq_maximum_output_voltage()}
@item @ref{daq_reserve_adc()}
@item @ref{daq_get_voltage()}
@item @ref{daq_dac_parameter()}
@end table


@c #############################################################


@node hjs_sfc, hjs_fc, hjs_daadc, Device Reference
@iftex
@subheading Simple Field Control (HJS_SFC, Steinhoff group, Osnabrueck)
@end iftex
@ifnottex
@section Simple Field Control (HJS_SFC, Steinhoff group, Osnabrueck)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hjs_sfc}

@paragraphindent 0
@strong{Additionally required module}: @code{hjs_daadc}

@paragraphindent 0
@strong{Description}: Pseudo-device module used for controlling magnets
in the group of H.-J.@: Steinhoff at the University of Osnabrueck
(@url{http://www.physik.uni-osnabrueck.de/mts/}). It's not for a device
that gets controlled directly by this module but instead the magnetic
field is controlled indirectly via the output voltage of a home-built DA
and AD converter, using the module @code{hjs_daadc}. The module requires
a previous calibration of the relation of the DAC output voltage and the
resulting field, with these data getting set in the configuration file for
the module.  Because there's no gaussmeter to control the real field only
this calibration can be used. When this module is used the DAC of the DA
and AD converter can't be used, it gets reserved automatically for this module.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_reset_field()}
@item @ref{magnet_B0()}
@item @ref{magnet_slope()}
@item @ref{magnet_calibration_file()}
@item @ref{set_field()} (deprecated)
@item @ref{sweep_up()} (deprecated)
@item @ref{sweep_down()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node hjs_fc, ips20_4, hjs_sfc, Device Reference
@iftex
@subheading Field Control (HJS_FC, Steinhoff group, Osnabrueck)
@end iftex
@ifnottex
@section Field Control (HJS_FC, Steinhoff group, Osnabrueck)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{hjs_fc}

@paragraphindent 0
@strong{Additionally required module}: @code{hjs_daadc}, @code{witio_48}
and @code{bnm12}

@paragraphindent 0
@strong{Description}: Pseudo-device module used for controlling magnets
in the group of H.-J.@: Steinhoff at the University of
Osnabrueck (@url{http://www.physik.uni-osnabrueck.de/mts/}). There's not
just one device that gets controlled directly by this module but instead
the magnetic field is controlled via the output voltage of a home-built
DA and AD converter, using the module @code{hjs_daadc}, and the field is
measured by the Bruker BNM12 gaussmeter (which in turn requires the
@code{witio_48} module for the WITIO-48 DIO card for reading in the
measured field). When this module is used neither the DAC of the DA and
AD converter nor the first DIO (@code{DIO1}) of the WITIO-48 DIO card
can be used, both get reserved automatically for this module.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{set_field()}
@item @ref{sweep_up()}
@item @ref{sweep_down()}
@item @ref{reset_field()}
@item @ref{magnet_calibration_file()}
@end table


@c #############################################################


@node ips20_4, ips120_10, hjs_fc, Device Reference
@iftex
@subheading Oxford Instruments Magnet Sweep Power Supply IPS20-4
@end iftex
@ifnottex
@section Oxford Instruments Magnet Sweep Power Supply IPS20-4
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{ips20_4}

@paragraphindent 0
@strong{Description}: Sweep power supply for the Oxford Instruments
(@url{http://www.oxford-instruments.com/}) superconducting
magnet used for Berlin @w{360 GHz} spektrometer.

@paragraphindent 0
Please note: With this module the functions expect arguments in terms of
the currents through the sweep coil (or current changes), not in field
units!

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488) via the Oxford ITC 503
temperature controller transfering data between GPIB and Oxford ISOBUS.@*
In the GPIB configuration file use @code{"IPS120_10"} as the device name,
@code{'\r'} or @code{0xd} as the EOScharacter, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_reset_field()}
@item @ref{magnet_sweep_rate()}
@item @ref{magnet_sweep()}
@item @ref{magnet_goto_field_on_end()}
@item @ref{set_field()} (deprecated)
@item @ref{get_field()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node ips120_10, ips120_10_mod, ips20_4, Device Reference
@iftex
@subheading Oxford Instruments Magnet Sweep Power Supply IPS120-10
@end iftex
@ifnottex
@section Oxford Instruments Magnet Sweep Power Supply IPS120-10
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{ips120_10}

@paragraphindent 0
@strong{Description}: Power supply for the Oxford Instruments
(@url{http://www.oxford-instruments.com/}) superconducting
magnet used for the Leiden @w{275 GHz} (J-band) spektrometer.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488)@*
In the GPIB configuration file use @code{"IPS120_10_MOD"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_reset_field()}
@item @ref{magnet_sweep_rate()}
@item @ref{magnet_sweep()}
@item @ref{magnet_goto_field_on_end()}
@item @ref{get_field()} (deprecated)
@item @ref{set_field()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node ips120_10_mod, itc503, ips120_10, Device Reference
@iftex
@subheading Oxford Instruments Magnet Sweep Power Supply IPS120-10 with DAC modulation input
@end iftex
@ifnottex
@section Oxford Instruments Magnet Sweep Power Supply IPS120-10 with DAC modulation input
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{ips120_10_mod}

@paragraphindent 0
@strong{Additionally required module}: @code{rb8510_0} or @code{rb8510_1} (to
be selected via the devices configuration file)

@paragraphindent 0
@strong{Description}: Power supply for the Oxford Instruments
(@url{http://www.oxford-instruments.com/}) superconducting
magnet used for the Leiden W-band spektrometer. This is an older version of the
IPS120-10 with a current resolution of @w{10 mA}. Therefore it has been
fitted with an external voltage input that allows to modulate the output
current by about @w{+/- 5%} of the maximum rated current of @w{120 A} by a
voltage in the @w{+/- 10 V} range. The external voltage is supplied by a
RULBUS RB8510 DAC card, which has a voltage resolution of @w{5 mV},
resulting in a current resolution of @w{0.3 mA} and a field resolution of
ca.@: @w{0.125 G}. Please note that this improved resolution applies only
when a field is set, the sweep step resolution remains unchanged (and
sweeps thus should probably be avoided when using this device).

@paragraphindent 0
@strong{Controlled via}: GPIB bus (the device has a (non-standard)
serial port a @code{GPV24} interface for conversion
between @code{RS232C} and @code{IEEE488} is employed).

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_reset_field()}
@item @ref{magnet_sweep_rate()}
@item @ref{magnet_sweep()}
@item @ref{magnet_goto_field_on_end()}
@item @ref{get_field()} (deprecated)
@item @ref{set_field()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node itc503, keithley228a, ips120_10_mod, Device Reference
@iftex
@subheading Oxford Instruments Temperature Controller ITC503
@end iftex
@ifnottex
@section Oxford Instruments Temperature Controller ITC503
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{itc503}

@paragraphindent 0
@strong{Description}: Oxford Instruments
(@url{http://www.oxford-instruments.com/}) ITC503 temperature controller.
Currently only temperature measurements are supported, no automatic
adjustment of temperature.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"ITC503"} as the device name,
@code{'\r'} or @code{0xd} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{temp_contr_name()}
@item @ref{temp_contr_temperature()}
@item @ref{temp_contr_sample_channel()}
@item @ref{temp_contr_sensor_unit()}
@item @ref{temp_contr_lock_keyboard()}
@end table


@c #############################################################


@node keithley228a, kontron4060, itc503, Device Reference
@iftex
@subheading Magnet Power Supply Keithley 228A (Berlin W-Band)
@end iftex
@ifnottex
@section Magnet Power Supply Keithley 228A (Berlin W-Band)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{keithley228a}

@paragraphindent 0
@strong{Additionally required module}: @code{sr510} (can be changed)

@paragraphindent 0
@strong{Description}: Keithley (@url{http://www.keithley.com/}) power supply
228A, used as sweep coil power supply for the Berlin W-band spectrometer. In
order to improve the current resolution an aditional voltage source is needed.
Currently this done via the DAC output @code{6} (can be changed by one of the
functions) of the Stanford Research lock-in amplifier SR510 and the
module @code{sr510} must be listed before the power supply
module. Alternatively, after minor changes to the configuration file,
also other lock-in amplifiers can be used.

@paragraphindent 0
Please note: With this module the functions expect arguments in terms of
the currents through the sweep coil, not in field units!

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"KEITHLEY228A"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_sweep_down()}
@item @ref{magnet_reset_field()}
@item @ref{magnet_use_correction()}
@item @ref{magnet_use_dac_port()}
@item @ref{set_field()} (deprecated)
@item @ref{get_field()} (deprecated)
@item @ref{sweep_up()} (deprecated)
@item @ref{sweep_down()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node kontron4060, lakeshore330, keithley228a, Device Reference
@iftex
@subheading Kontron 4060 Multimeter
@end iftex
@ifnottex
@section Kontron 4060 Multimeter
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{kontron4060}

@paragraphindent 0
@strong{Description}: Kontron (@url{http://www.kontron.com/}) digital
voltmeter 4060, DC and AC measurements

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"KONTRON4060"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{multimeter_name()}
@item @ref{multimeter_mode()}
@item @ref{multimeter_get_data()}
@item @ref{multimeter_ac_measurement()} (deprecated)
@item @ref{multimeter_dc_measurement()} (deprecated)
@end table


@c #############################################################


@node lakeshore330, lecroy9400, kontron4060, Device Reference
@iftex
@subheading Lake Shore 330 Temperature Controller
@end iftex
@ifnottex
@section Lake Shore 330 Temperature Controller
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lakeshore330}

@paragraphindent 0
@strong{Description}: Lake Shore (@url{http://www.lakeshore.com/})
temperature controller 330. Currently only temperature measurements are
supported, no automatic adjustment of the temperature.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"LAKESHORE330"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{temp_contr_name()}
@item @ref{temp_contr_temperature()}
@item @ref{temp_contr_sample_channel()}
@item @ref{temp_contr_sensor_unit()}
@item @ref{temp_contr_lock_keyboard()}
@end table


@c #############################################################


@node lecroy9400, lecroy9410, lakeshore330, Device Reference
@iftex
@subheading LeCroy Digitizing Oscilloscope 9400
@end iftex
@ifnottex
@section LeCroy Digitizing Oscilloscope 9400
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lecroy9400}

@paragraphindent 0
@strong{Description}: LeCroy (@url{http://www.lecroy.com/}) Digitizing
Oscilloscope 9400, 2 measurement channels, 2 function channels (needed
for averaging).

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).
In the GPIB configuration file use @code{"LECROY9400"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} and @code{set-eot} to
@code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@c @ref{digitizer_define_window()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_averaging()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_delay()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_curve_fast()}
@end table


@c #############################################################


@node lecroy9410, lecroy9420, lecroy9400, Device Reference
@iftex
@subheading LeCroy Digitizing Oscilloscope 9410
@end iftex
@ifnottex
@section LeCroy Digitizing Oscilloscope 9410
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lecroy9410}

@paragraphindent 0
@strong{Description}: LeCroy (@url{http://www.lecroy.com/}) Digitizing
Oscilloscope 9410, 2 measurement channels, 2 function channels (needed
for averaging), 2 memory channels, 150 MHz bandwidth.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"LECROY9410"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} and @code{set-eot} to
@code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_interleave_mode()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_offset()}
@item @ref{digitizer_coupling()}
@item @ref{digitizer_bandwidth_limiter()}
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_trigger_level()}
@item @ref{digitizer_trigger_slope()}
@item @ref{digitizer_trigger_coupling()}
@item @ref{digitizer_trigger_mode()}
@item @ref{digitizer_trigger_delay()}
@item @ref{digitizer_averaging()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_run()}
@item @ref{digitizer_copy_curve()}
@end table


@c #############################################################


@node lecroy9420, lecroy9424, lecroy9410, Device Reference
@iftex
@subheading LeCroy Digitizing Oscilloscope 9420
@end iftex
@ifnottex
@section LeCroy Digitizing Oscilloscope 9420
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lecroy9420}

@paragraphindent 0
@strong{Description}: LeCroy (@url{http://www.lecroy.com/}) Digitizing
Oscilloscope 9420, 2 measurement channels, 2 function channels (needed
for averaging), 2 memory channels, 350 MHz bandwidth.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"LECROY9420"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} and @code{set-eot} to
@code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_interleave_mode()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_offset()}
@item @ref{digitizer_coupling()}
@item @ref{digitizer_bandwidth_limiter()}
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_trigger_level()}
@item @ref{digitizer_trigger_slope()}
@item @ref{digitizer_trigger_coupling()}
@item @ref{digitizer_trigger_mode()}
@item @ref{digitizer_trigger_delay()}
@item @ref{digitizer_averaging()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_run()}
@item @ref{digitizer_copy_curve()}
@end table


@c #############################################################


@node lecroy9424, lecroy9424e, lecroy9420, Device Reference
@iftex
@subheading LeCroy Digitizing Oscilloscope 9424
@end iftex
@ifnottex
@section LeCroy Digitizing Oscilloscope 9424
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lecroy9424}

@paragraphindent 0
@strong{Description}: LeCroy (@url{http://www.lecroy.com/}) Digitizing
Oscilloscope 9424, 4 measurement channels, 2 function channels (needed
for averaging), 2 memory channels, 350 MHz bandwidth

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).
In the GPIB configuration file use @code{"LECROY9424"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} and @code{set-eot} to
@code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_interleave_mode()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_offset()}
@item @ref{digitizer_coupling()}
@item @ref{digitizer_bandwidth_limiter()}
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_trigger_level()}
@item @ref{digitizer_trigger_slope()}
@item @ref{digitizer_trigger_coupling()}
@item @ref{digitizer_trigger_mode()}
@item @ref{digitizer_trigger_delay()}
@item @ref{digitizer_averaging()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_run()}
@item @ref{digitizer_copy_curve()}
@end table


@c #############################################################


@node lecroy9424e, lecroy9450, lecroy9424, Device Reference
@iftex
@subheading LeCroy Digitizing Oscilloscope 9424E
@end iftex
@ifnottex
@section LeCroy Digitizing Oscilloscope 9424E
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lecroy9424e}

@paragraphindent 0

@strong{Description}: LeCroy (@url{http://www.lecroy.com/}) Digitizing
Oscilloscope 9424E, 4 measurement channels, 2 function channels (needed for
averaging), 2 memory channels, 350 MHz bandwidth. It is mostly identical to
the LeCroy9424, but the fourth channel can't be used as a trigger input and
the device has an external trigger input instead.


@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).
In the GPIB configuration file use @code{"LECROY9424E"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} and @code{set-eot} to
@code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_interleave_mode()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_offset()}
@item @ref{digitizer_coupling()}
@item @ref{digitizer_bandwidth_limiter()}
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_trigger_level()}
@item @ref{digitizer_trigger_slope()}
@item @ref{digitizer_trigger_coupling()}
@item @ref{digitizer_trigger_mode()}
@item @ref{digitizer_trigger_delay()}
@item @ref{digitizer_averaging()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_run()}
@item @ref{digitizer_copy_curve()}
@end table


@c #############################################################


@node lecroy9450, lecroy_wr, lecroy9424e, Device Reference
@iftex
@subheading LeCroy Digitizing Oscilloscope 9450
@end iftex
@ifnottex
@section LeCroy Digitizing Oscilloscope 9450
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lecroy9450}

@paragraphindent 0
@strong{Description}: LeCroy (@url{http://www.lecroy.com/}) Digitizing
Oscilloscope 9450, 2 measurement channels, 2 function channels (needed for
averaging), 2 memory channels, 350 MHz bandwidth. This module should also work
with the 9450A, which seems to be just a 300 MHz bandwidth version of the
9450.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).
In the GPIB configuration file use @code{"LECROY9450"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} and @code{set-eot} to
@code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_interleave_mode()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_offset()}
@item @ref{digitizer_coupling()}
@item @ref{digitizer_bandwidth_limiter()}
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_trigger_level()}
@item @ref{digitizer_trigger_slope()}
@item @ref{digitizer_trigger_coupling()}
@item @ref{digitizer_trigger_mode()}
@item @ref{digitizer_trigger_delay()}
@item @ref{digitizer_averaging()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_run()}
@item @ref{digitizer_copy_curve()}
@end table


@c #############################################################

@node lecroy_wr, lecroy_ws, lecroy9450, Device Reference
@iftex
@subheading LeCroy Digitizing Oscilloscope Waverunner and Waverunner-2
@end iftex
@ifnottex
@section LeCroy Digitizing Oscilloscope Waverunner and Waverunner-2
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lecroy_wr}

@paragraphindent 0
@strong{Description}: LeCroy (@url{http://www.lecroy.com/}) Digitizing
Oscilloscope Waverunner models
@table @samp
@item LT224
4 channels, bandwidth 200 MHz, sample rate 200 MS/s (SS) / 10 GS/s (RIS),
acquisition memory 100 kpts/channel
@item LT322
2 channels, bandwidth 200 MHz, sample rate 200 MS/s (SS) / 10 GS/s (RIS),
acquisition memory 100 kpts/channel
@item LT342
2 channels, bandwidth 500 MHz, sample rate 500 MS/s (SS) / 25 GS/s (RIS),
acquisition memory 250 kpts/channel
@item LT342L
2 channels, bandwidth 500 MHz, sample rate 500 MS/s (SS) / 25 GS/s (RIS),
acquisition memory 1 Mpts/channel
@item LT344
4 channels, bandwidth 500 MHz, sample rate 500 MS/s (SS) / 25 GS/s (RIS),
acquisition memory 250 kpts/channel
@item LT344L
4 channels, bandwidth 500 MHz, sample rate 1 GS/s (SS) / 25 GS/s (RIS),
acquisition memory 1 Mpts/channel
@item LT364
4 channels, bandwidth 500 MHz, sample rate 500 MS/s (SS) / 25 GS/s (RIS),
acquisition memory 500 kpts/channel
@item LT364L
4 channels, bandwidth 500 MHz, sample rate 500 MS/s (SS) / 25 GS/s (RIS),
acquisition memory 2 Mpts/channel
@end table
and Waverunner-2 models
@table @samp
@item LT262
2 channels, bandwidth 350 MHz, sample rate 1 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 100 kpts/channel
@item LT264
4 channels, bandwidth 350 MHz, sample rate 1 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 100 kpts/channel
@item LT264M
4 channels, bandwidth 350 MHz, sample rate 1 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 1 Mpts/channel
@item LT354
4 channels, bandwidth 500 MHz, sample rate 1 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 250 kpts/channel
@item LT354M
4 channels, bandwidth 500 MHz, sample rate 1 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 1 Mpts/channel
@item LT354ML
4 channels, bandwidth 500 MHz, sample rate 1 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 2 Mpts/channel
@item LT372
2 channels, bandwidth 500 MHz, sample rate 1 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 250 kpts/channel
@item LT372M
2 channels, bandwidth 500 MHz, sample rate 1 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 1 Mpts/channel
@item LT374
4 channels, bandwidth 500 MHz, sample rate 2 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 250 kpts/channel
@item LT374M
4 channels, bandwidth 500 MHz, sample rate 2 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 1 Mpts/channel
@item LT374L
4 channels, bandwidth 500 MHz, sample rate 2 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 4 Mpts/channel
@item LT584
4 channels, bandwidth 1 GHz, sample rate 2 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 250 kpts/channel
@item LT584M
4 channels, bandwidth 1 GHz, sample rate 2 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 1 Mpts/channel
@item LT584L
4 channels, bandwidth 1 GHz, sample rate 2 GS/s (SS) / 50 GS/s (RIS),
acquisition memory 4 Mpts/channel
@end table
The exact model must be set in the configuration file, together with
information about further available options. All models have 4 function
channels (used for averaging) and 4 memory channels.

@paragraphindent 0
@strong{Please note:} Due to the huge number of different models it
was not possible to test the module with all those models. Moreover,
specification data from the manuals as well as the LeCroy web site
had to be used which sometimes contradict each other. Thus I can
neither guarantee that the used data are correct nor that support
for all the modules works flawlessly. Please send me a bug report
if you have such a model and you experience problems.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).
In the GPIB configuration file use @code{"LECROY_WR"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} and @code{set-eot} to
@code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_interleave_mode()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_offset()}
@item @ref{digitizer_coupling()}
@item @ref{digitizer_bandwidth_limiter()}
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_trigger_level()}
@item @ref{digitizer_trigger_slope()}
@item @ref{digitizer_trigger_coupling()}
@item @ref{digitizer_trigger_mode()}
@item @ref{digitizer_trigger_delay()}
@item @ref{digitizer_averaging()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_memory_size()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_run()}
@item @ref{digitizer_copy_curve()}
@end table


@c #############################################################

@node lecroy_ws, mcn700_2000, lecroy_wr, Device Reference
@iftex
@subheading LeCroy Digitizing Oscilloscope WaveSurfer
@end iftex
@ifnottex
@section LeCroy Digitizing Oscilloscope WaveSurfer
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{lecroy_ws}

@paragraphindent 0
@strong{Description}: LeCroy (@url{http://www.lecroy.com/}) Digitizing
Oscilloscope WaveSurfer, models 422, 424, 432, 434, 452 and 454 (the
model must be set in the configuration file). 2 or 4 measurement
channels (depending on model), 1 function channel, 4 memory channels.

@paragraphindent 0
@strong{Controlled via}: LAN (LeCroy VICP protocol)

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_interleave_mode()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_offset()}
@item @ref{digitizer_coupling()}
@item @ref{digitizer_bandwidth_limiter()}
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_trigger_level()}
@item @ref{digitizer_trigger_slope()}
@item @ref{digitizer_trigger_coupling()}
@item @ref{digitizer_trigger_mode()}
@item @ref{digitizer_trigger_delay()}
@item @ref{digitizer_averaging()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@c @item @ref{digitizer_memory_size()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_run()}
@item @ref{digitizer_copy_curve()}
@end table


@c #############################################################

@node mcn700_2000, me6000, lecroy_ws, Device Reference
@iftex
@subheading F.u.G. Elektronik GmbH Power Supply MCN 700-2000
@end iftex
@ifnottex
@section F.u.G. Elektronik GmbH Power Supply MCN 700-2000
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{mcn700_2000}

@paragraphindent 0
@strong{Description}: Power supply by F.u.G. Elektronik GmbH
(@url{http://www.fug-elektronik.de/}) , voltage range @w{0 V} to @w{2000 V}
with @w{1 V} resolution, current range @w{0 mA} to @w{300 mA} with
@w{1 mA} resolution.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{powersupply_name()}
@item @ref{powersupply_voltage()}
@item @ref{powersupply_current()}
@end table


@c #############################################################


@node me6000, ni6601, mcn700_2000, Device Reference
@iftex
@subheading Meilhaus Electronic GmbH ME-6000 and ME-6100 DAC card
@end iftex
@ifnottex
@section Meilhaus Electronic GmbH ME-6000 and ME-6100 DAC card
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{me6000}

@paragraphindent 0
@strong{Description}: Meilhaus Electronic GmbH (@url{http://www.meilhaus.de/})
Digital-to-analog converter card with 4, 8 or 16 output ports, depending on
model of card.

@paragraphindent 0
@strong{Controlled via}: PCI card (required Linux device driver and
library are part of the @code{fsc2} package)

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{daq_name()}
@item @ref{daq_set_voltage()}
@item @ref{daq_reserve_dac()}
@item @ref{daq_dac_parameter()}
@end table


@c #############################################################


@node ni6601, pci_mio_16e_1, me6000, Device Reference
@iftex
@subheading National Instruments 6601 GPCT card
@end iftex
@ifnottex
@section National Instruments 6601 GPCT card
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{ni6601}

@paragraphindent 0
@strong{Description}: General purpose counter and timer card NI6601 by
National Instruments (@url{http://www.natinst.com}) with 4 channels, used
for event counting and pulse creation.

@paragraphindent 0
@strong{Controlled via}: PCI card (required Linux device driver and
library are part of the @code{fsc2} package)

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{counter_name()}
@item @ref{counter_start_continuous_counter()}
@item @ref{counter_start_timed_counter()}
@item @ref{counter_timed_count()}
@item @ref{counter_intermediate_count()}
@item @ref{counter_final_count()}
@item @ref{counter_stop_counter()}
@item @ref{counter_single_pulse()}
@item @ref{counter_continuous_pulses()}
@item @ref{counter_dio_read()}
@item @ref{counter_dio_write()}
@end table


@c #############################################################


@node pci_mio_16e_1, pt2025, ni6601, Device Reference
@iftex
@subheading National Instruments PCI-MIO-16E-1 DAQ card
@end iftex
@ifnottex
@section National Instruments PCI-MIO-16E-1 DAQ card
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{pci_mio_16e_1}

@paragraphindent 0
@strong{Description}: Data acquisition (DAQ) card PCI-MIO-16E-1 by National
Instruments (@url{http://www.natinst.com}) for analog input and output and
with general purpose counters, timer and digital I/O.

@paragraphindent 0
@strong{Controlled via}: PCI card (required Linux device driver and
library are part of the @code{fsc2} package)

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{daq_name()}
@item @ref{daq_ao_channel_setup()}
@item @ref{daq_set_voltage()}
@item @ref{daq_get_voltage()}
@item @ref{daq_reserve_dac()}
@item @ref{daq_reserve_adc()}
@item @ref{daq_ai_channel_setup()}
@item @ref{daq_ai_acq_setup()}
@item @ref{daq_ai_start_acquisition()}
@item @ref{daq_ai_get_curve()}
@item @ref{daq_start_continuous_counter()}
@item @ref{daq_start_timed_counter()}
@item @ref{daq_timed_count()}
@item @ref{daq_intermediate_count()}
@item @ref{daq_final_count()}
@item @ref{daq_stop_counter()}
@item @ref{daq_single_pulse()}
@item @ref{daq_continuous_pulses()}
@item @ref{daq_freq_out()}
@item @ref{daq_trigger_setup()}
@item @ref{daq_dio_read()}
@item @ref{daq_dio_write()}
@end table


@c #############################################################

@node pt2025, rs_sml01, pci_mio_16e_1, Device Reference

@iftex
@subheading Metrolab NMR Teslameter PT2025
@end iftex
@ifnottex
@section Metrolab NMR Teslameter PT2025
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{pt2025}

@paragraphindent 0
@strong{Description}: Metrolab (@url{http://www.metrolab.ch/}) NMR
Teslameter PT2025 - module currently only supports the @w{1.5 T} to
@w{3.4 T} probe and fields above @w{3.15 T}. Measured fields are returned
in Gauss, not Tesla!

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"PT2025"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{gaussmeter_name()}
@item @ref{gaussmeter_field()}
@item @ref{measure_field()}
@item @ref{gaussmeter_resolution()}
@item @ref{gaussmeter_probe_orientation()}
@end table


@c #############################################################


@node rs_sml01, rs_spec10, pt2025, Device Reference
@iftex
@subheading Rohde & Schwarz SML01 Signal Generator 
@end iftex
@ifnottex
@section Rohde & Schwarz SML01 Signal Generator
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{rs_sml01}

@paragraphindent 0
@strong{Description}: Rohde & Schwarz (@url{http://www.rsd.de/}) SML01
Signal Generator with support for output level normalization via
frequency/amplitude table files.

Frequency range is @w{9 kHz} to @w{1.1 GHz}, attenuation range @w{-140 dB}
to @w{13 dB} in @w{0.1 dB} steps.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"RS_SML01"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{synthesizer_name()}
@item @ref{synthesizer_state()}
@item @ref{synthesizer_frequency()}
@item @ref{synthesizer_step_frequency()}
@item @ref{synthesizer_attenuation()}
@item @ref{synthesizer_minimum_attenuation()}
@item @ref{synthesizer_sweep_up()}
@item @ref{synthesizer_sweep_down()}
@item @ref{synthesizer_reset_frequency()}
@item @ref{synthesizer_use_table()}
@item @ref{synthesizer_attenuation()}
@item @ref{synthesizer_att_ref_freq()}
@item @ref{synthesizer_modulation()}
@item @ref{synthesizer_mod_ampl()}
@item @ref{synthesizer_mod_type()}
@item @ref{synthesizer_mod_source()}
@item @ref{synthesizer_mod_freq()}
@item @ref{synthesizer_pulse_state()}
@item @ref{synthesizer_pulse_trigger_slope()}
@item @ref{synthesizer_pulse_width()}
@item @ref{synthesizer_pulse_delay()}
@end table


@c #############################################################


@node rs_spec10, rb8509, rs_sml01, Device Reference
@iftex
@subheading Roper Scientific Spec-10 CCD Camera
@end iftex
@ifnottex
@section Roper Scientific Spec-10 CCD Camera
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{rs_spec10}

@paragraphindent 0
@strong{Description}: Roper Scientific (@url{http://www.roperscientific.com/})
Spec-10 CCD camera, LN-cooled
@paragraphindent 0
@strong{Controlled via}: PCI card, requiring a Linux device driver and
the PVCAM library (at least version 2.6.4-2) that are both available
from Roper Scientific.

@paragraphindent 0
Note: Several important parameters of the camera need to be set in the
configuration file to agree with the properties of the camera. There
also can be set up that images or spectra fetched from the camera are
automatically mirrored (i.e.@: left and right side exchanged) or images
turned upside-down.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{ccd_camera_name()}
@item @ref{ccd_camera_roi()}
@item @ref{ccd_camera_binning()}
@item @ref{ccd_camera_binning_method()}
@item @ref{ccd_camera_exposure_time()}
@item @ref{ccd_camera_clear_cycles()}
@item @ref{ccd_camera_get_image()}
@item @ref{ccd_camera_get_spectrum()}
@item @ref{ccd_camera_temperature()}
@item @ref{ccd_camera_pixel_size()}
@item @ref{ccd_camera_pixel_area()}
@end table


@c #############################################################


@node rb8509, rb8510, rs_spec10, Device Reference
@iftex
@subheading Rulbus 12-bit ADC Card
@end iftex
@ifnottex
@section Rulbus 12-bit ADC Card
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{rb8509}

@paragraphindent 0
@strong{Description}: 12-bit ADC card for Rulbus (Rijksuniversiteit
Leiden BUS, @url{http://www.eld.leidenuniv.nl/~moene/Home/projects/rulbus/})
- requires Linux device driver and library that are part of the @code{fsc2}
package)

@paragraphindent 0
@strong{Controlled via}: Rulbus


@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{daq_name()}
@item @ref{daq_get_voltage()}
@item @ref{daq_trigger_mode()}
@item @ref{daq_gain()}
@end table


@c #############################################################


@node rb8510, rb_pulser_j, rb8509, Device Reference
@iftex
@subheading Rulbus 12-bit DAC Card
@end iftex
@ifnottex
@section Rulbus 12-bit DAC Card
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{rb8510_0} or @code{rb_8510_1} (there are always
two DACs on a card an each one has its own module)

@paragraphindent 0
@strong{Description}: 12-bit DAC card for Rulbus (Rijksuniversiteit
Leiden BUS, @url{http://www.eld.leidenuniv.nl/~moene/Home/projects/rulbus/})
- requires Linux device driver and library that are part of the @code{fsc2}
package)

@paragraphindent 0
@strong{Controlled via}: Rulbus


@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{daq_name()}
@item @ref{daq_reserve_dac()}
@item @ref{daq_set_voltage()}
@end table


@c #############################################################


@node rb_pulser_j, rb_pulser_w, rb8510, Device Reference
@iftex
@subheading Rulbus Pulser (J-band version)
@end iftex
@ifnottex
@section Rulbus Pulser (J-band version)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{rb_pulser_j}

@paragraphindent 0
@strong{Description}: Pseudo-pulser for J-band spectrometer in Leiden,
using the Rulbus (Rijksuniversiteit Leiden BUS,
@url{http://www.eld.leidenuniv.nl/~moene/Home/projects/rulbus/})
- requires Linux device driver and library that are part of the @code{fsc2}
package). This pulser isn't a normal stand-alone device but consists of a
combination of (currently) 10 Rulbus RB8514 delay cards and 2 clock cards
(one fixed frequency 100 MHz card and a RB8515 card with adjustable frequency)
as well as requiring the @strong{Rohde & Schwarz SML01} synthesizer (with
the SML-B3 option) in order to be able to create @code{RF} pulses.

The timebase of this pulser is fixed to @w{10 ns}, but this can be changed
by using a second adjustable clock card and a modification of the
configuration file for the pulser. Its number of functions is restricted to
@code{MICROWAVE}, @code{RADIO_FREQUENCY} and @code{DETECTION}. Moreover, only
a maximum of three active @code{MICROWAVE} pulses is possible and only a single
active @code{RF} and @code{DETECTION} pulse. To be able to create an @code{RF}
pulse the @strong{R&S SML01} synthesizer mentioned above is required. The
@code{RF} and @code{DETECTION} pulse can only start after the first
@code{MICROWAVE} pulse and the length of pulses and the distance between
them is limited to about @w{167 ms} (and that's also the maximum delay
between the start of the pulse sequence and the start of the first pulse of
a function).

@paragraphindent 0
@strong{Controlled via}: Rulbus
@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{pulser_name()}
@item @ref{pulser_state()}
@item @ref{pulser_update()}
@item @ref{pulser_shift()}
@item @ref{pulser_increment()}
@item @ref{pulser_reset()}
@item @ref{pulser_pulse_reset()}
@item @ref{pulser_show_pulses()}
@item @ref{pulser_dump_pulses()}
@item @ref{pulser_pulse_minimum_specs()}
@end table


@c #############################################################


@node rb_pulser_w, rs690, rb_pulser_j, Device Reference
@iftex
@subheading Rulbus Pulser (W-band version)
@end iftex
@ifnottex
@section Rulbus Pulser (W-band version)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{rb_pulser_w}

@paragraphindent 0
@strong{Description}: Pulser used for the W-band spectrometer in Leiden,
using the Rulbus (Rijksuniversiteit Leiden BUS,
@url{http://www.eld.leidenuniv.nl/~moene/Home/projects/rulbus/})
- requires Linux device driver and library that are part of the @code{fsc2}
package). This pulser isn't a normal stand-alone device but consists of a
combination of (currently) 15 Rulbus RB8514 delay cards and 2 clock cards
(one fixed frequency 100 MHz card and a RB8515 card with adjustable frequency)
as well as requiring the @strong{Rohde & Schwarz SML01} synthesizer (with
the SML-B3 option) in order to be able to create @code{RF} pulses.

The timebase of this pulser is at the moment fixed to @w{10 ns}, but this
can be changed by using a second adjustable clock card and a modification of
the configuration file for the pulser. Its number of functions is restricted
to @code{MICROWAVE}, @code{RADIO_FREQUENCY}, @code{DETECTION}, @code{LASER}
and @code{DEFENSE}. Only a maximum of three active microwave pulses is
possible and only a single active @code{RF}, @code{Laser}, @code{DETECTION}
and @code{DEFENSE} pulse.

Moreover, the @code{DETECTION} pulse can be only switched on or off by setting
its length to either the length of the pulsers timebase or to @w{0 s} -
the end pulse of the card for the @code{DETECTION} pulse is to be used as the
detection pulse and end pulses can only be switched on or off. Per default
the @code{DETECTION} pulse (if it is defined) is always on, even if no length
has been set.

The @code{DEFENSE} pulse always must start at the very beginning of the pulse
pattern. And unless the function @ref{pulser_defense_pulse_mode()} has been
called with the appropriate arguments before the definition of the
@code{DFENSE} pulse a defense pulse, covering the time from the start of the
pulse pattern to some time after the end of the last active microwave pulse
(see also function @ref{pulser_minimum_defense_distance()}) will be created
automatically. 

To be able to create an @code{RF} pulse the @strong{R&S SML01} synthesizer
mentioned above is required.

The length of pulses and the distance between them is limited to about
@w{167 ms} (and that's also the maximum delay between the start of the
pulse sequence and the start of the first pulse of a function).


@paragraphindent 0
@strong{Controlled via}: Rulbus
@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{pulser_name()}
@item @ref{pulser_state()}
@item @ref{pulser_update()}
@item @ref{pulser_shift()}
@item @ref{pulser_increment()}
@item @ref{pulser_reset()}
@item @ref{pulser_pulse_reset()}
@item @ref{pulser_show_pulses()}
@item @ref{pulser_dump_pulses()}
@item @ref{pulser_minimum_defense_distance()}
@item @ref{pulser_defense_pulse_mode()}
@item @ref{pulser_pulse_minimum_specs()}
@end table


@c #############################################################


@node rs690, s_band_magnet_broad, rb_pulser_w, Device Reference
@iftex
@subheading Interface Technology RS690 Word Generator (Berlin 360 GHz)
@end iftex
@ifnottex
@section Interface Technology RS690 Word Generator (Berlin 360 GHz)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{rs690}

@paragraphindent 0
@strong{Description}: Interface Technology RS690 Word Generator, used as pulser
for the Berlin 360 GHz spectrometer.

@paragraphindent 0
Timebase: internal clock @w{4 ns}, @w{8 ns} and @w{16 ns}, external
clock @w{4 ns} and longer (either via @code{TTL} or @code{ECL} level
input connector)@*
Trigger-in: either via @code{TTL} or @code{ECL} level input connector@*
Number of channels: 16 (4 per output connector) with internal @w{4 ns}
timebase or external clock, 32 (8 per output connector) with internal @w{8 ns}
timebase, 64 (16 per output connector) with internal @w{16 ns} timebase@*
Maximum repetition time: 2,147,483,647 times the timebase with external
clock or @w{4 ns} internal clock (i.e.@: @w{8.59 s}), @w{17.18 s} with
@w{8 ns} internal timebase, @w{34.36 s} with @w{16 ns} internal timebase.

@paragraphindent 0
When using an external clock or the internal @w{4 ns} timebase for certain 
pulse seqences the repetition time may be increases slightly (but never more
than 3 times the timebase), with an @w{8 ns} timebase the repetition time
may become larger by @w{8 ns}.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"RS690"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} to
@code{yes} and @code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{pulser_name()}
@item @ref{pulser_state()}
@item @ref{pulser_channel_state()}
@item @ref{pulser_update()}
@item @ref{pulser_shift()}
@item @ref{pulser_increment()}
@item @ref{pulser_reset()}
@item @ref{pulser_pulse_reset()}
@item @ref{pulser_lock_keyboard()}
@item @ref{pulser_shape_to_defense_minimum_distance()}
@item @ref{pulser_defense_to_shape_minimum_distance()}
@item @ref{pulser_automatic_shape_pulses()}
@item @ref{pulser_automatic_twt_pulses()}
@item @ref{pulser_minimum_twt_pulse_distance()}
@item @ref{pulser_show_pulses()}
@item @ref{pulser_dump_pulses()}
@end table


@c #############################################################


@node s_band_magnet_broad, s_band_magnet_narrow, rs690, Device Reference
@iftex
@subheading S-band Magnet Power Supply (broad range)
@end iftex
@ifnottex
@section S-band Magnet Power Supply (broad range)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{s_band_magnet_broad}

@paragraphindent 0
@strong{Description}: Power supply for magnet with home-built computer
control to be used with the S-band spectrometer in the group of T.@:
Prisner at the J.-W.-Goethe University in Frankfurt/Main
(@url{http://www.prisner.de/}). Field range is @w{0 G} to @w{2047.5 G}
with a resolution of @w{0.5 G}.

@paragraphindent 0
@strong{Controlled via}: Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_sweep_down()}
@item @ref{magnet_reset_field()}
@item @ref{magnet_goto_field_on_end()}
@item @ref{set_field()} (deprecated)
@item @ref{get_field()} (deprecated)
@item @ref{sweep_up()} (deprecated)
@item @ref{sweep_down()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node s_band_magnet_narrow, schlum7150, s_band_magnet_broad, Device Reference
@iftex
@subheading S-band Magnet Power Supply (narrow range)
@end iftex
@ifnottex
@section S-band Magnet Power Supply (narrow range)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{s_band_magnet_narrow}

@paragraphindent 0
@strong{Description}: Power supply for magnet with home-built computer
control to be used with the S-band spectrometer in the group of T.@:
Prisner at the J.-W.-Goethe University in Frankfurt/Main
(@url{http://www.prisner.de/}). Field range is @w{1070 G} to @w{1479.5 G}
with a resolution of @w{0.1 G}.

@paragraphindent 0
@strong{Controlled via}: Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{magnet_name()}
@item @ref{magnet_setup()}
@item @ref{magnet_field()}
@item @ref{magnet_reset_field()}
@item @ref{magnet_sweep_up()}
@item @ref{magnet_sweep_down()}
@item @ref{magnet_goto_field_on_end()}
@item @ref{set_field()} (deprecated)
@item @ref{get_field()} (deprecated)
@item @ref{sweep_up()} (deprecated)
@item @ref{sweep_down()} (deprecated)
@item @ref{reset_field()} (deprecated)
@end table


@c #############################################################


@node schlum7150, spectrapro_300i, s_band_magnet_narrow, Device Reference
@iftex
@subheading Schlumberger Solartron 7150 Multimeter
@end iftex
@ifnottex
@section Schlumberger Solartron 7150 Multimeter
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{schlum7150}

@paragraphindent 0
@strong{Description}: Schlumberger Solartron 7150 Multimeter, DC and AC
voltage and current measurements

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"SPECTRAPRO_300I"} as the device
name, @code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos}
to @code{yes} and @code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{multimeter_name()}
@item @ref{multimeter_mode()}
@item @ref{multimeter_precision()}
@item @ref{multimeter_get_data()}
@item @ref{multimeter_lock_keyboard()}
@end table


@c #############################################################


@node spectrapro_300i, spex_cd2a, schlum7150, Device Reference
@iftex
@subheading Acton Research SpectraPro-300i Monochromator
@end iftex
@ifnottex
@section Acton Research SpectraPro-300i Monochromator
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{spectrapro_300i}

@paragraphindent 0
@strong{Description}: Acton Research (@url{http://www.acton-research.com/}
SpectraPro-300i monochromator, up to 3 gratings on up to 3 turrets,
wavelength range @w{0 nm} to @w{1400 nm}.

@paragraphindent 0
@strong{Controlled via}:  Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{monochromator_name()}
@item @ref{monochromator_grating()}
@item @ref{monochromator_wavelength()}
@item @ref{monochromator_wavenumber()}
@item @ref{monochromator_groove_density()}
@item @ref{monochromator_wavelength_axis()}
@item @ref{monochromator_wavenumber_axis()}
@item @ref{monochromator_calc_wavelength()}
@item @ref{monochromator_set_calibration()}
@item @ref{monochromator_load_calibration()}
@item @ref{monochromator_zero_offset()}
@item @ref{monochromator_grating_adjust()}
@item @ref{monochromator_turret()}
@item @ref{monochromator_install_grating()}
@item @ref{monochromator_calibrate()}
@end table


@c #############################################################


@node spex_cd2a, sr510, spectrapro_300i, Device Reference
@iftex
@subheading SPEX Monochromators with CD2A Compudrive
@end iftex
@ifnottex
@section SPEX Monochromators with CD2A Compudrive
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{spex_cd2a}

@paragraphindent 0
@strong{Description}: Monochromators by SPEX controlled by the computer
via the CD2A Compudrive (i.e.@: 1249, 1403, 1404, 1680B, 1681B, 1701,
1702, 1703, 1704, 1870B, 1870C).

@paragraphindent 0
@strong{Controlled via}:  Serial port

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{monochromator_name()}
@item @ref{monochromator_wavelength()}
@item @ref{monochromator_wavenumber()}
@item @ref{monochromator_laser_line()}
@item @ref{monochromator_scan_setup()}
@item @ref{monochromator_start_scan()}
@item @ref{monochromator_scan_step()}
@item @ref{monochromator_wavelength_axis()}
@item @ref{monochromator_wavenumber_axis()}
@item @ref{monochromator_calibrate()}
@item @ref{monochromator_shutter_limits()}
@item @ref{monochromator_wavenumber_scan_limits()}
@item @ref{monochromator_wavelength_scan_limits()}
@item @ref{monochromator_groove_density()}
@end table


@c #############################################################


@node sr510, sr530, spex_cd2a, Device Reference
@iftex
@subheading Stanford Research Lock-In Amplifier SR510
@end iftex
@ifnottex
@section Stanford Research Lock-In Amplifier SR510
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{sr510}

@paragraphindent 0
@strong{Description}: Stanford Research (@url{http://www.thinksrs.com/})
lock-in amplifier SR510, single channel, no internal modulation, 4 ADC and
2 DAC ports.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"SR510"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{lockin_name()}
@item @ref{lockin_get_data()}
@item @ref{lockin_get_adc_data()}
@item @ref{lockin_sensitivity()}
@item @ref{lockin_time_constant()}
@item @ref{lockin_phase()}
@item @ref{lockin_ref_freq()}
@item @ref{lockin_dac_voltage()}
@item @ref{lockin_lock_keyboard()}
@end table


@c #############################################################


@node sr530, sr810, sr510, Device Reference
@iftex
@subheading Stanford Research Lock-In Amplifier SR530
@end iftex
@ifnottex
@section Stanford Research Lock-In Amplifier SR530
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{sr530}

@paragraphindent 0
@strong{Description}: Stanford Research (@url{http://www.thinksrs.com/})
lock-in amplifier SR530, two channels, no internal modulation, 4 ADC and
2 DAC ports.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"SR530"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos}, 
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{lockin_name()}
@item @ref{lockin_get_data()}
@item @ref{lockin_get_adc_data()}
@item @ref{lockin_sensitivity()}
@item @ref{lockin_time_constant()}
@item @ref{lockin_phase()}
@item @ref{lockin_ref_freq()}
@item @ref{lockin_dac_voltage()}
@item @ref{lockin_lock_keyboard()}
@end table


@c #############################################################


@node sr810, sr830, sr530, Device Reference
@iftex
@subheading Stanford Research Lock-In Amplifier SR810
@end iftex
@ifnottex
@section Stanford Research Lock-In Amplifier SR810
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{sr810}

@paragraphindent 0
@strong{Description}: Stanford Research (@url{http://www.thinksrs.com/})
lock-in amplifier SR810, one channel, auto acquisition, internal modulation,
4 ADC and 4 DAC ports.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"SR810"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{lockin_name()}
@item @ref{lockin_auto_setup()}
@item @ref{lockin_auto_acquisition()}
@item @ref{lockin_get_data()}
@item @ref{lockin_get_adc_data()}
@item @ref{lockin_dac_voltage()}
@item @ref{lockin_sensitivity()}
@item @ref{lockin_time_constant()}
@item @ref{lockin_phase()}
@item @ref{lockin_ref_freq()}
@item @ref{lockin_harmonic()}
@item @ref{lockin_ref_mode()}
@item @ref{lockin_ref_level()}
@item @ref{lockin_lock_keyboard()}
@end table


@c #############################################################


@node sr830, tds520, sr810, Device Reference
@iftex
@subheading Stanford Research Lock-In Amplifier SR830
@end iftex
@ifnottex
@section Stanford Research Lock-In Amplifier SR830
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{sr830}

@paragraphindent 0
@strong{Description}: Stanford Research (@url{http://www.thinksrs.com/})
lock-in amplifier SR830, two channels, auto acquisition, internal modulation,
4 ADC and 4 DAC ports.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"SR830"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character and set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{lockin_name()}
@item @ref{lockin_auto_setup()}
@item @ref{lockin_auto_acquisition()}
@item @ref{lockin_get_data()}
@item @ref{lockin_get_adc_data()}
@item @ref{lockin_dac_voltage()}
@item @ref{lockin_sensitivity()}
@item @ref{lockin_time_constant()}
@item @ref{lockin_phase()}
@item @ref{lockin_ref_freq()}
@item @ref{lockin_harmonic()}
@item @ref{lockin_ref_mode()}
@item @ref{lockin_ref_level()}
@item @ref{lockin_lock_keyboard()}
@end table


@c #############################################################


@node tds520, tds520a, sr830, Device Reference
@iftex
@subheading Tektronix Digitizing Oscilloscope TDS520
@end iftex
@ifnottex
@section Tektronix Digitizing Oscilloscope TDS520
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{tds520}

@paragraphindent 0
@strong{Description}: Tektronix (@url{http://www.tektronix.com/}) Digitizing
Oscilloscope TDS520, 2 measurement channels, 2 auxiliary channels, 3 math
channels and 4 reference channels.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"TDS520"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} to @code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_area_fast()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_curve_fast()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_get_amplitude_fast()}
@item @ref{digitizer_run()}
@item @ref{digitizer_lock_keyboard()}
@end table


@c #############################################################


@node tds520a, tds520c, tds520, Device Reference
@iftex
@subheading Tektronix Digitizing Oscilloscope TDS520A
@end iftex
@ifnottex
@section Tektronix Digitizing Oscilloscope TDS520A
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{tds520a}

@paragraphindent 0
@strong{Description}: Tektronix (@url{http://www.tektronix.com/}) Digitizing
Oscilloscope TDS520A, 2 measurement channels, 2 auxiliary channels, 3 math
channels and 4 reference channels.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"TDS520A"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} to @code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_area_fast()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_curve_fast()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_get_amplitude_fast()}
@item @ref{digitizer_run()}
@item @ref{digitizer_lock_keyboard()}
@end table


@c #############################################################


@node tds520c, tds540, tds520a, Device Reference
@iftex
@subheading Tektronix Digitizing Oscilloscope TDS520C
@end iftex
@ifnottex
@section Tektronix Digitizing Oscilloscope TDS520C
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{tds520c}

@paragraphindent 0
@strong{Description}: Tektronix (@url{http://www.tektronix.com/}) Digitizing
Oscilloscope TDS520C, 2 measurement channels, 2 auxiliary channels, 3 math
channels and 4 reference channels.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"TDS520C"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} to @code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_area_fast()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_curve_fast()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_get_amplitude_fast()}
@item @ref{digitizer_run()}
@item @ref{digitizer_lock_keyboard()}
@end table


@c #############################################################


@node tds540, tds744a, tds520c, Device Reference
@iftex
@subheading Tektronix Digitizing Oscilloscope TDS540
@end iftex
@ifnottex
@section Tektronix Digitizing Oscilloscope TDS540
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{tds540}

@paragraphindent 0
@strong{Description}: Tektronix (@url{http://www.tektronix.com/}) Digitizing
Oscilloscope TDS540, 4 measurement channels, 1 auxiliary channel (to be used
as trigger input only), 3 math channels and 4 reference channels.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"TDS540"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} to @code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_area_fast()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_curve_fast()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_get_amplitude_fast()}
@item @ref{digitizer_run()}
@item @ref{digitizer_lock_keyboard()}
@end table


@c #############################################################


@node tds744a, tds754a, tds540, Device Reference
@iftex
@subheading Tektronix Digitizing Oscilloscope TDS744A
@end iftex
@ifnottex
@section Tektronix Digitizing Oscilloscope TDS744A
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{tds744a}

@paragraphindent 0
@strong{Description}: Tektronix (@url{http://www.tektronix.com/}) Digitizing
Oscilloscope TDS744A, 4 measurement channels, 1 auxiliary channel (to be used
as trigger input only), 3 math channels and 4 reference channels.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"TDS744A"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{no} and @code{set-bin} to @code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_area_fast()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_curve_fast()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_get_amplitude_fast()}
@item @ref{digitizer_run()}
@item @ref{digitizer_lock_keyboard()}
@end table


@c #############################################################


@node tds754a, tegam2714a_p, tds744a, Device Reference
@iftex
@subheading Tektronix Digitizing Oscilloscope TDS754A
@end iftex
@ifnottex
@section Tektronix Digitizing Oscilloscope TDS754A
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{tds754a}

@paragraphindent 0
@strong{Description}: Tektronix (@url{http://www.tektronix.com/}) Digitizing
Oscilloscope TDS754A, 4 measurement channels, 1 auxiliary channel (to be used
as trigger input only), 3 math channels and 4 reference channels.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file @code{"TDS754A"} as the device name,
use @code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos}
and @code{set-xeos} to @code{no} and @code{set-bin} to @code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{digitizer_name()}
@item @ref{digitizer_define_window()}
@item @ref{digitizer_change_window()}
@item @ref{digitizer_window_position()}
@item @ref{digitizer_window_width()}
@item @ref{digitizer_timebase()}
@item @ref{digitizer_time_per_point()}
@item @ref{digitizer_sensitivity()}
@item @ref{digitizer_num_averages()}
@item @ref{digitizer_record_length()}
@item @ref{digitizer_trigger_position()}
@item digitizer_meas_channel_ok()
@item @ref{digitizer_trigger_channel()}
@item @ref{digitizer_start_acquisition()}
@item @ref{digitizer_get_area()}
@item @ref{digitizer_get_area_fast()}
@item @ref{digitizer_get_curve()}
@item @ref{digitizer_get_curve_fast()}
@item @ref{digitizer_get_amplitude()}
@item @ref{digitizer_get_amplitude_fast()}
@item @ref{digitizer_run()}
@item @ref{digitizer_lock_keyboard()}
@end table


@c #############################################################


@node tegam2714a_p, thurlby330, tds754a, Device Reference
@iftex
@subheading TEGAM 2714A Arbitrary Waveform Generator (as pulser)
@end iftex
@ifnottex
@section TEGAM 2714A Arbitrary Waveform Generator (as pulser)
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{tegam2714a_p}

@paragraphindent 0
@strong{Description}: TEGAM 2714A Arbitrary Waveform Generator (used
as a single pulse channel pulser)

@paragraphindent 0
This device is a waveform generator that, using this module, can be
employed as a single pulse channel pulser.@*
Timebase: between @w{50 ns} and @w{10 s}@*
Trigger mode: external trigger only@*
Pulse levels: adjustable between @w{+/-10.2 V} with a maximum level difference
of @w{5.1 V} (if the difference is below @w{0.5 V} the levels must be within
@w{+/-1 V} and for a difference below @w{50 mV} the levels must be in the
@w{+/-100 mV} range.@*
Maximum pattern length: 131036 times the selected timebase@*
Waveform channel: adjustable betwee 0 and 98, default is 98 (can be changed
via the configuration file for the device)

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"TEGAM2714A"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos},
@code{set-xeos} and @code{set-bin} to @code{yes}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{pulser_name()}
@item @ref{pulser_state()}
@item @ref{pulser_update()}
@item @ref{pulser_shift()}
@item @ref{pulser_increment()}
@item @ref{pulser_reset()}
@item @ref{pulser_pulse_reset()}
@item @ref{pulser_maximum_pattern_length()}
@item @ref{pulser_show_pulses()}
@item @ref{pulser_dump_pulses()}
@end table



@c #############################################################

@node thurlby330, witio_48, tegam2714a_p, Device Reference
@iftex
@subheading Thurlby & Thandar Power Supply PL330DP
@end iftex
@ifnottex
@section Thurlby & Thandar Power Supply PL330DP
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{thurlby330}

@paragraphindent 0
@strong{Description}: Thurlby & Thandar (@url{http://www.tti-test.com/})
Power Supply PL330DP, 3 output channels, voltage range: @w{0 V} to @w{32 V}
with a resolution of @w{10 mV}, current range: @w{0 A} to @w{3 A} with a
resolution of @w{1 mA}.

@paragraphindent 0
@strong{Controlled via}: GPIB bus (IEEE 488).@*
In the GPIB configuration file use @code{"THURLBY330"} as the device name,
@code{'\n'} or @code{0xa} as the EOS character, set @code{set-reos} and
@code{set-xeos} to @code{yes} and @code{set-bin} to @code{no}.

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{powersupply_name()}
@item @ref{powersupply_damping()}
@item @ref{powersupply_channel_state()}
@item @ref{powersupply_voltage()}
@item @ref{powersupply_voltage_limit()}
@item @ref{powersupply_current()}
@item @ref{powersupply_current_limit()}
@end table


@c #############################################################


@node witio_48, ,thurlby330, Device Reference
@iftex
@subheading Wasco WITIO-48 DIO card
@end iftex
@ifnottex
@section Wasco WITIO-48 DIO card
@end ifnottex

@paragraphindent 0
@strong{Module name}: @code{witio_48}

@paragraphindent 0
@strong{Description}: ISA DIO card by Messcomp Datentechnik GmbH
(@url{http://www.messcomp.com/}) with two 24-bit wide DIOs, that can be
split into independent sub-DIOs.

@paragraphindent 0
@strong{Controlled via}: ISA card (required Linux device driver and
library are part of the @code{fsc2} package)

@paragraphindent 0
@strong{Supported functions}:
@table @samp
@item @ref{dio_name()}
@item @ref{dio_reserve_dio()}
@item @ref{dio_mode()}
@item @ref{dio_value()}
@end table
