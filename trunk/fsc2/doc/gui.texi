@c $Id$
@c
@c Copyright (C) 1999-2002 Jens Thoms Toerring
@c
@c This file is part of fsc2.
@c
@c Fsc2 is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License as published by
@c the Free Software Foundation; either version 2, or (at your option)
@c any later version.
@c
@c Fsc2 is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with fsc2; see the file COPYING.  If not, write to
@c the Free Software Foundation, 59 Temple Place - Suite 330,
@c Boston, MA 02111-1307, USA.


@node GUI, EDL, Overview, Top
@chapter GUI

@ifinfo

@menu
* Main Window::         The program's main window
* Experiment Window::   The window to display experimental data
* Tool Box Window::     The tool box window for user input
* Customization::       Customizing the way the GUI looks like
@end menu

@end ifinfo


@node Main Window, Experiment Window, GUI, GUI
@section Main Window

@ifnotinfo

Whenever you start @acronym{fsc2} the first thing you will see is the
following window:

@image{fsc2fig1,11cm,}

The large white area at the top is a browser for displaying the text of
the current @acronym{EDL} program. Below this main browser is another
browser for error messages as well as output from the @acronym{EDL}
program. On the right side of the browsers is a slider that lets you
shift the border between both browsers.

On the left side you have a set of buttons:
@itemize @bullet
@item The @code{Load} button opens a file selector, allowing you to
load a different @acronym{EDL} program.
@item The @code{Reload} button lets you reload the current @acronym{EDL}
program which is needed when you have edited it. 
@item The @code{Edit} button opens an editor with the currently loaded
@acronym{EDL} program. Which editor will be used depends on the
environment variable @code{EDITOR}, if it isn't set @code{vi} is used as
the default.
@item The @code{Test} button lets you check an @acronym{EDL} program 
after it has been loaded. While the test is running the buttons label is
changed to @code{Stop Test} and can be used to abort the test. After the
test finished successfully the label is set back to @code{Test} and the
button becomes inactive until a new program is loaded (or the current
program is reloaded).
@item Using the @code{Start} button you start the execution of the
@acronym{EDL} program. During a short time after the start of the
program (while device initialization is done) the button label is
changed to @code{Stop} to let you abort the experiment. When the
initialization is finished the label reverts back to @code{Start} and
the button remains inactive during the experiment.
@item The @code{Quit} button is used to end @acronym{fsc2}. It can't be
used while an experiment is running.
@item The @code{WWW Server} button lets you start (and stop) a little web
server that allows you to monitor the current state of the experiment
via a browser from a different computer over the net. Per default, the
web server listens for incoming connections on port 8080, so the URL
you have to enter in the browser is
@uref{http://name.of.experiment.computer:8080}. A different port can
be selected via a command line option.
@item Pressing the @code{Help} button will try to start a browser with
the HTML documentation for @acronym{fsc2}. You can select the browser to
be used by setting the environment variable @code{BROWSER} to the name
of your favorite browser (@code{netscape}, @code{mozilla}, @code{opera},
@code{konqueror}, @code{lynx} and @code{w3m} should work without
problems). The default browser is @code{Netscape}.
@item The @code{Bug report} button will open an editor window
where you can compose a mail with a bug report. The editor that will be
used for writing the mail depends on the environment variable
@code{EDITOR}, if it isn't set @code{vi} is used as the default. When
you're finished writing the mail @acronym{fsc2} will let you decide if
you really want to send the bug report.
@end itemize

@end ifnotinfo

@ifinfo
@ifnothtml

The first window you see when you start @acronym{fsc2} contains the
following elements:
@itemize @bullet
@item At the top the browser for displaying the @acronym{EDL} file to be run
@item Below this another browser where error messages as well as output
from the @acronym{EDL} program will be displayed.
@item On the right side of the browsers is a slider that lets you move
the border between both browsers.
@item The @code{Load} button - when you click onto it a file selector
is shown, allowing you to load a different @acronym{EDL} program.
@item The @code{Reload} button - when you have edited the currently
loaded @acronym{EDL} program you have to click onto this button to
make @acronym{fsc2} load the changed file.
@item The @code{Edit} button - when you click onto it an editor will
open up with the currently loaded @acronym{EDL} program. Which
editor will be used depends on the environment variable @code{EDITOR},
if it isn't set @code{vi} is used as the default editor.
@item The @code{Test} button lets you check an @acronym{EDL} program 
after it has been loaded. While the test is running the buttons label is
changed to @code{Stop Test} and can be used to abort the test. After the
test finished successfully the button becomes inactive until a new
program is loaded (or the current program is reloaded).
@item Using the @code{Start} button you start execution of the
@acronym{EDL} program, i.e.@: you start the measurement.
@item The @code{Quit} button is for leaving @acronym{fsc2}.
@item The @code{WWW Server} button lets you start (and stop) a little web
server that allows you to monitor the current state of the experiment
via a browser from a different computer over the net. Per default, the
web server listens for incoming connections on port 8080, so the URL
you have to enter in the browser is
@uref{http://name.of.experiment.computer:8080}. A different port can
be selected via a command line option.
@item Pressing the @code{Help} button will start try to start a browser
with the HTML documentation for @acronym{fsc2}. You can select the
browser to use by setting the environment variable @code{BROWSER} to the
name of your favorite browser (netscape, mozilla, opera, konqueror, lynx
and w3m should work without problems). The default browser is Netscape.
@item Finally, the @code{Bug report} button will open an editor window
where you can compose a bug report. When you're finished writing the
mail @acronym{fsc2} will let you decide if you really want to mail the
bug report. The editor that will be used for writing the mail depends on
the environment variable @code{EDITOR}, if it isn't set @code{vi} is
used as the default.
@end itemize

@end ifnothtml
@end ifinfo

In each button one of the characters of the label is underlined. By
pressing the key for this letter each button can be triggered via the
keyboard - but note that, if the underlined letter is an uppercase
character, you have to enter the uppercase character from the keyboard!

During the test @acronym{fsc2} may detect problems with the
@acronym{EDL} program or even errors. It then will print messages in the
lower browser. There are four categories of messages: normal messages,
warnings, warnings for severe problems and fatal error messages. Normal
messages, not indicating a problem, are printed in black. Warnings are
printed in green, messages for severe problems in blue and messages for
fatal errors in red (in the latter case the test is also aborted
immediately).

To start the experiment click onto the @code{Start} button. If the
program hasn't been tested a test will be run now and, if the test
succeeds, the experiment is started. While the devices are initialized
the text of the @code{Start} button changes to @code{Stop} and clicking
on the button lets you interrupt at the device initialization stage.
When the device initialization is finished a new window, to be described
in the next section, opens up for displaying the measured data.


@ifnotinfo
The next figure shows you the main window of @acronym{fsc2} with an
@acronym{EDL} program loaded (the name of the loaded program is shown in
the widow title) and the test already been done. The program has written
out some text already during the test, thus some lines are shown in the
output browser.

@image{fsc2fig2,11cm,}

@end ifnotinfo


@node Experiment Window, Tool Box Window, Main Window, GUI
@section Experiment Window

When an experiment is started another window will pop up. It is up to
the writer of the @acronym{EDL} program to choose if the window will be
used for displaying just curves or color-coded surfaces, see the
functions @code{init_1d()} and @code{init_2d()} in one of the later
chapters. The first type of display is well suited for showing the
results of typical cw-measured EPR data or traces fetched from
digitizers, while the second type is for useful for visualizing
2-dimensional experiments, i.e.@: all experiments where more than one
parameter is changed during the experiment.


@anchor{1D-Display}
@subsection 1D-Display
@cindex 1D-Display

@ifnotinfo
Here's a typical example of the kind of display you may get while doing
an experiment:

@image{fsc2fig3,11cm,}

The most prominent feature is the area for displaying the measured
data. In this case two different curves are displayed simultaneously
(but you can have up to four). They show data from the x- and y-channel
of a lock-in amplifier while recording a cw-EPR experiment - obviously
the lock-in's phase setting isn't optimal yet.

Below and to the left of this main display area are two areas showing
the x- and y-scales. The fact that the lines in both the axis areas are
drawn in red indicate that the scales are valid for the first (red) curve.

@end ifnotinfo
@ifnothtml
@ifnottex
The most prominent feature of the new window that gets opened when the
experiment is started is an area for displaying the measured data. In
this area you may display up to four different curves simultaneously.
The display area is surrounded by two areas with the x- and the
y-scale. The color of the scale is identical to the color of one the
curves, indicating for which of the curves the scale is valid.
@end ifnottex
@end ifnothtml

The topmost buttons on the left side
@ifnotinfo
(which both are switched on)
@end ifnotinfo
let you decide which of the curves will be included in rescaling operations
- this way you can rescale curves individually to account for e.g.@:
different sensitivity settings.

The two buttons below, labeled @code{Undo} and @code{Print} allow you to
undo the last rescaling operation or to send a snapshot of the current
results to a printer (or, alternatively, write it to a file).

The @code{Stop} button lets you abort the currently running experiment -
when the experiment is finished its label changes to
@code{Close}. Finally, the button labeled @code{FS} is the "Full scale"
button. While this button is active the display is resized automatically
so that all data fit into the display area.


@subsubsection Examining data

If you want to find out the exact values of your newly measured data
during the experiment you have to move the mouse into the display area
onto the point you're interested in. Now press both the left and the
right mouse button simultaneously (or first the left one, then the
middle one while keeping the left button pressed down). The cursor
changes to a cross-hair
@ifnotinfo
cursor, @image{cursor4,5mm,},
@end ifnotinfo
@ifnothtml
@ifnottex
cursor
@end ifnottex
@end ifnothtml
and in the upper left hand corner pairs of values with the exact
coordinates (in the units of the axis scales) of the current mouse
position are shown. Because different curves can have a different
scaling (see below) the coordinates in the current scaling system of
each of the curves are shown (in the color of the curve they belong to)
if more than one curve is displayed.

Beside finding out the exact values of your measured data you also may
determine differences between data points, e.g.@: to measure line widths
or signal intensities. If you press both the left and the right mouse
button simultaneously the cursor changes to an encircled cross-hair
@ifnotinfo
cursor, @image{cursor5,5mm,},
@end ifnotinfo
@ifnothtml
@ifnottex
cursor
@end ifnottex
@end ifnothtml
and a circle is drawn at the position where you pressed the mouse
button.  When you move the mouse (while keeping both middle and right
mouse buttons pressed down) a vertical and a horizontal dashed line
connecting the starting point to the current mouse position is drawn and
in the left upper corner of the display area pairs of x- and
y-differences (in units of the axis scales) between the two points are
shown (and updated whenever you move the mouse). Again, for each curve a
pair of values is displayed in the color of the curve they belong to.


@subsubsection Rescaling and moving


To zoom into the data displayed in the window click the left mouse
button in the area where the data are displayed. If you do so the normal
mouse pointer changes to a
@ifnotinfo
symbol, @image{cursor1,5mm,},
@end ifnotinfo
@ifnothtml
@ifnottex
symbol
@end ifnottex
@end ifnothtml
indicating that you're in zoom mode. If you now move the mouse while
keeping the left mouse button pressed down a dashed rectangular box is
drawn from the position where the mouse button was first pressed to the
current mouse position. When the left mouse button is released the
display is rescaled so that the area of this box is magnified to fill
the whole display area.

You can also use this method in the areas of the axis. Also here a small
box is shown, indicating the section that will be magnified. If you do so
in the area of the x-axis only the x-scaling is changed, while when done
in the y-axis area only a magnification in y-direction happens.

You can also shift the curves around on the screen. When you press the
middle mouse button somewhere in the display area the cursor changes to a
@ifnotinfo
hand, @image{cursor2,5mm,}.
@end ifnotinfo
@ifnothtml
@ifnottex
hand.
@end ifnottex
@end ifnothtml
As long as you keep the middle mouse button pressed down the displayed
curves will move around following the mouse. As in the case of zooming
you can restrict movements to either the x- or y-direction by pressing
the middle mouse button in the area of either the x- or the y-axis.

Alternatively, if you have a wheel mouse and you turn the wheel within
the x- or y-axis areas the data will be moved around on the screen in
either the x- or the y-direction in increments of a thenth of the total
axis length.


Finally, there's a third method to change the scaling. Whenever you
press the right mouse button in either the display area or the axis
fields the cursor changes to a magnifying
@ifnotinfo
glass, @image{cursor3,5mm,}.
@end ifnotinfo
@ifnothtml
@ifnottex
glass.
@end ifnottex
@end ifnothtml
When you move the mouse nothing happens at first and only when you
release the mouse button the display scaling gets either magnified or
de-magnified. This follows some simple rules: The point where you first
pressed the right mouse button will stay at exactly the same
position. If you move the mouse up, the display will be de-magnified in
y-direction only, if you move the mouse down, the y-scale factor becomes
larger, i.e.@: you do a zoom in y-direction. By moving the mouse to the
right you can reduce the x-scale, by moving it to the left you increase
it.  If you do this operation in the areas of either the x- or y-axis
only the corresponding scaling gets changed. The factor by which the
scaling changes depends on how far away from the starting point the
mouse was moved before releasing the left button. If you move the mouse
along the whole length of the display area the scaling is changed by a
factor of 4.

You don't have to change the scalings or positions of all the curves at
once - this is what the buttons with the numbers in the colors of the
curves are to be used for. Rescaling or moving will only apply to curves
for which the corresponding button is active, i.e.@: pressed down (if
not activated the buttons are drawn with a grey background instead of
the color of the curve they are associated with). By de-activating one
or more of the buttons you can exempt the corresponding curves from
being rescaled or shifted.

This leads to a minor problem: If you de-activate some of the buttons
and rescale or shift, the question is for which of the curves the
scaling drawn in the axis areas is valid now. That is the reason why the
horizontal line of the x-axis and the vertical line of the y-axis is not
black but colored: When these lines are red the displayed axis scales
are valid for (at least) the red curve, if they are green they are valid
for (at least) the green curve, etc. As a rule the axis scale is always
valid for the lowest numbered curve for which its button is
activated. That's also the reason why, when examining data (using either
the middle or right button together with the left button), not just one
pair of values is displayed but as many pairs as there are curves -- the
scaling for each of the curves may be different

Finally, when you zoom in display parts of a curve or even complete
curves will not fit into the display area anymore. To indicate into
which direction you have to look for the missing parts of the curve an
arrow in the color of the curve will be shown for each direction in
which non-displayable data of the curve can be found.

Whenever you rescale curves or move them around the "Full Scale" button,
labeled @code{FS}, will become in-active (its color changes from green
to gray). When you want to get back to the full scale display you simply
have to click onto it and all curves (even the ones that currently are
exempted from rescaling because their buttons is in-active) are
rescaled so that all data will fit again into the display. A side effect
of having the @code{FS} button active is that the display will be
rescaled automatically when new data are measured that wouldn't fit into
the display area. To switch this behavior off simply deactivate the
@code{FS} button.


@anchor{2D-Display}
@subsection 2D-Display
@cindex 2D-Display

@ifnotinfo
When doing an 2D-experiment, e.g.@: when recording time traces after a
laser flash at different magnetic field positions, the display probably
will look similar to this:

@image{fsc2fig4,11cm,}

@end ifnotinfo

Because it would take too long to do a real 3-dimensional display the
data values are displayed using a color code, where blue stands for the
lowest and red for the highest values. To show which color represents a
certain value on the right hand side another axis area for the z-axis is
drawn. The color bar in this axis area indicates the exact scaling.

In 2D-display mode only one curve can be displayed at once. Thus the
buttons for the different curves have a different meaning from the one
in 1D-displays. Here they are used for switching between the different
curves, i.e.@: only one of the buttons can be active at any time and
will indicate which curve is currently shown. Each of the curves has each
own scaling.

As long as there are no measured data for some of the points of the
display these points will be drawn in a dark gray.

In 2D-display mode the same combinations of mouse buttons (or the mouse
wheel) can be used to determine the values of data points and
differences between points as in 1D-display mode with the only exception
that now triples of numbers are shown for the x-, y- and z-value.

When the surface with the data set is moved out of the area of the
display arrows will be shown at the sides of the display area where you
have to look for the data set.


@subsubsection Rescaling and moving

All the methods for rescaling and moving are the same as in 1D-display
mode. Additionally, you also can change the z-scaling. This will result
in a change of the colors used for displaying the data. When changing
the z-scaling it may happen that some of the data points can't be
displayed with the available colors anymore. In this case data values
larger than the maximum value of the z-axis will be drawn in white, and
data that are too small are shown in black.

@ifnotinfo
Here is an example of how the display may look like after z-rescaling. A
lot of the values are too small to be drawn using the values shown on
the z-scale and are thus drawn in black while the maximum values at the
top of the high-field signal are too large and thus drawn in white.

@image{fsc2fig5,11cm,}

@end ifnotinfo


@subsection Getting cross sections

Quite often one needs to examine cross sections through a 2D-data
set. This can done by holding down the @code{<Shift>} key and clicking
with the left mouse button into either the x- or y-axis area at the
position you want the cross section of. When you release the left mouse
button a new window pops up showing the cross section (please keep the
@code{<Shift>} key pressed down until this new window is shown). While
the left mouse button is pressed down the cursor is changed to a
vertical or horizontal
@ifnotinfo
arrow, i.e.@: either @image{cursor6,5mm,} or @image{cursor7,5mm,}
.
@end ifnotinfo
@ifnothtml
@ifnottex
arrow.
@end ifnottex
@end ifnothtml

Even though the new window with the cross section through the data set
only shows an 1D-curve it also has a z-axis. On this axis a red
indicator shows the value for which the cross section either x- or
y-direction was taken.
@ifnotinfo

@image{fsc2fig6,11cm,}

@end ifnotinfo
This z-axis area in the cross section window can also be used to select
a cross section at a different position. When you press the left mouse
button in the z-axis area the cursor changes to an arrow pointing to the
left
@ifnotinfo
, @image{cursor8,5mm,},
@end ifnotinfo
and if you move the mouse (while keeping the left mouse button still
pressed down) new cross sections are displayed in accordance with the
current mouse position (and the indicator gets redrawn at the position
of the current cross section). If you want to run through all cross
sections sequentially you can also use the up- and down-cursor keys or
the wheel of a wheel mouse. To get to the first cross section (i.e.@:
the one at the lower end of the z-scale) press the @code{<Page down>}
key, to get to the last one press the @code{<Page up>} key.


Of course, getting data values and differences between data as well as
zooming and moving the curve around on the screen works in the same way
as for normal 1D-displays.


Finally, occasionally you might want to switch from a cross section
through the data set in x-direction to one in y-direction or vice
versa. To do so start of as you would do when determining data values,
i.e.@: by pressing both the left and the middle mouse button. Move the
mouse to the new position where you want the cross section in the other
direction. Now hit the @code{Space} bar and the cross section in the
other direction is drawn.


@node Tool Box Window, Customization, Experiment Window, GUI
@section Tool Box Window

Sometimes it is necessary to adjust certain values while a measurement
is running. Usually, this is the case when one is trying to determine
optimum parameters for an experiment. Therefore, it is possible to write
an @code{EDL} program that creates several different kinds of objects
allowing user input during the experiment. All these elements appear in
a separate window, the tool box.

Please note, that @acronym{fsc2} usually will not be able to do a real
thorough test before the experiment is started when the tool box is
used. In this case the flow of control is often controlled by user input
which can not be predicted. Therefore, @acronym{fsc2} has no possibility
to determine which parts of the @acronym{EDL} will be run at what time
and if data to be send to devices will be correct. For these reasons
it is probably better not to use a tool box when running important
experiments, or only a tool box to display (but not change) relevant
data.

@ifnotinfo
The next figure shows all types of objects that can be created.

@image{fsc2fig7,4cm,}

@end ifnotinfo
@ifinfo
@ifnothtml
A tool box may contain the following types of objects:
@end ifnothtml
@end ifinfo

First there are the normal buttons. A normal button can be clicked on to
and the @acronym{EDL} program can determine how often the button has
been pressed. The second type of objects are push buttons, i.e.@:
buttons that can be in two states, either pressed or released.  The
third type of objects, radio buttons, always come in groups and only
exactly one of a group of radio buttons can be in the active state at
any moment.

The next set of objects are sliders to adjust numerical values in a
predefined range. There are two types of sliders, normal sliders and
value sliders. The only difference between these is that value sliders
have an additional field displaying a number that indicates the value
the slider is currently set to.

Beside sliders also in- and output objects can be used to set numerical
values. Input objects are boxes into which the user can enter numbers,
while output objects are used to display numerical values. Both object
types come in two variants, one that allows the input or display of
integer values only and one for floating point numbers.

Finally, there are popup-menu buttons. If clicked on a menu with two or
more items to select pops up and allows the user to chose one of several
alternatives.


@node Customization, , Tool Box Window, GUI
@section Customization

Several aspects of the way @acronym{fsc2}s GUI looks like can be
customized. On the one hand, this can be done by starting @acronym{fsc2}
with the appropriate command line flags (@pxref{Command Line Options}).
In order not to have to list a long line of command line options each
time @acronym{fsc2} is started the required settings can also be made
permanent by adding them to the file @file{.Xdefaults} in the users
home directory (please note that the name of the file starts with a dot,
the dot keeps it from being listed with the normal @code{ls} command,
use @code{ls -a} to make @code{ls} also list files starting with a dot).

All entries in the @file{.Xdefaults} file start with @code{fsc2.}  or
@code{fsc2*}, followed by the option to set, a colon and the value of
the option. Here's and example:
@example
fsc2.geometry:         800x600+200+200
fsc2*buttonFontSize:   12
@end example
@noindent
After having edited @file{.Xdefaults} the new settings will not be used
immediately but only after either logging out and in again or executing
the command
@example
xrdb -load $HOME/.Xdefaults
@end example

Now follows a list of all options that can be set via the
@file{.Xdefaults} file:
@table @samp
@item geometry
Sets the size and position of the main window of @acronym{fsc2}. The
size and position have to be specified in the form
@i{width}@code{x}@i{height}@code{+}@i{x}@code{+}@i{y}. Both the size
(i.e.@: @i{width}@code{x}@i{height}) or the position (i.e.@:
@code{+}@i{x}@code{+}@i{y}) can be given alone.

@item displayGeometry
Sets the size and position of the display window, where size and position
have to be specified as above.

@item cutGeometry
Sets the size and position of the window showing a cut through a surface
(only relevant for 2D display).

@item toolGeometry
Sets the position of the toolbox window  - the size can't be
specified. The position must be specifying in the form
@code{+}@i{x}@code{+}@i{y}.

@item size
There are two versions for the windows, one for low resolution and one
for high resolution displays. Without specifying a preferred size the
program picks the one it guesses to be the correct one. By setting
@code{size} t @code{Small}, @code{small}, @code{S} or @code{s} you
manually select the low resolution version, while with @code{Large},
@code{large}, @code{L} or @code{l} the high resolution version is
chosen.

@item browserFontSize
Selects the font size (in pixels) to be used for browser.

@item buttonFontSize
Selects the font size to be used for buttons.

@item inputFontSize
Selects the font size to be used for input (and output) objects (in the
toolbox window).

@item sliderFontSize
Selects the font size to be used for sliders (in the toolbox window).

@item helpFontSize
Selects the font size to be used for the popup help texts.

@item fileselectorFontsize
Selects the font size to be used for the file selector.

@item axisFont
Selects the font to be used to draw the axes in the display window.

@item stopMouseButton
Specifies the mouse button that must be used to activate the @code{Stop}
button to stop a running experiment. This can be set to @code{1},
@code{2} or @code{3} or, alternatively, to @code{left}, @code{middle} or
@code{right}.

@item noCrashMail
This can be set to keep the program from sending an email to the author
when it crashes. Set this to @code{True} and no mails are send.

@item noBalloons
This options can be used to switch off the display of help texts when
the mouse is hovering over a button for some time. If you're fed up with
this texts popping up simply set it to @code{True}.

@end table
