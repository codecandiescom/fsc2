/*
  $Id$

  Copyright (C) 1999-2006 Jens Thoms Toerring

  This file is part of fsc2.

  Fsc2 is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2, or (at your option)
  any later version.

  Fsc2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with fsc2; see the file COPYING.  If not, write to
  the Free Software Foundation, 59 Temple Place - Suite 330,
  Boston, MA 02111-1307, USA.
*/


/********************************************************************/
/* List of all non-builtin functions that can be used in EDL files  */
/*                                                                  */
/* Syntax:                                                          */
/*                                                                  */
/*               name, num_args [ , access ] ;                      */
/*                                                                  */
/* where `name' is the name of the function and `num_args' is the   */
/* number of arguments - use a negative number for functions with   */
/* variable number of arguments. The optional parameter `access'    */
/* is the access flag, where ALL means that it can be used in all   */
/* sections of an EDL file while EXP says that the function can     */
/* be used only in the EXPERIMENTS section, e.g. when it is a       */
/* function that accesses a device. The default is EXP. Finally,    */
/* PREP says that the function may only be used in the PREPARATION  */
/* section (and thus will never really talk with the device).       */
/*                                                                  */
/********************************************************************/

/* Function exported by the User_Functions modules */

get_phase_cycled_area, -1, EXP;


/* Functions exported by the magnet power supply drivers */

magnet_name, 0, ALL;            // returns the device name
magnet_setup, 2, ALL;           // set start field and sweep step size
magnet_fast_init, 0, ALL;       // shortens magnet setup time (X,S)
set_field, -1, EXP;             // go to to a field value
get_field, 0, EXP;              // returns the current field 
reset_field, 0, EXP;            // go back to start field


/* Functions supported by the Steinhoff magnets (hjs_sfc, hjs_fc) only */

magnet_B0, -1, ALL;
magnet_slope, -1, ALL;
magnet_calibration_file, -1, PREP;

/* Functions not supported by the Oxford IPS20-4 sweep power supply driver */

sweep_up, 0, EXP;               // sweep magnet up
sweep_down, 0, EXP;             // sweep magnet down


/* Functions for the W-band power supply (Keithley 228A) driver only */

magnet_use_correction, -1, ALL; // if called field corrections are applied
magnet_use_dac_port, 1, PREP;   // to set the lock-ins DAC port to be used


/* Functions for the Oxford IPS20-4 sweep power supply driver only */

magnet_sweep, -1, EXP;              // starts or stops a sweep
magnet_sweep_rate, -1, ALL;         // set or query a sweep rate


/* Functions in Oxford IPS20-4 and S-Band power supply drivers */

magnet_goto_field_on_end, 1, ALL;   // keep sweeping after end of experiment


/* Functions in Oxford IPS20-4 and Keithley 228A power supply drivers */

magnet_command, 1, EXP;


/* Functions exported by the field meter drivers (BH15, ER035M, PT2025 ) */

gaussmeter_name, 0, ALL;        // returns the device name
gaussmeter_field, 0, EXP;       // returns current field
find_field, 0, EXP;             // return current field value
gaussmeter_resolution, -1, ALL; // returns resolution of field meter
gaussmeter_wait, 0, EXP;        // wait for field to stabilize

measure_field, 0, EXP;          // return field value (ER035M_SA, ER035M_SAS
								// and PT2025)
gaussmeter_probe_orientation, -1, ALL;
gaussmeter_command, 1, EXP;
gaussmeter_upper_search_limit, -1, EXP;  // er035m family only
gaussmeter_lower_search_limit, -1, EXP;  // er035m family only


/* Functions exported by the pulser drivers (DG2020, HFS9000, EP385, RS690)
   (functions involving phases and keyboard for DG2020 and RS690 only) */

pulser_name, 0, ALL;            // returns the device name
pulser_state, -1, ALL;          // switches pulser on/off
pulser_channel_state, -1, ALL;  // switches pulser channel on/off
pulser_update, 0, EXP;          // commits changes
pulser_shift, -1, EXP;          // shift pulse positions
pulser_increment, -1, EXP;      // change pulse lengths
pulser_reset, 0, EXP;           // reset pulses and phases
pulser_pulse_reset, -1, EXP;    // set back pulses to initial state
pulser_next_phase, -1, EXP;     // switch to next phase in phase cycling
pulser_phase_reset, -1, EXP;    // switch back to first phase
pulser_lock_keyboard, -1, EXP;  // lock or unlock the keyboard
pulser_stop_on_update, 1, ALL;  // sets stop during updates (HFS9000 only)

pulser_shape_to_defense_minimum_distance, 1, PREP;
pulser_defense_to_shape_minimum_distance, 1, PREP;
pulser_minimum_twt_pulse_distance, -1, ALL;
pulser_show_pulses, 0, PREP;
pulser_dump_pulses, 0, PREP;
pulser_automatic_shape_pulses, -1, PREP;
pulser_automatic_twt_pulses, -1, PREP;
pulser_command, 1, EXP;
pulser_pulse_minimum_specs, 1, EXP;        // rb_pulser only!

/* Functions exported by DG2020 and HFS9000 only */

pulser_keep_all_pulses, 0, PREP;
pulser_maximum_pattern_length, 1, PREP;

/* Functions exported by the Frankfurt version of DG2020 only */

pulser_phase_switch_delay, 2, PREP;
pulser_grace_period, 1, PREP;


/* Functions exported by the lock-in amplifier drivers
   (Stanford Research 510, 530, 810, 830, and Bruker ER023M signal channel) */

lockin_name, 0, ALL;            // returns the device name
lockin_get_data, -1, EXP;       // returns the lock-in voltage 
lockin_get_adc_data, 1, EXP;    // returns a ADC voltage
lockin_dac_voltage, -1, ALL;    // gets or sets DAC voltage
lockin_sensitivity, -1, ALL;    // gets or sets the sensitivity
lockin_time_constant, -1, ALL;  // gets or sets the time constant
lockin_phase, -1, ALL;          // gets or sets the phase
lockin_ref_freq, -1, ALL;       // Get/set mod. frequency (SR8x0, ER023M)
lockin_ref_mode, 0, EXP;        // Get mod. mode (SR8x0, ER023M)
lockin_ref_level, -1, EXP;      // Get/set mod. level (SR8x0 only)
lockin_harmonic, -1, EXP;       // Get/set harmonic (SR8x0, ER023M)
lockin_lock_keyboard, -1, EXP;  // Lock or unlock the keyboard (SRxy0)
lockin_command, 1, EXP;

lockin_auto_setup, -1, ALL;        // (SR830)
lockin_get_sample_time, 0, EXP;    // (SR830)
lockin_auto_acquisition, -1, EXP;  // (SR830)

lockin_is_overload, 0, EXP;     // (ER023M)
lockin_offset, -1, ALL;         // (ER023M)
lockin_conversion_time, -1, ALL;// (ER023M)
lockin_resonator, -1, ALL;      // (ER023M)
lockin_rg, -1, ALL;             // (ER023M)
lockin_tc, -1, ALL;             // (ER023M)
lockin_ma, -1, ALL;             // (ER023M)
lockin_ct, -1, ALL;             // (ER023M)
lockin_mf, -1, ALL;             // (ER023M)


/* Functions exported by the digitizer
   (TDS520, TDS520A, TDS520C, TDS540, TDS744A, TDS754A, LeCroy 9400 ) */

digitizer_name, 0, ALL;                 // returns the device name
digitizer_define_window, -1, ALL;       // defines a cursor window
digitizer_change_window, -1, ALL;       // change an existing window
digitizer_window_position, -1, ALL;     // set or get window position
digitizer_window_width, -1, ALL;        // set or get window width
digitizer_display_channel, -1, PREP;    //
digitizer_timebase, -1, ALL;            // set or get the time base
digitizer_interleave_mode, -1, ALL;     // set or get SS/RIS mode
digitizer_time_per_point, 0, EXP;       // returns time per point
digitizer_sensitivity, -1, ALL;         // set or get the sensitivity
digitizer_num_averages, -1, ALL;        // set or get number of averages
digitizer_trigger_channel, -1, ALL;     // set or get trigger channel
digitizer_trigger_level, -1, ALL;       // set or get trigger level
digitizer_trigger_slope, -1, ALL;       // set or get trigger slope
digitizer_trigger_coupling, -1, ALL;    // set or get trigger coupling
digitizer_trigger_mode, -1, ALL;        // set or get trigger mode
digitizer_record_length, -1, ALL;       // set or get record_length
digitizer_trigger_position, -1, ALL;    // set or get trigger position (deprec)
digitizer_trigger_delay, -1, ALL;       // set pre/post trigger position
digitizer_start_acquisition, 0, EXP;
digitizer_get_area, -1, EXP;
digitizer_get_area_fast, -1, EXP;
digitizer_get_curve, -1, EXP;
digitizer_get_curve_fast, -1, EXP;
digitizer_get_amplitude, -1, EXP;
digitizer_get_amplitude_fast, -1, EXP;
digitizer_run, 0, EXP;
digitizer_lock_keyboard, -1, EXP;       // Lock/unlock keyboard (TDSxxx only)
digitizer_copy_curve, 2, EXP;
digitizer_command, 1, EXP;

digitizer_meas_channel_ok, -2, ALL;     // only for internal use !

digitizer_averaging, -1, ALL;           // LeCroy9400 only


/* Functions exported by the RF synthesizers (HP8647A, HP8648A, HP8672A,
											  R&S SML01) */

synthesizer_name, 0, ALL;             // returns the device name
synthesizer_state, -1, ALL;           // set/get state (ON/OFF)
synthesizer_frequency, -1, ALL;       // set/get frequency
synthesizer_attenuation, -1, ALL;     // set/get attenuation
synthesizer_minimum_attenuation, -1, ALL;     // set/get minimum attenuation
synthesizer_step_frequency, -1, ALL;  // set/get sweep step frequency
synthesizer_sweep_up, 0, EXP;         // sweep up
synthesizer_sweep_down, 0, EXP;       // sweep down
synthesizer_reset_frequency, 0, EXP;  // go back to start frequency
synthesizer_use_table, -1, PREP;      // set attenuation-table to use in sweeps
synthesizer_att_ref_freq, -1, ALL;    // set frequency the attention setting
                                      // refers to
synthesizer_modulation, -1, ALL;
synthesizer_mod_type, -1, ALL;
synthesizer_mod_source, -1, ALL;
synthesizer_mod_ampl, -1, ALL;
synthesizer_mod_freq, -1, ALL;         // R&S SML01 only
synthesizer_command, 1, EXP;

synthesizer_pulse_state, -1, ALL;          // R&S SML01 with SML-B3 only
synthesizer_pulse_trigger_slope, -1, ALL;  // R&S SML01 with SML-B3 only
synthesizer_pulse_width, -1, ALL;          // R&S SML01 with SML-B3 only
synthesizer_pulse_delay, -1, ALL;          // R&S SML01 with SML-B3 only


/* Functions exported by the boxcar (EGG4402) */

boxcar_name, 0, ALL;
boxcar_curve_length, -1, EXP;
boxcar_get_curve, -1, EXP;
boxcar_start_acquisition, 0, EXP;
boxcar_stop_acquisition, 0, EXP;
boxcar_single_shot, -1, EXP;
boxcar_command, 1, EXP;

/* Functions exported by the voltmeter (Kontron 4060) */

voltmeter_name, 0, ALL;
voltmeter_get_data, 0, EXP;
voltmeter_ac_measurement, 0, EXP;
voltmeter_dc_measurement, 0, EXP;
voltmeter_command, 1, EXP;


/* Functions exported by the temperature controller (Lakeshore 330) */

temp_contr_name, 0, ALL;
temp_contr_lock_keyboard, -1, EXP;
temp_contr_temperature, 0, EXP;
temp_contr_sensor_unit, -1, EXP;
temp_contr_sample_channel, -1, EXP;
temp_contr_command, 1, EXP;


/* Functions exported by the frequency counter (HP5340A) */

freq_counter_name, 0, ALL;
freq_counter_measure, 0, EXP;
freq_counter_command, 1, EXP;


/* Functions exported by DAQ cards and devices (PCI-MIO-16E-1, ME-6000,
   ME-6100, home build DA and ADC from Heinz-Juergen Steinhoffs group
   and Rulbus RB8509  12-bit ADC) */

daq_name, 0, ALL;
daq_reserve_dac, -1, ALL;
daq_reserve_adc, -1, ALL;
daq_set_voltage, -1, ALL;
daq_get_voltage, -1, ALL;
daq_dac_parameter, -1, ALL;
daq_ao_channel_setup, -1, EXP;

daq_ai_channel_setup, -1, EXP;
daq_ai_acq_setup, -1, EXP;
daq_ai_start_acquisition, 0, EXP;
daq_ai_get_curve, 0, EXP;

daq_start_continuous_counter, -1, EXP;
daq_start_timed_counter, -1, EXP;
daq_timed_count, -1, EXP;
daq_intermediate_count, 1, EXP;
daq_final_count, 1, EXP;
daq_stop_counter, 1, EXP;
daq_single_pulse, 2, EXP;
daq_continuous_pulses, -1, EXP;

daq_reserve_dio, -1, ALL;
daq_dio_read, 1, EXP;
daq_dio_write, -1, EXP;

daq_reserve_freq_out, -1, ALL;
daq_freq_out, -1, EXP;
daq_trigger_setup, -1, EXP;

daq_trigger_mode, -1, ALL;              // RB8905 only
daq_gain, -1, ALL;                      // RB8905 only

/* Functions exported by event counters (NatInst 6601) */

counter_name, 0, ALL;
counter_start_continuous_counter, -1, EXP;
counter_start_timed_counter, -1, EXP;
counter_start_buffered_counter, -1, EXP;
counter_get_buffered_counts, -1, EXP;
counter_timed_count, -1, EXP;
counter_intermediate_count, 1, EXP;
counter_final_count, 1, EXP;
counter_stop_counter, 1, EXP;
counter_single_pulse, 2, EXP;
counter_continuous_pulses, -1, EXP;
counter_dio_read, -1, EXP;
counter_dio_write, -1, EXP;


/* Functions exported by CCD camera modules (Spec-10) */

ccd_camera_name, 0, ALL;
ccd_camera_roi, -1, ALL;
ccd_camera_binning, -1, ALL;
ccd_camera_binning_method, -1, ALL;
ccd_camera_exposure_time, -1, EXP;
ccd_camera_clear_cycles, -1, EXP;
ccd_camera_get_image, 0, EXP;
ccd_camera_get_spectrum, 0, EXP;
ccd_camera_temperature, -1, EXP;
ccd_camera_pixel_size, 0, ALL;
ccd_camera_pixel_area, 0, ALL;


/* Functions exported by monochromators (Acton SpectaPro-300i, SPEX-CD2A) */

monochromator_name, 0, ALL;		          // returns the device name
monochromator_turret, -1, EXP;            // set/query current turret
monochromator_grating, -1, EXP;           // set/query current grating
monochromator_wavelength, -1, ALL;        // set/query wavelength
monochromator_wavenumber, -1, ALL;        // set/query wavenumber
monochromator_install_grating, 2, EXP;    // install new grating
monochromator_groove_density, -1, EXP;    // get groove density of grating
monochromator_wavelength_axis, -1, EXP;   // caclulate wavelength axis
monochromator_wavenumber_axis, -1, EXP;   // caclulate wavenumber axis
monochromator_calc_wavelength, -1, EXP;   // calculate wavelength from pixel
monochromator_set_calibration, -1, EXP;   // manually set calibration
monochromator_load_calibration, -1, EXP;  // read in calibration file
monochromator_zero_offset, -1, EXP;
monochromator_grating_adjust, -1, EXP;
monochromator_calibrate, -1, EXP;
monochromator_scan_setup, -1, ALL;
monochromator_start_scan, 0, EXP;
monochromator_scan_step, 0, EXP;
monochromator_laser_line, -1, EXP;
monochromator_shutter_limits, -1, ALL;


/* Functions exported by the power supply (Thurlby&Thandar PL330DP,
                                           F.u.G. MCN700-2000) */

powersupply_name, 0, ALL;			   // returns the device name
powersupply_damping, 2, EXP;		   // sets damping of output to on/off
powersupply_channel_state, 2, EXP;	   // switches power supply channel on/off
powersupply_voltage, -1, EXP;          // set/get channel voltage
powersupply_voltage_limit, -1, EXP;    // set/get channel voltage limit
powersupply_current, -1, EXP;          // set/set channeloutput current
powersupply_current_limit, -1, EXP;	   // get/set channelcurrent limit
powersupply_command, 1, EXP;


/* Functions exported by DIOs (Wasco WITIO-48 card) */

dio_name, 0, ALL;                      // returns the device name
dio_reserve_dio, -1, ALL;              // get a lock on one of the DIOs
dio_mode, -1, ALL;                     // sets the DIO mode
dio_value, -1, EXP;                    // inputs or ouputs a value


/* Functions exported by microwave attenuators */

mw_attenuator_name, 0, ALL;
mw_attenuator_load_calibration, -1, PREP;
mw_attenuator_initial_attenuation, 1, ALL;;
mw_attenuator_attenuation, -1, EXP;


/* Function exported by the chopper module (gg_chopper) */

chopper_name, 0, ALL;
chopper_sector_frequency, -1, ALL;
