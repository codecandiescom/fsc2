/*
  $Id$

  Copyright (C) 2001 Jens Thoms Toerring

  This file is part of fsc2.

  Fsc2 is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2, or (at your option)
  any later version.

  Fsc2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with fsc2; see the file COPYING.  If not, write to
  the Free Software Foundation, 59 Temple Place - Suite 330,
  Boston, MA 02111-1307, USA.
*/

/********************************************************************/
/* List of all non-builtin functions that can be used in EDL files  */
/*                                                                  */
/* Syntax:                                                          */
/*                                                                  */
/*               name, # args [ , access ] ;                        */
/*                                                                  */
/* where `name' is the name of the function and `#args' is the      */
/* number of arguments - use a negative number for functions with   */
/* variable number of arguments. The optional parameter `access'    */
/* is the access flag, where ALL means that it can be used in all   */
/* sections of an EDL file while EXP says that the function can     */
/* be used only in the EXPERIMENTS section, i.e. it's probably a    */
/* function that accesses a device. The default is EXP. Finally,    */
/* PREP says that the function may only be used in the preparation  */
/* of an experiment.                                                */
/*                                                                  */
/********************************************************************/


// Function exported by the User_Functions modules

get_phase_cycled_area, -1, EXP;


// Functions exported by the magnet power supply drivers (AEG_S_BAND,
// AEG_X_BAND and, for all functions without the word field in its name,
// also the W_BAND)

magnet_name, 0, ALL;            // returns the device name
magnet_setup, 2, ALL;           // set start field and sweep step size (S,X,W)
magnet_fast_init, 0, ALL;       // shortens magnet setup time (X)
set_field, -1, EXP;             // go to to a field value (S,W,X)
sweep_up, 0, EXP;               // sweep magnet up (S,X,W)
sweep_down, 0, EXP;             // sweep magnet down (S,X,W)
reset_field, 0, EXP;            // go back to start field (S,W,X)

// Functions for the W_BAND power supply driver only

magnet_use_correction, 0, PREP; // if called field corrections are applied
magnet_use_dac_port, 1, PREP;   // to set the lock-ins DAC port to be used

// Functions exported by the field meter drivers (BH15, ER035M)

gaussmeter_name, 0, ALL;        // returns the device name
find_field, 0, EXP;             // return current field value
gaussmeter_resolution, 0, EXP;  // returns resolution of field meter
gaussmeter_wait, 0, EXP;        // wait for field to stabilize

measure_field, 0, EXP;          // return field value (ER035M_SA, ER035M_SAS
								// and PT2025)

// Functions exported by the pulser drivers (DG2020, HFS9000)
// (functions involving phases and keyboard for DG2020 only)

pulser_name, 0, ALL;            // returns the device name
pulser_state, -1, ALL;          // switches pulser on/off
pulser_channel_state, -1, ALL;  // switches pulser channel on/off
pulser_update, 0, EXP;          // commits changes
pulser_shift, -1, EXP;          // shift pulse positions
pulser_increment, -1, EXP;      // change pulse lengths
pulser_pulse_reset, -1, EXP;    // set back pulses to initial state
pulser_next_phase, -1, EXP;     // switch to next phase in phase cycling
pulser_phase_reset, -1, EXP;    // switch back to first phase
pulser_lock_keyboard, -1, EXP;  // lock or unlock the keyboard
pulser_cw_mode, 0, PREP;        // CW mode experiment (DG2020/Berlin only)
pulser_stop_on_update, 1, ALL;  // sets stop during updates (HFS9000 only)


// Functions exported by the lock-in amplifier drivers
// (SR510, SR530, SR810, SR830)

lockin_name, 0, ALL;            // returns the device name
lockin_get_data, -1, EXP;       // returns the lock-in voltage 
lockin_get_adc_data, 1, EXP;    // returns a ADC voltage
lockin_dac_voltage, -1, ALL;    // gets or sets DAC voltage
lockin_sensitivity, -1, ALL;    // gets or sets the sensitivity
lockin_time_constant, -1, ALL;  // gets or sets the time constant
lockin_phase, -1, ALL;          // gets or sets the phase
lockin_ref_freq, -1, EXP;       // Get or set reference frequency (SR8x0 only)
lockin_ref_mode, 0, EXP;        // Get reference mode (SR8x0 only)
lockin_ref_level, -1, ALL;      // Get or set reference level (SR8x0 only)
lockin_lock_keyboard, -1, EXP;  // Lock or unlock the keyboard


// Functions exported by the digitizer
// (TDS520, TDS520A, TDS520C, TDS540, TDS744A, TDS754A)

digitizer_name, 0, ALL;                 // returns the device name
digitizer_define_window, -1, PREP;      // defines a cursor window
digitizer_timebase, -1, ALL;            // set or get the time base
digitizer_sensitivity, -1, ALL;         // set or get the sensitivity
digitizer_num_averages, -1, ALL;        // set or get number of averages
digitizer_trigger_channel, -1, ALL;     // set or get trigger channel
digitizer_record_length, -1, ALL;       // set or get record_length
digitizer_trigger_position, -1, ALL;    // set or get trigger position
digitizer_start_acquisition, 0, EXP;
digitizer_get_area, -1, EXP;
digitizer_get_area_fast, -1, EXP;
digitizer_get_curve, -1, EXP;
digitizer_get_curve_fast, -1, EXP;
digitizer_get_amplitude, -1, EXP;
digitizer_get_amplitude_fast, -1, EXP;
digitizer_run, 0, EXP;
digitizer_lock_keyboard, -1, EXP;       // Lock or unlock the keyboard

digitizer_get_channel_number, 1, ALL;   // only for internal use !
digitizer_meas_channel_ok, 1, ALL;      // only for internal use !


// Functions exported by the rf synthesizer (HP8647A)

synthesizer_name, 0, ALL;             // returns the device name
synthesizer_state, -1, ALL;           // set/get state (ON/OFF)
synthesizer_frequency, -1, ALL;       // set/get frequency
synthesizer_attenuation, -1, ALL;     // set/get attenuation
synthesizer_minimum_attenuation, -1, ALL;     // set/get minimum attenuation
synthesizer_step_frequency, -1, ALL;  // set/get sweep step frequency
synthesizer_sweep_up, 0, EXP;         // sweep up
synthesizer_sweep_down, 0, EXP;       // sweep down
synthesizer_reset_frequency, 0, EXP;  // go back to start frequency
synthesizer_use_table, -1, PREP;      // set attenuation-table to use in sweeps
synthesizer_att_ref_freq, -1, ALL;    // set frequency the attention setting
                                      // refers to
synthesizer_modulation, -1, ALL;
synthesizer_mod_type, -1, EXP;
synthesizer_mod_source, -1, EXP;
synthesizer_mod_ampl, -1, EXP;


// Functions exported by the boxcar (EGG4402)

boxcar_name, 0, ALL;
boxcar_curve_length, -1, EXP;
boxcar_get_curve, -1, EXP;


// Functions exported by the voltmeter (Kontron 4060)

voltmeter_name, 0, ALL;
voltmeter_get_data, 0, EXP;
voltmeter_ac_measurement, 0, EXP;
voltmeter_dc_measurement, 0, EXP;


// Functions exported by the temperature controller (Lake Shore 330)

temp_contr_name, 0, ALL;
temp_contr_lock_keyboard, -1, EXP;
temp_contr_temperature, 0, EXP;
temp_contr_sensor_unit, -1, EXP;
temp_contr_sample_channel, -1, EXP;
