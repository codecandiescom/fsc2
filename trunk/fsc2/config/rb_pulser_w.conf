/* -*-C-*-
  $Id$

  This file contains configuration information for controlling the
  W-band version of the RULBUS pulser, made up from 22 delay (RB8514)
  and 2 clock (RB8515) cards and using the pulse modulation unit SML-B3
  of the Rhode&Schwarz SML01 RF Synthesizer to create a single RF pulse.
  This file will be included as a header file, so the syntax must be
  valid C and changes will only become visible after re-compilation
  of the module.
*/


/* Define the name that's going to be used for the device. */

#define DEVICE_NAME     "RB_PULSER_W"


/* Define the generic type of the device */

#define DEVICE_TYPE     "pulser"


/* Define the name of the file with the assignment of delay and clock card
   names (from the RULBUS configutation file '/etc/rulbus.conf') to card
   functions. If only a relative path is given it will be taken to be
   relative to the install directory for modules. */

#define RB_PULSER_W_CONFIG_FILE  "rb_pulser_w.cards"


/* If all the delay cards the pulser run on a fixed timebase (with the only
   exception being the delay card responsible for creating triggers in
   internal trigger mode), derived from a single-frequency clock card the
   following variable must be set to the frequency of that card (typically
   100 MHz), otherwise (i.e. if the delay cards get their clock input from
   a variable frequency clock) it must be undefined. */

#define FIXED_TIMEBASE  1.0e-8        /* 10 ns <=> 100 MHz */


/* Define names of synthesizer module and the functions for setting the pulse
   modulation state, the pulse width, the initial delay and the pulse trigger
   slope - the synthesizer name could be made a configuration option, but
   currently no-one seems to have any other synthesizer with the required
   capabilities. */

#define SYNTHESIZER_MODULE       "rs_sml01"
#define SYNTHESIZER_STATE        "synthesizer_state"
#define SYNTHESIZER_PULSE_STATE  "synthesizer_pulse_state"
#define SYNTHESIZER_PULSE_WIDTH  "synthesizer_pulse_width"
#define SYNTHESIZER_PULSE_DELAY  "synthesizer_pulse_delay"
#define SYNTHESIZER_TRIG_SLOPE   "synthesizer_pulse_trigger_slope"


/* Define the shortest possible delay for starting an RF pulse - this is the
   measured intrinsic delay of about 200 ns of the Rhode&Schwarz SML01 */

#define SYNTHESIZER_INTRINSIC_DELAY 2.0e-7           /* 200 ns */


/* Define the lower limit that can be set for the synthesizers pulse delay,
   which is 20 ns for the Rhode&Schwarz SML01. Please note that this isn't
   the 'real' delay but just the smallest value that can be set, and the
   real delay results from adding the intrinsic delay defined above. */

#define SYNTHESIZER_MIN_PULSE_DELAY 2.0e-8           /* 20 ns */


/* Define the shortest length for a phase pulse going into Leendert's
   "MoNos W-band magic box" so that it still reacts to the pulse (reacting
   to the end pulses of a delay card used for phase switching is triggered
   by the GATE pulse of the delay card, and this GATE pulse must have a
   minimum duration for the box to be able to detect it)*/

#define MINIMUM_PHASE_PULSE_LENGTH  2.0e-8           /* 20 ns */


/* Define the amount of time (in seconds) between the end of a phase pulse
   (the end pulses of the card creating the phase pulse control the new
   phase setting) and the phase switch being finished with switching - this
   includes the time the signal takes through Leendert's "MoNos W-band magic
   box" plus the time the swich itself needs */

#define DEFAULT_PHASE_SWITCH_DELAY  20.0e-9           /* 20 ns */


/* Defines the amount of time (in seconds) that a phase must stay set after
   after the end of the pulse for which it was set. This allows for jitter
   and other effects (e.g. different cable lengths) which may lead to strange
   artefacts when the phase would be switched earlier. */

#define DEFAULT_GRACE_PERIOD        10.0e-9           /* 10 ns */


/* Define the default minimum time distance (in seconds) between the end
   of the last microwave pulse and the end of the defense pulse. The value
   is only that large for being 100% sure the detector won't get fried, in
   most cases it will have to be reduced by calling the function
   pulser_pulse_to_defense_mininum_distance(). */

#define PULSE_2_DEFENSE_DEFAULT_MIN_DISTANCE  1.0e-6       /* 1 us */


/* If you should ever get really annoyed about getting asked each time you
   start an experiment to confirm that you know what you were doing when
   you set a different minimum distance between the end of the last
   microwave pulse and the end of the defense pulse than the default (and
   unreasonably long) values given above comment out the next define (but
   don't blame me if you inadvertently destroy the microwave amplifier by
   closing the defense switch while the microwave level was still too high,
   *you* asked for it...) */

#define ASK_FOR_PULSE_2_DEFENSE_DISTANCE_CONFORMATION


/*
 * Local variables:
 * tab-width: 4
 * indent-tabs-mode: nil
 * End:
 */
