#!/usr/bin/perl
# -*- cperl -*-
# Generated by fsc2_guify from freq_check.EDL on Tue Jun 24 00:38:32 CEST 2008

use strict;
use warnings;
use Tk;
use Tk::Balloon;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
    if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my %fp = ( -side => 'top',
           -fill => 'x',
           -padx => '2m',
           -pady => '2m' );
my %wp = ( -side => 'left',
           -fill => 'x',
           -expand => 1 );
my %up = ( -side => 'left' );
my $geom;

my $fsc2_how_to_run = "Test program";
my @fsc2_how_to_run = ( "Start experiment",
                        "Test program",
                        "Load into fsc2" );
my $fsc2_main_window = MainWindow->new( -title =>
                               ( split /\./, ( split /\//, $0 )[ -1 ] )[ 0 ] );
my $fsc2_main_frame = $fsc2_main_window->Frame( -relief => "ridge",
                                                -borderwidth => "1m" );
my $fsc2_balloon = $fsc2_main_frame->Balloon( );
my $fsc2_apply_frame = $fsc2_main_window->Frame( );
my $fsc2_apply_button = $fsc2_apply_frame->Button( -text => "Apply",
                                                   -command => \&write_out );
$fsc2_apply_button->bind( "all", "<Alt-a>" => \&write_out );
my $fsc2_quit_button = $fsc2_apply_frame->Button( -text => "Quit",
                 -command => sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                   $geom = $1;
                                   &store_defs;
                                   $fsc2_main_window->destroy } );
$fsc2_quit_button->bind( "all",
                         "<Alt-q>" =>
                                sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                      $geom = $1;
                                      &store_defs;
                                      $fsc2_main_window->destroy } );
$fsc2_apply_frame->pack( -side => "bottom",
                         -fill => "x",
                         -padx => "4m" );

# === DT float [ 0.5 : ][ 1 ] "Time step" "s"

my %DT;
$DT{ tk_frame } = $fsc2_main_frame->Frame( );
$DT{ tk_label } = $DT{ tk_frame }->Label( -text => "Time step",
-width => 20,
-anchor => 'w' );
$DT{ value } = 1;
$DT{ min } = 0.5;
$DT{ max } = undef;
$DT{ tk_entry } = $DT{ tk_frame }->Entry( -textvariable => \$DT{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $DT{ min } ? $DT{ min } : undef ),
( defined $DT{ max } ? $DT{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $DT{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $DT{ min } ? $DT{ min } : '-inf' ) .
" : " . ( defined $DT{ max } ? $DT{ max } : '+inf' ) . " ]" );
$DT{ tk_unit } = $DT{ tk_frame }->Label( -text => "s",
-width => 5 );
$DT{ tk_frame }->pack( %fp );
$DT{ tk_label }->pack( %wp );
$DT{ tk_entry }->pack( %wp );
$DT{ tk_unit  }->pack( %up );

$fsc2_main_frame->pack( %fp, -pady => '1m' );
$fsc2_main_window->Optionmenu( -options => \@fsc2_how_to_run,
                                -textvariable => \$fsc2_how_to_run,
                              )->pack( -padx => '3m',
                                       -pady => '3m' );

$fsc2_apply_button->pack( %wp, -padx => '5m', -pady => '3m' );
$fsc2_quit_button->pack(  %wp, -padx => '5m', -pady => '3m' );

load_defs( );
$fsc2_main_window->geometry( $geom ) if defined $geom;
MainLoop;


################################################################

sub int_check {
    my ( $new, $min, $max ) = @_;

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $fsc2_apply_button->configure( -state => 'normal' );
     }
     return 1;
}


################################################################

sub float_check {
    my ( $new, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $fsc2_apply_button->configure( -state => 'normal' );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

     return 0;
}


################################################################

sub write_out {
    my $fh;

    open( $fh, "|fsc2_" . lc $fsc2_how_to_run )
        or die "Can't find utility fsc2_" . lc $fsc2_how_to_run . ".\n";

    my $DT = $DT{ value };

    print $fh "
DEVICES:

hp5342a;


VARIABLES:

dt = $DT s;
File;
t1, t2, t3;
res = 1.0 Hz;
I = 1;
freq;
S;


PREPARATIONS:

init_1d( 1, 0, 0, dt, \"Time [s]\", \"Frequency [GHz]\" );


EXPERIMENT:

// Set resolution at which the counter is fast enough

IF dt <= 0.7 s {
    res = 1 kHz;
} ELSE IF dt < 1.0 s {
    res = 100 Hz;
} ELSE IF dt < 1.5 s {
    res = 10 Hz;
}

freq_counter_resolution( res );

File = get_file( );

// Get two dat points to get the frequency counter up to speed

freq_counter_measure( );
freq_counter_measure( );

delta_time( );

S = button_create( \"PUSH_BUTTON\", \"Start/Stop data acquistion\" );
button_state( S, 1 );

t1 = 0.0;

FOREVER {
    IF button_state( S ) {
        t1 = delta_time( );
        freq = freq_counter_measure( ) / 1 GHz;
        display_1d( I, freq );
        I += 1;
        t2 = delta_time( );
        IF dt > t2 {
            wait( dt - t2 );
        }
		t3 = delta_time( );
        fsave( File, \"# #\\n\", t1 + t2 + t3, freq );
    } ELSE {
        wait( 0.25 s );
    }
}
";
    close $fh;

    my $text;
    if ( $? != 0 ) {
        if ( $? >> 8 == 255 ) {
            $text = "Internal error.";
        } elsif ( $? >> 8 == 1 ) {
            $text = "Someone else is running fsc2.";
        } elsif ( $? >> 8 == 2 ) {
            $text = "fsc2 is already testing or\nrunning an experiment.";
        } elsif ( $? >> 8 == 3 ) {
            $text = "Internal error of fsc2.";
        } elsif ( $? >> 8 == 4 ) {
            $text = "Could not start fsc2.";
        } else {
            $text = "Something strange\nis going on here.";
        }

        &show_message( $text ) if $? >> 8 != 0;
    }
}


################################################################

sub show_message {
    my $text = shift;

    $fsc2_main_window->messageBox( -icon => 'error',
                                   -type => 'Ok',
                                   -title => 'Error',
                                   -message => $text );
}


################################################################

sub store_defs {
    my $fh;
    my $name = $0;

    $name =~ s|^.*?([^/]+)$|$1|;
    mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
    open( $fh, '>', $ENV{ HOME } . "/.fsc2/$name" ) or return;
    print $fh "# Do not edit - created automatically!\n";

    if (     $DT{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
         and (     defined $DT{ max } ? $DT{ max } >= $DT{ value } : 1 )
         and ( defined $DT{ min } ? $DT{ min } <= $DT{ value } : 1 ) ) {
        print $fh "$DT{ value }\n";
    } else {
        print $fh "1\n";
    }

    print $fh "$fsc2_how_to_run\n";

    print $fh "$geom\n" if defined $geom;

    close $fh;
};


################################################################

sub load_defs {
    my $fh;
    my $name = $0;
    my $ne;
    my $found;

    $name =~ s|^.*?([^/]+)$|$1|;
    if ( $ARGV[ 0 ] ) {
        open( $fh, '<', $ARGV[ 0 ] ) or return;
    } else {
        open( $fh, '<'. $ENV{ HOME } . "/.fsc2/$name" ) or return;
    }

    goto done_reading unless defined( $ne = <$fh> ) and $ne =~ /^#/;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $DT{ max } and $ne > $DT{ max } )
                         or ( defined $DT{ min } and $ne < $DT{ min } );
    $DT{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @fsc2_how_to_run ) {
        if ( $ne eq $_ ) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $fsc2_how_to_run = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^\s*([+-]\d+[+-]\d+)\s*$/;
    $geom = $1;

  done_reading:
    close $fh;
};
