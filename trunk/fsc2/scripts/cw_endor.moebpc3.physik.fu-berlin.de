#!/usr/bin/perl
# -*- cperl -*-
# Generated by fsc2_guify from cw_endor_360GHz.EDL on Fri Apr 15 17:53:14 CEST 2005

use strict;
use warnings;
use Tk;
use Tk::Balloon;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
    if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my %fp = ( -side => 'top',
           -fill => 'x',
           -padx => '2m',
           -pady => '2m' );
my %wp = ( -side => 'left',
           -fill => 'x',
           -expand => 1 );
my %up = ( -side => 'left' );
my $geom;

my $fsc2_how_to_run = "Test program";
my @fsc2_how_to_run = ( "Start experiment",
                        "Test program",
                        "Load into fsc2" );
my $fsc2_main_window = MainWindow->new( -title =>
							   ( split /\./, ( split /\//, $0 )[ -1 ] )[ 0 ] );
my $fsc2_main_frame = $fsc2_main_window->Frame( -relief => "ridge",
                                                -borderwidth => "1m" );
my $fsc2_balloon = $fsc2_main_frame->Balloon( );
my $fsc2_apply_frame = $fsc2_main_window->Frame( );
my $fsc2_apply_button = $fsc2_apply_frame->Button( -text => "Apply",
                                                   -command => \&write_out );
$fsc2_apply_button->bind( "all", "<Alt-a>" => \&write_out );
my $fsc2_quit_button = $fsc2_apply_frame->Button( -text => "Quit",
                 -command => sub { $fsc2_main_window->geometry =~
							   					   /^\d+x\d+([+-]\d+[+-]\d+)$/;
							   	   $geom = $1;
							   	   &store_defs;
                                   $fsc2_main_window->destroy } );
$fsc2_quit_button->bind( "all",
                         "<Alt-q>" =>
                         		sub { $fsc2_main_window->geometry =~
							   					   /^\d+x\d+([+-]\d+[+-]\d+)$/;
							   		  $geom = $1;
							   		  &store_defs;
									  $fsc2_main_window->destroy } );
$fsc2_apply_frame->pack( -side => "bottom",
                         -fill => "x",
                         -padx => "4m" );

# ===  START_FREQ float [ 0.01 : 2000 ] [ 500 ] "Start frequency:" "MHz"

my %START_FREQ;
$START_FREQ{ tk_frame } = $fsc2_main_frame->Frame( );
$START_FREQ{ tk_label } = $START_FREQ{ tk_frame }->Label( -text => "Start frequency:",
-width => 20,
-anchor => 'w' );
$START_FREQ{ value } = 500;
$START_FREQ{ min } = 0.01;
$START_FREQ{ max } = 2000;
$START_FREQ{ tk_entry } = $START_FREQ{ tk_frame }->Entry( -textvariable => \$START_FREQ{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $START_FREQ{ min } ? $START_FREQ{ min } : undef ),
( defined $START_FREQ{ max } ? $START_FREQ{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $START_FREQ{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $START_FREQ{ min } ? $START_FREQ{ min } : '-inf' ) .
" : " . ( defined $START_FREQ{ max } ? $START_FREQ{ max } : '+inf' ) . " ]" );
$START_FREQ{ tk_unit } = $START_FREQ{ tk_frame }->Label( -text => "MHz",
-width => 5 );
$START_FREQ{ tk_frame }->pack( %fp );
$START_FREQ{ tk_label }->pack( %wp );
$START_FREQ{ tk_entry }->pack( %wp );
$START_FREQ{ tk_unit  }->pack( %up );

# === END_FREQ float [ 0.01 : 2000 ] [ 600 ] "End frequency:" "MHz"

my %END_FREQ;
$END_FREQ{ tk_frame } = $fsc2_main_frame->Frame( );
$END_FREQ{ tk_label } = $END_FREQ{ tk_frame }->Label( -text => "End frequency:",
-width => 20,
-anchor => 'w' );
$END_FREQ{ value } = 600;
$END_FREQ{ min } = 0.01;
$END_FREQ{ max } = 2000;
$END_FREQ{ tk_entry } = $END_FREQ{ tk_frame }->Entry( -textvariable => \$END_FREQ{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $END_FREQ{ min } ? $END_FREQ{ min } : undef ),
( defined $END_FREQ{ max } ? $END_FREQ{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $END_FREQ{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $END_FREQ{ min } ? $END_FREQ{ min } : '-inf' ) .
" : " . ( defined $END_FREQ{ max } ? $END_FREQ{ max } : '+inf' ) . " ]" );
$END_FREQ{ tk_unit } = $END_FREQ{ tk_frame }->Label( -text => "MHz",
-width => 5 );
$END_FREQ{ tk_frame }->pack( %fp );
$END_FREQ{ tk_label }->pack( %wp );
$END_FREQ{ tk_entry }->pack( %wp );
$END_FREQ{ tk_unit  }->pack( %up );

# === STEP_FREQ float [ 10 : 20000 ] [ 200 ] "Frequency step size:" "kHz"

my %STEP_FREQ;
$STEP_FREQ{ tk_frame } = $fsc2_main_frame->Frame( );
$STEP_FREQ{ tk_label } = $STEP_FREQ{ tk_frame }->Label( -text => "Frequency step size:",
-width => 20,
-anchor => 'w' );
$STEP_FREQ{ value } = 200;
$STEP_FREQ{ min } = 10;
$STEP_FREQ{ max } = 20000;
$STEP_FREQ{ tk_entry } = $STEP_FREQ{ tk_frame }->Entry( -textvariable => \$STEP_FREQ{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $STEP_FREQ{ min } ? $STEP_FREQ{ min } : undef ),
( defined $STEP_FREQ{ max } ? $STEP_FREQ{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $STEP_FREQ{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $STEP_FREQ{ min } ? $STEP_FREQ{ min } : '-inf' ) .
" : " . ( defined $STEP_FREQ{ max } ? $STEP_FREQ{ max } : '+inf' ) . " ]" );
$STEP_FREQ{ tk_unit } = $STEP_FREQ{ tk_frame }->Label( -text => "kHz",
-width => 5 );
$STEP_FREQ{ tk_frame }->pack( %fp );
$STEP_FREQ{ tk_label }->pack( %wp );
$STEP_FREQ{ tk_entry }->pack( %wp );
$STEP_FREQ{ tk_unit  }->pack( %up );

# === ATTENUATION float [ -136 : 14.5 ] [ -20 ] "Attenuation:" "dB"

my %ATTENUATION;
$ATTENUATION{ tk_frame } = $fsc2_main_frame->Frame( );
$ATTENUATION{ tk_label } = $ATTENUATION{ tk_frame }->Label( -text => "Attenuation:",
-width => 20,
-anchor => 'w' );
$ATTENUATION{ value } = -20;
$ATTENUATION{ min } = -136;
$ATTENUATION{ max } = 14.5;
$ATTENUATION{ tk_entry } = $ATTENUATION{ tk_frame }->Entry( -textvariable => \$ATTENUATION{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $ATTENUATION{ min } ? $ATTENUATION{ min } : undef ),
( defined $ATTENUATION{ max } ? $ATTENUATION{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $ATTENUATION{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $ATTENUATION{ min } ? $ATTENUATION{ min } : '-inf' ) .
" : " . ( defined $ATTENUATION{ max } ? $ATTENUATION{ max } : '+inf' ) . " ]" );
$ATTENUATION{ tk_unit } = $ATTENUATION{ tk_frame }->Label( -text => "dB",
-width => 5 );
$ATTENUATION{ tk_frame }->pack( %fp );
$ATTENUATION{ tk_label }->pack( %wp );
$ATTENUATION{ tk_entry }->pack( %wp );
$ATTENUATION{ tk_unit  }->pack( %up );

# === MOD_FREQ float [ 0 : 100 ] [ 19 ] "Modulation frequency:" "kHz"

my %MOD_FREQ;
$MOD_FREQ{ tk_frame } = $fsc2_main_frame->Frame( );
$MOD_FREQ{ tk_label } = $MOD_FREQ{ tk_frame }->Label( -text => "Modulation frequency:",
-width => 20,
-anchor => 'w' );
$MOD_FREQ{ value } = 19;
$MOD_FREQ{ min } = 0;
$MOD_FREQ{ max } = 100;
$MOD_FREQ{ tk_entry } = $MOD_FREQ{ tk_frame }->Entry( -textvariable => \$MOD_FREQ{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $MOD_FREQ{ min } ? $MOD_FREQ{ min } : undef ),
( defined $MOD_FREQ{ max } ? $MOD_FREQ{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $MOD_FREQ{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $MOD_FREQ{ min } ? $MOD_FREQ{ min } : '-inf' ) .
" : " . ( defined $MOD_FREQ{ max } ? $MOD_FREQ{ max } : '+inf' ) . " ]" );
$MOD_FREQ{ tk_unit } = $MOD_FREQ{ tk_frame }->Label( -text => "kHz",
-width => 5 );
$MOD_FREQ{ tk_frame }->pack( %fp );
$MOD_FREQ{ tk_label }->pack( %wp );
$MOD_FREQ{ tk_entry }->pack( %wp );
$MOD_FREQ{ tk_unit  }->pack( %up );

# === MOD_AMPL float [ 0 : 100 ] [ 80 ] "Modulation amplitude:" "kHz"

my %MOD_AMPL;
$MOD_AMPL{ tk_frame } = $fsc2_main_frame->Frame( );
$MOD_AMPL{ tk_label } = $MOD_AMPL{ tk_frame }->Label( -text => "Modulation amplitude:",
-width => 20,
-anchor => 'w' );
$MOD_AMPL{ value } = 80;
$MOD_AMPL{ min } = 0;
$MOD_AMPL{ max } = 100;
$MOD_AMPL{ tk_entry } = $MOD_AMPL{ tk_frame }->Entry( -textvariable => \$MOD_AMPL{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $MOD_AMPL{ min } ? $MOD_AMPL{ min } : undef ),
( defined $MOD_AMPL{ max } ? $MOD_AMPL{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $MOD_AMPL{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $MOD_AMPL{ min } ? $MOD_AMPL{ min } : '-inf' ) .
" : " . ( defined $MOD_AMPL{ max } ? $MOD_AMPL{ max } : '+inf' ) . " ]" );
$MOD_AMPL{ tk_unit } = $MOD_AMPL{ tk_frame }->Label( -text => "kHz",
-width => 5 );
$MOD_AMPL{ tk_frame }->pack( %fp );
$MOD_AMPL{ tk_label }->pack( %wp );
$MOD_AMPL{ tk_entry }->pack( %wp );
$MOD_AMPL{ tk_unit  }->pack( %up );

# === CURR float [ -7.0 : 7.0 ][ 0.0 ] "Field current:" "A"

my %CURR;
$CURR{ tk_frame } = $fsc2_main_frame->Frame( );
$CURR{ tk_label } = $CURR{ tk_frame }->Label( -text => "Field current:",
-width => 20,
-anchor => 'w' );
$CURR{ value } = 0.0;
$CURR{ min } = -7.0;
$CURR{ max } = 7.0;
$CURR{ tk_entry } = $CURR{ tk_frame }->Entry( -textvariable => \$CURR{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $CURR{ min } ? $CURR{ min } : undef ),
( defined $CURR{ max } ? $CURR{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $CURR{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $CURR{ min } ? $CURR{ min } : '-inf' ) .
" : " . ( defined $CURR{ max } ? $CURR{ max } : '+inf' ) . " ]" );
$CURR{ tk_unit } = $CURR{ tk_frame }->Label( -text => "A",
-width => 5 );
$CURR{ tk_frame }->pack( %fp );
$CURR{ tk_label }->pack( %wp );
$CURR{ tk_entry }->pack( %wp );
$CURR{ tk_unit  }->pack( %up );

# === NUM_RUNS int [ 1 : ] [ 20 ] "Number of runs:"

my %NUM_RUNS;
$NUM_RUNS{ tk_frame } = $fsc2_main_frame->Frame( );
$NUM_RUNS{ tk_label } = $NUM_RUNS{ tk_frame }->Label( -text => "Number of runs:",
-width => 20,
-anchor => 'w' );
$NUM_RUNS{ value } = 20;
$NUM_RUNS{ min } = 1;
$NUM_RUNS{ max } = undef;
$NUM_RUNS{ tk_entry } = $NUM_RUNS{ tk_frame }->Entry( -textvariable => \$NUM_RUNS{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ int_check( shift,
( defined $NUM_RUNS{ min } ? $NUM_RUNS{ min } : undef ),
( defined $NUM_RUNS{ max } ? $NUM_RUNS{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $NUM_RUNS{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $NUM_RUNS{ min } ? $NUM_RUNS{ min } : '-inf' ) .
" : " . ( defined $NUM_RUNS{ max } ? $NUM_RUNS{ max } : '+inf' ) . " ]" );
$NUM_RUNS{ tk_unit } = $NUM_RUNS{ tk_frame }->Label( -text => "",
-width => 5 );
$NUM_RUNS{ tk_frame }->pack( %fp );
$NUM_RUNS{ tk_label }->pack( %wp );
$NUM_RUNS{ tk_entry }->pack( %wp );
$NUM_RUNS{ tk_unit  }->pack( %up );

# === LOCKIN menu [ "SR510", "SR530", "SR810", "SR830" ] [ 4 ]  "Lock-in amplifier:"

my %LOCKIN;
$LOCKIN{ tk_frame } = $fsc2_main_frame->Frame( );
$LOCKIN{ tk_label } = $LOCKIN{ tk_frame }->Label( -text => "Lock-in amplifier:",
-width => 20,
-anchor => 'w' );
$LOCKIN{ value } = "SR830";
my @LOCKIN = ( "SR510", "SR530", "SR810", "SR830" );
$LOCKIN{ tk_entry } = $LOCKIN{ tk_frame }->Optionmenu( -options => \@LOCKIN,
-width => 10,
-textvariable => \$LOCKIN{ value } );
$LOCKIN{ tk_unit } = $LOCKIN{ tk_frame }->Label( -text => "",
-width => 5 );
$LOCKIN{ tk_frame }->pack( %fp );
$LOCKIN{ tk_label }->pack( %wp );
$LOCKIN{ tk_entry }->pack( %wp );
$LOCKIN{ tk_unit  }->pack( %up );

# === TC menu [ "Don't set", "100 s", " 30 s", " 10 s", "  3 s", "  1 s",  "300 ms", "100 ms", " 30 ms", " 10 ms", "  3 ms", "  1 ms" ]  [ 1 ] "Time constant:"

my %TC;
$TC{ tk_frame } = $fsc2_main_frame->Frame( );
$TC{ tk_label } = $TC{ tk_frame }->Label( -text => "Time constant:",
-width => 20,
-anchor => 'w' );
$TC{ value } = "Don't set";
my @TC = ( "Don't set", "100 s", " 30 s", " 10 s", "  3 s", "  1 s", "300 ms", "100 ms", " 30 ms", " 10 ms", "  3 ms", "  1 ms" );
$TC{ tk_entry } = $TC{ tk_frame }->Optionmenu( -options => \@TC,
-width => 10,
-textvariable => \$TC{ value } );
$TC{ tk_unit } = $TC{ tk_frame }->Label( -text => "",
-width => 5 );
$TC{ tk_frame }->pack( %fp );
$TC{ tk_label }->pack( %wp );
$TC{ tk_entry }->pack( %wp );
$TC{ tk_unit  }->pack( %up );

# === SENS menu [ "Don't set", "500 mV", "200 mV", "100 mV", " 50 mV",  " 20 mV", " 10 mV", "  5 mv", "  2 mV", "  1 mV", "500 uV",  "200 uV", "100 uV", " 50 uV", " 20 uV", " 10 uV", "  5 uV",  "  2 uV", "  1 uV", "500 nV", "200 nV", "100 nV", " 50 nV",  " 10 nV", "  5 nV", "  2 nV" ] [ 1 ]  "Sensitivity:"

my %SENS;
$SENS{ tk_frame } = $fsc2_main_frame->Frame( );
$SENS{ tk_label } = $SENS{ tk_frame }->Label( -text => "Sensitivity:",
-width => 20,
-anchor => 'w' );
$SENS{ value } = "Don't set";
my @SENS = ( "Don't set", "500 mV", "200 mV", "100 mV", " 50 mV", " 20 mV", " 10 mV", "  5 mv", "  2 mV", "  1 mV", "500 uV", "200 uV", "100 uV", " 50 uV", " 20 uV", " 10 uV", "  5 uV", "  2 uV", "  1 uV", "500 nV", "200 nV", "100 nV", " 50 nV", " 10 nV", "  5 nV", "  2 nV" );
$SENS{ tk_entry } = $SENS{ tk_frame }->Optionmenu( -options => \@SENS,
-width => 10,
-textvariable => \$SENS{ value } );
$SENS{ tk_unit } = $SENS{ tk_frame }->Label( -text => "",
-width => 5 );
$SENS{ tk_frame }->pack( %fp );
$SENS{ tk_label }->pack( %wp );
$SENS{ tk_entry }->pack( %wp );
$SENS{ tk_unit  }->pack( %up );

$fsc2_main_frame->pack( %fp, -pady => '1m' );
$fsc2_main_window->Optionmenu( -options => \@fsc2_how_to_run,
                                -textvariable => \$fsc2_how_to_run,
                              )->pack( -padx => '3m',
                                       -pady => '3m' );

$fsc2_apply_button->pack( %wp, padx => '5m', -pady => '3m' );
$fsc2_quit_button->pack(  %wp, padx => '5m', -pady => '3m' );

load_defs( );
$fsc2_main_window->geometry( $geom ) if defined $geom;
MainLoop;


################################################################

sub int_check {
    my ( $new, $min, $max ) = @_;

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $fsc2_apply_button->configure( -state => 'normal' );
     }
     return 1;
}


################################################################

sub float_check {
    my ( $new, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $fsc2_apply_button->configure( -state => 'normal' );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

     return 0;
}


################################################################

sub write_out {
    my $fh;

    open( $fh, "|fsc2_" . lc $fsc2_how_to_run )
        or die "Can't find utility fsc2_" . lc $fsc2_how_to_run . ".\n";

    my $START_FREQ = $START_FREQ{ value };
    my $END_FREQ = $END_FREQ{ value };
    my $STEP_FREQ = $STEP_FREQ{ value };
    my $ATTENUATION = $ATTENUATION{ value };
    my $MOD_FREQ = $MOD_FREQ{ value };
    my $MOD_AMPL = $MOD_AMPL{ value };
    my $CURR = $CURR{ value };
    my $NUM_RUNS = $NUM_RUNS{ value };
    my $LOCKIN = $LOCKIN{ value };
    my $TC = $TC{ value };
    my $SENS = $SENS{ value };

    print $fh "/***********************************************************************/
/*    EDL program for running cw-ENDOR experiments with the 360 GHz    */
/*                spectrometer (unidirectional sweeps).                */
/***********************************************************************/


DEVICES:

hp8648b;
$LOCKIN;
ips20_4;


VARIABLES:

start_freq  = $START_FREQ MHz;
end_freq    = $END_FREQ MHz;
";
# === if if ( END_FREQ < START_FREQ ) { STEP_FREQ *= -1; }
    if ( eval { if ( $END_FREQ < $START_FREQ ) { $STEP_FREQ *= -1; } } ) {
        print $fh "";
# === endif
    }

    print $fh "step_freq   = $STEP_FREQ kHz;
attenuation = $ATTENUATION dB;
mod_freq    = $MOD_FREQ kHz;
mod_ampl    = $MOD_AMPL kHz;
current     = $CURR A;
N_runs      = $NUM_RUNS;
";
# === if TC ne "Don't set"
    if ( eval { $TC ne "Don't set" } ) {
        print $fh "tc = $TC;
";
# === else
    } else {
        print $fh "tc;
";
# === endif
    }

    print $fh "";
# === if SENS ne "Don't set"
    if ( eval { $SENS ne "Don't set" } ) {
        print $fh "sens = $SENS;
";
# === else
    } else {
        print $fh "sens;
";
# === endif
    }

    print $fh "
I = 0;
J;
K = 1;

N_points = ceil( abs( ( end_freq - start_freq ) / step_freq ) ) + 1;
data[ N_points ];
mean_data[ N_points ];
File_1, File_2;


PREPARATIONS:

synthesizer_attenuation( attenuation );
synthesizer_frequency( start_freq );
synthesizer_modulation( \"FM\", \"EXT DC\", mod_ampl );

";
# === if START_FREQ < END_FREQ
    if ( eval { $START_FREQ < $END_FREQ } ) {
        print $fh "init_1d( 3, N_points, start_freq / 1 MHz, step_freq / 1 kHz,
		 \"Frequency / MHz\", \"Signal / V\" );
";
# === else
    } else {
        print $fh "init_1d( 3, N_points, end_freq / 1 MHz, - step_freq / 1 kHz,
		 \"Frequency / MHz\", \"Signal / V\" );
";
# === endif
    }

    print $fh "

EXPERIMENT:

IF magnet_sweep( ) {
	magnet_sweep( 0 );
}
set_field( current );

synthesizer_state( \"ON\" );
";
# === if LOCKIN =~ /^SR8[31]0$/
    if ( eval { $LOCKIN =~ /^SR8[31]0$/ } ) {
        print $fh "lockin_ref_freq( mod_freq );
lockin_ref_level( 1 V );
";
# === endif
    }

    print $fh "";
# === if TC ne "Don't set"
    if ( eval { $TC ne "Don't set" } ) {
        print $fh "lockin_time_constant( tc );
";
# === else
    } else {
        print $fh "tc = lockin_time_constant( );
";
# === endif
    }

    print $fh "";
# === if SENS ne "Don't set"
    if ( eval { $SENS ne "Don't set" } ) {
        print $fh "lockin_sensitivity( sens );
";
# === else
    } else {
        print $fh "sens = lockin_sensitivity( );
";
# === endif
    }

    print $fh "
File_1 = get_file( \"File for storing all runs:\" );
File_2 = get_file( \"File for storing final result:\" );
fsave( File_2, \"% Start frequency = # MHz\\n\"
               \"% End frequency   = # MHz\\n\"
               \"% Step frequency  = # kHz\\n\"
               \"% Lock-in sens.   = # V\\n\"
               \"% Time constant   = # s\\n\"
               \"% Phase           = #\\n\"
               \"% Mod. frequency  = # kHz\\n\"
               \"% Mod. amplitude  = # kHz\\n\"
			   \"% Field current   = # A\\n%\\n\",
       start_freq  / 1 MHz, end_freq / 1 MHz, step_freq / 1 kHz,
       sens, tc, lockin_phase( ), mod_freq / 1 kHz, mod_ampl / 1 kHz,
	   current );
save_comment( File_2, \"% \" );
save_program( File_2, \"% \" );

print( \"Time needed for single sweep is ca. # s.\\n\", ceil( tc * N_points  ) );

FOR I = 1 : N_runs
{
	print( \"Starting #. run out of #\\n\", I, N_runs );

	FOR J = 1 : N_points
	{
";
# === if START_FREQ <= END_FREQ
    if ( eval { $START_FREQ <= $END_FREQ } ) {
        print $fh "		data[ J ] = lockin_get_data( );
		display( J, data[ J ], 1, J, ( mean_data[ J ] + data[ J ] ) / I, 2 );
";
# === else
    } else {
        print $fh "		data[ N_points - J + 1 ] = lockin_get_data( );
		display( N_points - J + 1, data[ N_points - J + 1 ], 1,
				 N_points - J + 1, ( mean_data[ N_points - J + 1 ]
	             + data[ N_points - J + 1 ] ) / I, 2 );
";
# === endif
    }

    print $fh "		synthesizer_frequency( start_freq + J * step_freq );
		wait( tc );
	}

	save( File_1, data );
	display( 1, data, 3 );
	mean_data += data;
	K = I;
	synthesizer_frequency( start_freq );
}


ON_STOP:

synthesizer_state( \"OFF\" );

IF I > 0
{
    save( File_2, mean_data / K );
}
";
    close $fh;

    my $text;
    if ( $? != 0 ) {
        if ( $? >> 8 == 255 ) {
            $text = "Internal error.";
        } elsif ( $? >> 8 == 1 ) {
            $text = "Someone else is running fsc2.";
        } elsif ( $? >> 8 == 2 ) {
            $text = "fsc2 is already testing or\nrunning an experiment.";
        } elsif ( $? >> 8 == 3 ) {
            $text = "Internal error of fsc2.";
        } elsif ( $? >> 8 == 4 ) {
            $text = "Could not start fsc2.";
        } else {
            $text = "Something strange\nis going on here.";
        }

        &show_message( $text ) if $? >> 8 != 0;
    }
}


################################################################

sub show_message {
    my $text = shift;

    $fsc2_main_window->messageBox( -icon => 'error',
                                   -type => 'Ok',
                                   -title => 'Error',
                                   -message => $text );
}


################################################################

sub store_defs {
    my $fh;
    my $name = $0;

    $name =~ s|^.*?([^/]+)$|$1|;
    mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
    open( $fh, ">$ENV{ HOME }/.fsc2/$name" ) or return;
    print $fh "# Do not edit - created automatically!\n";

    if ( $START_FREQ{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $START_FREQ{ max } ? $START_FREQ{ max } >= $START_FREQ{ value } : 1 ) and
         ( defined $START_FREQ{ min } ? $START_FREQ{ min } <= $START_FREQ{ value } : 1 ) ) {
        print $fh "$START_FREQ{ value }\n";
    } else {
        print $fh "500\n";
    }

    if ( $END_FREQ{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $END_FREQ{ max } ? $END_FREQ{ max } >= $END_FREQ{ value } : 1 ) and
         ( defined $END_FREQ{ min } ? $END_FREQ{ min } <= $END_FREQ{ value } : 1 ) ) {
        print $fh "$END_FREQ{ value }\n";
    } else {
        print $fh "600\n";
    }

    if ( $STEP_FREQ{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $STEP_FREQ{ max } ? $STEP_FREQ{ max } >= $STEP_FREQ{ value } : 1 ) and
         ( defined $STEP_FREQ{ min } ? $STEP_FREQ{ min } <= $STEP_FREQ{ value } : 1 ) ) {
        print $fh "$STEP_FREQ{ value }\n";
    } else {
        print $fh "200\n";
    }

    if ( $ATTENUATION{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $ATTENUATION{ max } ? $ATTENUATION{ max } >= $ATTENUATION{ value } : 1 ) and
         ( defined $ATTENUATION{ min } ? $ATTENUATION{ min } <= $ATTENUATION{ value } : 1 ) ) {
        print $fh "$ATTENUATION{ value }\n";
    } else {
        print $fh "-20\n";
    }

    if ( $MOD_FREQ{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $MOD_FREQ{ max } ? $MOD_FREQ{ max } >= $MOD_FREQ{ value } : 1 ) and
         ( defined $MOD_FREQ{ min } ? $MOD_FREQ{ min } <= $MOD_FREQ{ value } : 1 ) ) {
        print $fh "$MOD_FREQ{ value }\n";
    } else {
        print $fh "19\n";
    }

    if ( $MOD_AMPL{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $MOD_AMPL{ max } ? $MOD_AMPL{ max } >= $MOD_AMPL{ value } : 1 ) and
         ( defined $MOD_AMPL{ min } ? $MOD_AMPL{ min } <= $MOD_AMPL{ value } : 1 ) ) {
        print $fh "$MOD_AMPL{ value }\n";
    } else {
        print $fh "80\n";
    }

    if ( $CURR{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $CURR{ max } ? $CURR{ max } >= $CURR{ value } : 1 ) and
         ( defined $CURR{ min } ? $CURR{ min } <= $CURR{ value } : 1 ) ) {
        print $fh "$CURR{ value }\n";
    } else {
        print $fh "0.0\n";
    }

    if ( $NUM_RUNS{ value } =~ /^[+-]?\d+$/o and
         ( defined $NUM_RUNS{ max } ? $NUM_RUNS{ max } >= $NUM_RUNS{ value } : 1 ) and
         ( defined $NUM_RUNS{ min } ? $NUM_RUNS{ min } <= $NUM_RUNS{ value } : 1 ) ) {
        print $fh "$NUM_RUNS{ value }\n";
    } else {
        print $fh "20\n";
    }

    print $fh "$LOCKIN{ value }\n";

    print $fh "$TC{ value }\n";

    print $fh "$SENS{ value }\n";

    print $fh "$fsc2_how_to_run\n";

	print $fh "$geom\n" if defined $geom;

    close $fh;
};


################################################################

sub load_defs {
    my $fh;
    my $name = $0;
    my $ne;
    my $found;

    $name =~ s|^.*?([^/]+)$|$1|;
    if ( $ARGV[ 0 ] ) {
        open( $fh, "<$ARGV[ 0 ]" ) or return;
    } else {
        open( $fh, "<$ENV{ HOME }/.fsc2/$name" ) or return;
    }

    goto done_reading unless defined( $ne = <$fh> ) and $ne =~ /^#/;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $START_FREQ{ max } and $ne > $START_FREQ{ max } ) or
                         ( defined $START_FREQ{ min } and $ne < $START_FREQ{ min } );
    $START_FREQ{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $END_FREQ{ max } and $ne > $END_FREQ{ max } ) or
                         ( defined $END_FREQ{ min } and $ne < $END_FREQ{ min } );
    $END_FREQ{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $STEP_FREQ{ max } and $ne > $STEP_FREQ{ max } ) or
                         ( defined $STEP_FREQ{ min } and $ne < $STEP_FREQ{ min } );
    $STEP_FREQ{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $ATTENUATION{ max } and $ne > $ATTENUATION{ max } ) or
                         ( defined $ATTENUATION{ min } and $ne < $ATTENUATION{ min } );
    $ATTENUATION{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $MOD_FREQ{ max } and $ne > $MOD_FREQ{ max } ) or
                         ( defined $MOD_FREQ{ min } and $ne < $MOD_FREQ{ min } );
    $MOD_FREQ{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $MOD_AMPL{ max } and $ne > $MOD_AMPL{ max } ) or
                         ( defined $MOD_AMPL{ min } and $ne < $MOD_AMPL{ min } );
    $MOD_AMPL{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $CURR{ max } and $ne > $CURR{ max } ) or
                         ( defined $CURR{ min } and $ne < $CURR{ min } );
    $CURR{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?\d+$/;
    chomp $ne;
    goto done_reading if ( defined $NUM_RUNS{ max } and $ne > $NUM_RUNS{ max } ) or
                         ( defined $NUM_RUNS{ min } and $ne < $NUM_RUNS{ min } );
    $NUM_RUNS{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @LOCKIN ) {
        if ( $ne eq $_) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $LOCKIN{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @TC ) {
        if ( $ne eq $_) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $TC{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @SENS ) {
        if ( $ne eq $_) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $SENS{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @fsc2_how_to_run ) {
        if ( $ne eq $_) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $fsc2_how_to_run = $ne;

    goto done_reading unless defined( $ne = <$fh> )
							 and $ne =~ /^\s*([+-]\d+[+-]\d+)\s*$/;
	$geom = $1;

  done_reading:
    close $fh;
};
