#!/usr/bin/perl -w

# $Id$

use strict;
use Tk;

my $lockin		= 'SR810';
my $start_field = '';
my $end_field	= '';
my $field_step	= '';
my $num_runs	= 1;
my $tc			= "Don't set";
my $sens		= "Don't set";
my $how			= 'Start experiment';
my $bridge		= 'cw';


my %fp = ( '-side' => 'top',
		   '-fill' => 'x',
		   '-padx' => '2m',
		   '-pady' => '2m' );

my %wp = ( '-side' => 'left',
		   '-fill' => 'x',
		   '-padx' => '3m',
		   '-expand' => 1 );

# Create all the graphic stuff

my $mw = MainWindow->new( );

my $f0 = $mw->Frame( );
my $f0_l1 = $f0->Label( '-text' => 'Bridge:',
						'-width' => '20',
						'anchor' => 'w' );
my $f0_m = $f0->Optionmenu( '-options' => [ ( 'cw', 'pulsed' ) ],
							'-width' => 9,
							'-variable' => \$bridge );
$f0->pack( %fp );
$f0_l1->pack( %wp );
$f0_m->pack( %wp );


my $f1 = $mw->Frame( );
my $f1_l1 = $f1->Label( '-text' => 'Start field:',
						'-width' => '20',
						'anchor' => 'w' );
my $f1_v = $f1->Entry( '-textvariable' => \$start_field,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief' => 'sunken' );
my $f1_l2 = $f1->Label( '-text' => 'G',
						'-width' => 1 );

$f1->pack( %fp );
$f1_l1->pack( %wp );
$f1_v->pack( %wp );
$f1_l2->pack( %wp );


my $f2 = $mw->Frame( );
my $f2_l1 = $f2->Label( '-text' => 'End field:',
						'-width' => '20',
						'anchor' => 'w' );
my $f2_v = $f2->Entry( '-textvariable' => \$end_field,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief' => 'sunken' );
my $f2_l2 = $f2->Label( '-text' => 'G',
						'-width' => 1 );

$f2->pack( %fp );
$f2_l1->pack( %wp );
$f2_v->pack( %wp );
$f2_l2->pack( %wp );



my $f3 = $mw->Frame( );
my $f3_l1 = $f3->Label( '-text' => 'Field step size:',
						'-width' => '20',
						'anchor' => 'w' );
my $f3_v = $f3->Entry( '-textvariable' => \$field_step,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief' => 'sunken' );
my $f3_l2 = $f3->Label( '-text' => 'G',
						'-width' => 1 );

$f3->pack( %fp );
$f3_l1->pack( %wp );
$f3_v->pack( %wp );
$f3_l2->pack( %wp );



my $f4 = $mw->Frame( );
my $f4_l1 = $f4->Label( '-text' => 'Number of runs:',
						'-width' => '20',
						'anchor' => 'w' );
my $f4_v = $f4->Entry( '-textvariable' => \$num_runs,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief' => 'sunken' );
my $f4_l2 = $f4->Label( '-text' => ' ',
						'-width' => 1 );

$f4->pack( %fp );
$f4_l1->pack( %wp );
$f4_v->pack( %wp );
$f4_l2->pack( %wp );



my $f5 = $mw->Frame( );
my $f5_l = $f5->Label( '-text' => 'Lock-in amplifier:',
						'-width' => '20',
						'anchor' => 'w' );
my $f5_m = $f5->Optionmenu( '-options' =>
							[ ( 'SR510', 'SR530', 'SR810', 'SR830' ) ],
							'-width' => 9,
							'-variable' => \$lockin );
$f5->pack( %fp );
$f5_l->pack( %wp );
$f5_m->pack( %wp );



my $f6 = $mw->Frame( );
my $f6_l = $f6->Label( '-text' => 'Time constant:',
					   '-width' => '20',
					   'anchor' => 'w' );
my $f6_m = $f6->Optionmenu( '-options' =>
							[ ( "Don't set", '100 s', ' 30 s', ' 10 s',
								'  3 s', '	1 s', '300 ms', '100 ms', ' 30 ms',
								' 10 ms', '	 3 ms', '  1 ms' ) ],
							'-width' => 9,
							'-variable' => \$tc );
$f6->pack( %fp );
$f6_l->pack( %wp );
$f6_m->pack( %wp );


my $f7 = $mw->Frame( );
my $f7_l = $f7->Label( '-text' => 'Sensitivity:',
						'-width' => '20',
						'anchor' => 'w' );
my $f7_m = $f7->Optionmenu( '-options' =>
							[ ( "Don't set", '500 mV', '200 mV', '100 mV',
								' 50 mV', ' 20 mV', ' 10 mV', '	 5 mv',
								'  2 mV', '	 1 mV', '500 uV', '200 uV',
								'100 uV', ' 50 uV', ' 20 uV', ' 10 uV',
								'  5 uV', '	 2 uV', '  1 uV',
								'500 nV', '200 nV', '100 nV', ' 50 nV',
								' 10 nV', '	 5 nV', '  2 nV', '	 1 nV' ) ],
							'-width' => 9,
							'-variable' => \$sens );
$f7->pack( %fp );
$f7_l->pack( %wp );
$f7_m->pack( %wp );


$mw->Optionmenu( '-options' => [ ( 'Start experiment', 'Test program',
								   'Load into fsc2' ) ],
				 '-variable' => \$how,
				 '-command' => \&write_out
			   )->pack( '-padx' => '3m',
						'-pady' => '3m' );



$mw->Button( '-text' => 'Quit',
			 '-command' => [ destroy => $mw ]
		   )->pack( '-padx' => '3m',
					'-pady' => '3m' );

MainLoop;

#############################################

sub is_numeric {

	my $new_val = shift;
	return $new_val =~ /^([0-9]+(\.[0-9]*)?)?$/;
}


#############################################

sub write_out {

return if &do_checks( ) != 0;

local *F;

my $how2;

$how2 = "start" if $how =~ /^Start/;
$how2 = "test"	if $how =~ /^Test/;
$how2 = "load"	if $how =~ /^Load/;

open( F, "|fsc2_$how2" ) or die "Can't find utility.\n";

print F
"DEVICES:\n\n";
print F "dg2020_b;\n" if $bridge =~ /pulsed/;
print F lc( $lockin ), ";\n";
print F "er035m_s;
aeg_x_band;\n\n\n";

print F
"VARIABLES:\n\nI";
print F ", J" if $num_runs != 1;
print F ";
start_field = $start_field G;
end_field = $end_field G;
field_step = ";
print F $end_field > $start_field ? $field_step : - $field_step;
print F " G;
N_points = ceil( abs( end_field - start_field ) / abs( field_step ) ) + 1;
data[ N_points ];
N_runs = $num_runs;\n";

if ( $num_runs != 1 ) {
	print F "new_data[ N_points ];\n";
}

if ( $tc eq "Don't set" ) {
	print F "tc;\n";
} else {
	print F "tc = $tc;\n";
}

print F
"\n\nASSIGNMENTS:\n
TIMEBASE:	  5 ns;
MICROWAVE:	  POD = 1, 2, 3, 4, 5, V_HIGH = 5 V, V_LOW = 0 V, INVERTED;
PHASE_SETUP:  MICROWAVE, CW: 5;\n" if $bridge =~ /pulsed/;


print F "\n\nPREPARATIONS:\n\n";
print F "pulser_cw_mode( );\n" if $bridge =~ /pulsed/;
print F "magnet_setup( start_field, field_step );\n";
print F "lockin_time_constant( tc );\n" if $tc ne "Don't set";
print F "lockin_sensitivity( $sens );\n" if $sens ne "Don't set";
print F "init_1d( ";
print F $num_runs == 1 ? "1" : "3";
print F ", N_points, start_field, field_step, \"Magnetic field / G\",
		 \"Signal / V\" );\n\n\n";

print F
"EXPERIMENT:\n
fsave( \"% Field:\\n\"
	   \"%	 Start:			# G\\n\"
	   \"%	 End:			# G\\n\"
	   \"%	 Step size:		# G\\n\"
	   \"% Lock-In: \\n\"
	   \"%	 Sensitivity:	# V\\n\"
	   \"%	 Time constant: # s\\n\"
	   \"%	 Phase:			# degree\\n\"
	   \"% Number of runs:	#\\n\",
	   start_field, start_field + ( N_points - 1 ) * field_step, field_step,
	   lockin_sensitivity( ), lockin_time_constant( ), lockin_phase( ),
	   N_runs );
save_comment( \"% \" );
save_program( \"% \" );\n\n";

print F "tc = lockin_time_constant( );\n\n" if $tc eq "Don't set";
if ( $num_runs != 1 ) {
	print F
"FOR J = 1 : N_runs \{

	print( \"Starting #. run out of #\\n\", J, N_runs );

	FOR I = 1 : N_points \{

		new_data[ I ] = lockin_get_data( );

		fsave( \"# #\\n\", start_field + ( I - 1 ) * field_step, new_data[ I ] );

		display( I, ( data[ I ] + new_data[ I ] ) / float( J ), 1 );
		display( I, new_data[ I ], 3 );

		IF ( I < N_points ) \{
			sweep_up( );
			wait( tc );
		\}
	\}

	data += new_data;
	clear_curve( 1, 3 );
	display( 1, data / float( J ), 2 );

	fsave( \"\\n\" );
	IF ( J < N_runs ) \{
		reset_field( );
		wait( tc );
	\}
\}


ON_STOP:

fsave( \"\\n\" );
FOR I = 1 : N_points \{
	fsave( \"# #\\n\", start_field + ( I - 1 ) * field_step, data[ I ] );
\}
";
} else {
	print F
"FOR I = 1 : N_points \{
	data[ I ] = lockin_get_data( );
	fsave( \"# #\\n\", start_field + ( I - 1 ) * field_step, data[ I ] );
	display( I, data[ I ] );
	IF ( I < N_points ) \{
		sweep_up( );
		wait( tc );
	\}
\}";
}
}


#############################################

sub do_checks {

	if ( $start_field =~ /^$/ ) {
		&show_message( "Start field hasn't been set." );
		return -1;
	}

	if ( $start_field < 1460 ) {
		&show_message( "Start field is too low." );
		return -1;
	}

	if ( $start_field > 19900 ) {
		&show_message( "Start field is too high." );
	}

	if ( $end_field =~ /^$/ ) {
		&show_message( "End field hasn't been set." );
		return -1;
	}

	if ( $end_field < 1460 ) {
		&show_message( "End field is too low." );
		return -1;
	}

	if ( $end_field > 19900 ) {
		&show_message( "End field is too high." );
		return -1;
	}

	if ( $field_step =~ /^$/ ) {
		&show_message( "Field step size hasn't been set." );
		return -1;
	}

	if ( abs( $field_step ) > abs( $end_field - $start_field ) ) {
		&show_message( "Field step size larger than\n" .
					   "difference between start and\n" .
					   "end field." );
		return -1;
	}

	if ( $num_runs =~ /^$/ ) {
		&show_message( "Number of runs hasn't been\n" .
					   "set, defaulting to 1." );
		$num_runs = 1;
	}

	if ( $num_runs < 1 ) {
		&show_message( "Invalid number of runs." );
		return -1;
	}

	return 0;
}


#############################################

sub show_message {
	my $text = shift;

	$mw->messageBox( '-icon' => 'error',
					 '-type' => 'Ok',
					 '-title' => 'Error',
					 '-message' => $text );
}
