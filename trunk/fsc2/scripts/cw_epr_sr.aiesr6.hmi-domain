#!/usr/bin/perl
# -*- cperl -*-
# Generated by fsc2_guify from cw_epr_sr.EDL on Wed Aug  6 19:24:04 CEST 2008

use strict;
use warnings;
use Tk;
use Tk::Balloon;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
    if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my %fp = ( -side => 'top',
           -fill => 'x',
           -padx => '2m',
           -pady => '2m' );
my %wp = ( -side => 'left',
           -fill => 'x',
           -expand => 1 );
my %up = ( -side => 'left' );
my $geom;

my $fsc2_how_to_run = "Test program";
my @fsc2_how_to_run = ( "Start experiment",
                        "Test program",
                        "Load into fsc2" );
my $fsc2_main_window = MainWindow->new( -title =>
                               ( split /\./, ( split /\//, $0 )[ -1 ] )[ 0 ] );
my $fsc2_main_frame = $fsc2_main_window->Frame( -relief => "ridge",
                                                -borderwidth => "1m" );
my $fsc2_balloon = $fsc2_main_frame->Balloon( );
my $fsc2_apply_frame = $fsc2_main_window->Frame( );
my $fsc2_apply_button = $fsc2_apply_frame->Button( -text => "Apply",
                                                   -command => \&write_out );
$fsc2_apply_button->bind( "all", "<Alt-a>" => \&write_out );
my $fsc2_quit_button = $fsc2_apply_frame->Button( -text => "Quit",
                 -command => sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                   $geom = $1;
                                   &store_defs;
                                   $fsc2_main_window->destroy } );
$fsc2_quit_button->bind( "all",
                         "<Alt-q>" =>
                                sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                      $geom = $1;
                                      &store_defs;
                                      $fsc2_main_window->destroy } );
$fsc2_apply_frame->pack( -side => "bottom",
                         -fill => "x",
                         -padx => "4m" );

# === START_FIELD float [ -50 : 23000 ] [ 3000 ] "Start field" "G"

my %START_FIELD;
$START_FIELD{ tk_frame } = $fsc2_main_frame->Frame( );
$START_FIELD{ tk_label } = $START_FIELD{ tk_frame }->Label( -text => "Start field",
-width => 20,
-anchor => 'w' );
$START_FIELD{ value } = 3000;
$START_FIELD{ min } = -50;
$START_FIELD{ max } = 23000;
$START_FIELD{ tk_entry } = $START_FIELD{ tk_frame }->Entry( -textvariable => \$START_FIELD{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $START_FIELD{ min } ? $START_FIELD{ min } : undef ),
( defined $START_FIELD{ max } ? $START_FIELD{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $START_FIELD{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $START_FIELD{ min } ? $START_FIELD{ min } : '-inf' ) .
" : " . ( defined $START_FIELD{ max } ? $START_FIELD{ max } : '+inf' ) . " ]" );
$START_FIELD{ tk_unit } = $START_FIELD{ tk_frame }->Label( -text => "G",
-width => 5 );
$START_FIELD{ tk_frame }->pack( %fp );
$START_FIELD{ tk_label }->pack( %wp );
$START_FIELD{ tk_entry }->pack( %wp );
$START_FIELD{ tk_unit  }->pack( %up );

# === END_FIELD float [ -50 : 23000 ] [ 3500 ] "End field" "G"

my %END_FIELD;
$END_FIELD{ tk_frame } = $fsc2_main_frame->Frame( );
$END_FIELD{ tk_label } = $END_FIELD{ tk_frame }->Label( -text => "End field",
-width => 20,
-anchor => 'w' );
$END_FIELD{ value } = 3500;
$END_FIELD{ min } = -50;
$END_FIELD{ max } = 23000;
$END_FIELD{ tk_entry } = $END_FIELD{ tk_frame }->Entry( -textvariable => \$END_FIELD{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $END_FIELD{ min } ? $END_FIELD{ min } : undef ),
( defined $END_FIELD{ max } ? $END_FIELD{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $END_FIELD{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $END_FIELD{ min } ? $END_FIELD{ min } : '-inf' ) .
" : " . ( defined $END_FIELD{ max } ? $END_FIELD{ max } : '+inf' ) . " ]" );
$END_FIELD{ tk_unit } = $END_FIELD{ tk_frame }->Label( -text => "G",
-width => 5 );
$END_FIELD{ tk_frame }->pack( %fp );
$END_FIELD{ tk_label }->pack( %wp );
$END_FIELD{ tk_entry }->pack( %wp );
$END_FIELD{ tk_unit  }->pack( %up );

# === FIELD_STEP float [ 0.001 : 1600 ] [ 1 ] "Field step size" "G"

my %FIELD_STEP;
$FIELD_STEP{ tk_frame } = $fsc2_main_frame->Frame( );
$FIELD_STEP{ tk_label } = $FIELD_STEP{ tk_frame }->Label( -text => "Field step size",
-width => 20,
-anchor => 'w' );
$FIELD_STEP{ value } = 1;
$FIELD_STEP{ min } = 0.001;
$FIELD_STEP{ max } = 1600;
$FIELD_STEP{ tk_entry } = $FIELD_STEP{ tk_frame }->Entry( -textvariable => \$FIELD_STEP{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } : undef ),
( defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $FIELD_STEP{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } : '-inf' ) .
" : " . ( defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } : '+inf' ) . " ]" );
$FIELD_STEP{ tk_unit } = $FIELD_STEP{ tk_frame }->Label( -text => "G",
-width => 5 );
$FIELD_STEP{ tk_frame }->pack( %fp );
$FIELD_STEP{ tk_label }->pack( %wp );
$FIELD_STEP{ tk_entry }->pack( %wp );
$FIELD_STEP{ tk_unit  }->pack( %up );

# === NUM_SCANS int [ 0 : ][ 0 ] "Number of scans"

my %NUM_SCANS;
$NUM_SCANS{ tk_frame } = $fsc2_main_frame->Frame( );
$NUM_SCANS{ tk_label } = $NUM_SCANS{ tk_frame }->Label( -text => "Number of scans",
-width => 20,
-anchor => 'w' );
$NUM_SCANS{ value } = 0;
$NUM_SCANS{ min } = 0;
$NUM_SCANS{ max } = undef;
$NUM_SCANS{ tk_entry } = $NUM_SCANS{ tk_frame }->Entry( -textvariable => \$NUM_SCANS{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ int_check( shift,
( defined $NUM_SCANS{ min } ? $NUM_SCANS{ min } : undef ),
( defined $NUM_SCANS{ max } ? $NUM_SCANS{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $NUM_SCANS{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $NUM_SCANS{ min } ? $NUM_SCANS{ min } : '-inf' ) .
" : " . ( defined $NUM_SCANS{ max } ? $NUM_SCANS{ max } : '+inf' ) . " ]" );
$NUM_SCANS{ tk_unit } = $NUM_SCANS{ tk_frame }->Label( -text => "",
-width => 5 );
$NUM_SCANS{ tk_frame }->pack( %fp );
$NUM_SCANS{ tk_label }->pack( %wp );
$NUM_SCANS{ tk_entry }->pack( %wp );
$NUM_SCANS{ tk_unit  }->pack( %up );

# === FACTOR float [ 1.0e-3 : 100 ] [ 1.0  ] "Waiting time"  "* tc"

my %FACTOR;
$FACTOR{ tk_frame } = $fsc2_main_frame->Frame( );
$FACTOR{ tk_label } = $FACTOR{ tk_frame }->Label( -text => "Waiting time",
-width => 20,
-anchor => 'w' );
$FACTOR{ value } = 1.0;
$FACTOR{ min } = 1.0e-3;
$FACTOR{ max } = 100;
$FACTOR{ tk_entry } = $FACTOR{ tk_frame }->Entry( -textvariable => \$FACTOR{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $FACTOR{ min } ? $FACTOR{ min } : undef ),
( defined $FACTOR{ max } ? $FACTOR{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $FACTOR{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $FACTOR{ min } ? $FACTOR{ min } : '-inf' ) .
" : " . ( defined $FACTOR{ max } ? $FACTOR{ max } : '+inf' ) . " ]" );
$FACTOR{ tk_unit } = $FACTOR{ tk_frame }->Label( -text => "* tc",
-width => 5 );
$FACTOR{ tk_frame }->pack( %fp );
$FACTOR{ tk_label }->pack( %wp );
$FACTOR{ tk_entry }->pack( %wp );
$FACTOR{ tk_unit  }->pack( %up );

# === CHANNELS menu [ "X only", "X and Y" ] [ 2 ] "Lock-In channel(s)"

my %CHANNELS;
$CHANNELS{ tk_frame } = $fsc2_main_frame->Frame( );
$CHANNELS{ tk_label } = $CHANNELS{ tk_frame }->Label( -text => "Lock-In channel(s)",
-width => 20,
-anchor => 'w' );
$CHANNELS{ value } = "X and Y";
my @CHANNELS = ( "X only", "X and Y" );
$CHANNELS{ tk_entry } = $CHANNELS{ tk_frame }->Optionmenu( -options => \@CHANNELS,
-width => 10,
-textvariable => \$CHANNELS{ value } );
$CHANNELS{ tk_unit } = $CHANNELS{ tk_frame }->Label( -text => "",
-width => 5 );
$CHANNELS{ tk_frame }->pack( %fp );
$CHANNELS{ tk_label }->pack( %wp );
$CHANNELS{ tk_entry }->pack( %wp );
$CHANNELS{ tk_unit  }->pack( %up );

$fsc2_main_frame->pack( %fp, -pady => '1m' );
$fsc2_main_window->Optionmenu( -options => \@fsc2_how_to_run,
                                -textvariable => \$fsc2_how_to_run,
                              )->pack( -padx => '3m',
                                       -pady => '3m' );

$fsc2_apply_button->pack( %wp, -padx => '5m', -pady => '3m' );
$fsc2_quit_button->pack(  %wp, -padx => '5m', -pady => '3m' );

load_defs( );
$fsc2_main_window->geometry( $geom ) if defined $geom;
MainLoop;


################################################################

sub int_check {
    my ( $new, $min, $max ) = @_;

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $fsc2_apply_button->configure( -state => 'normal' );
     }
     return 1;
}


################################################################

sub float_check {
    my ( $new, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $fsc2_apply_button->configure( -state => 'normal' );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

     return 0;
}


################################################################

sub write_out {
    my $fh;

    open( $fh, "|fsc2_" . lc $fsc2_how_to_run )
        or die "Can't find utility fsc2_" . lc $fsc2_how_to_run . ".\n";

    my $START_FIELD = $START_FIELD{ value };
    my $END_FIELD = $END_FIELD{ value };
    my $FIELD_STEP = $FIELD_STEP{ value };
    my $NUM_SCANS = $NUM_SCANS{ value };
    my $FACTOR = $FACTOR{ value };
    my $CHANNELS = $CHANNELS{ value };

    print $fh "DEVICES:

er032m;
sr830;
eip371;


VARIABLES:

start_field = $START_FIELD G;
end_field   = $END_FIELD G;
field_step  = $FIELD_STEP G;
Num_Points = int( abs( end_field - start_field ) / field_step ) + 1;
field[ Num_Points ];
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "data[ Num_Points ];
avg_data[ Num_Points ];
";
# === else
    } else {
        print $fh "data[ 2, Num_Points ];
avg_data[ 2, Num_Points ];
li_data[ 2 ];
";
# === endif
    }

    print $fh "Files[ 2 ];
tc;
factor = $FACTOR;
I, J, K;
Scans_Done = 0;
Scans_Written = 0;
freq[ 2 ];
avg_freq = 0.0;
Stop_Button;
Scan_No;
TT;


PREPARATIONS:


magnet_setup( start_field, field_step );
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "init_1d( 2, Num_Points, start_field, field_step, \"Field [G]\", \"Signal [uV]\" );
";
# === else
    } else {
        print $fh "init_1d( 2, Num_Points, end_field, field_step, \"Field [G]\", \"Signal [uV]\" );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "init_1d( 4, Num_Points, start_field, field_step, \"Field [G]\", \"Signal [uV]\" );
";
# === else
    } else {
        print $fh "init_1d( 4, Num_Points, end_field, field_step, \"Field [G]\", \"Signal [uV]\" );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "
EXPERIMENT:

start_field = magnet_field( );
field[ 1 ] = start_field;
field_step = magnet_field_step_size( field_step );
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "end_field = start_field + ( Num_Points - 1 ) * field_step;
change_scale_1d( start_field, field_step );
";
# === else
    } else {
        print $fh "end_field = start_field - ( Num_Points - 1 ) * field_step;
change_scale_1d( end_field, field_step );
";
# === endif
    }

    print $fh "tc = lockin_time_constant( );

Files[ 1 ] = get_file( \"\", \"*.avg\", \"\", \"\", \"avg\" );
Files[ 2 ] = clone_file( Files[ 1 ], \"avg\", \"scans\" );

hide_toolbox( \"ON\" );
Scan_No = output_create( \"INT_OUTPUT\", 0, \"Scan Number\" );
Stop_Button = button_create( \"PUSH_BUTTON\", \"Stop after end of scan\" );
hide_toolbox( \"OFF\" );

IF $NUM_SCANS > 0 {
   TT = ceil( $NUM_SCANS * Num_Points * factor * tc );
   print( \"Minimum experiment duration: #:# min\\n\", TT / 60, TT % 60 );
}

I = 0;
FOREVER {
	I += 1;
	output_value( Scan_No, I );
	freq[ 1 ] = freq_counter_measure( );
	FOR J = 1 : Num_Points {
        K = Num_Points - I + 1;
		wait( factor * tc );
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	    data[ J ] = lockin_get_data( );
        display_1d( J, data[ J ] / 1 uV, 1,
					J, add_to_average( avg_data[ J ], data[ J ], I ) / 1 uV,
					2 );
		IF J < Num_Points {
			field[ J + 1 ] = magnet_sweep_up( );
		}
";
# === else
    } else {
        print $fh "	    data[ K ] = lockin_get_data( );
        display_1d( K, data[ K ] / 1 uV, 1,
					K, add_to_average( avg_data[ K ], data[ K ], I ) / 1 uV,
					2 );
		IF K < Num_Points {
			field[ J + 1 ] = magnet_sweep_down( );
		}
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "	    li_data = lockin_get_data( 1, 2 );
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	    data[ 1, J ] = li_data[ 1 ];
	    data[ 2, J ] = li_data[ 2 ];
        display_1d( J, data[ 1, J ] / 1 uV, 1,
		            J, data[ 2, J ] / 1 uV, 2,
					J,
					add_to_average( avg_data[ 1, J ], data[ 1, J ], I ) / 1 uV,
					3,
					J,
					add_to_average( avg_data[ 2, J ], data[ 2, J ], I ) / 1 uV,
					4 );
		IF J < Num_Points {
			field[ J + 1 ] = magnet_sweep_up( );
		}
";
# === else
    } else {
        print $fh "	    data[ 1, K ] = li_data[ 1 ];
	    data[ 2, K ] = li_data[ 2 ];
        display_1d( K, data[ 1, K ] / 1 uV, 1,
					K, data[ 2, K ] / 1 uV, 2,
					K,
					add_to_average( avg_data[ 1, K ], data[ 1, K ], I ) / 1 uV,
					3,
					K,
					add_to_average( avg_data[ 2, K ], data[ 2, K ], I ) / 1 uV,
					4);
		IF K < Num_Points {
			field[ J + 1 ] = magnet_sweep_down( );
		}
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "	}

	freq[ 2 ] = freq_counter_measure( );
	avg_freq = add_to_average( avg_freq, 0.5 * ( freq[ 1 ] + freq[ 2 ] ), I );

	fsave( Files[ 2 ], \"\\# Scan: #, MW freq. = # GHz (# GHz, # GHz)\\n\\n\",
		   I, 0.5 * ( freq[ 1 ] + freq[ 2 ] ) / 1 GHz,
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "		   freq[ 1 ] / 1 GHz, freq[ 2 ] / 1 GHz );
";
# === else
    } else {
        print $fh "		   freq[ 2 ] / 1 GHz, freq[ 1 ] / 1 GHz );
";
# === endif
    }

    print $fh "
    FOR K = 1 : Num_Points {
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	    fsave( Files[ 2 ], \"#, #\\n\", field[ K ], data[ K ] );
";
# === else
    } else {
        print $fh "	    fsave( Files[ 2 ], \"#, #\\n\", field[ Num_Points - K + 1 ], data[ K ] );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	    fsave( Files[ 2 ], \"#, #, #\\n\",
		       field[ K ], data[ 1, K ], data[ 2, K ] );
";
# === else
    } else {
        print $fh "	    fsave( Files[ 2 ], \"#, #, #\\n\",
		       field[ Num_Points - K + 1 ], data[ 1, K ], data[ 2, K ] );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "	}
    fsave( Files[ 2 ], \"\\n\" );
	Scans_Written = 1;

	avg_data = add_to_average( avg_data, data, I );
	Scans_Done += 1;
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "	display_1d( 1, avg_data / 1 uV, 2 );
";
# === else	
    } else {
        print $fh "	display_1d( 1, avg_data[ 1 ] / 1 uV, 3,
	            1, avg_data[ 2 ] / 1 uV, 4 );
";
# ===endif
    }

    print $fh "
    IF button_state( Stop_Button ) OR Scans_Done == $NUM_SCANS {
        BREAK;
    }
	magnet_reset_field( );
	field[ 1 ] = magnet_field( );
}

ON_STOP:

hide_toolbox( \"ON\" );

IF ! Scans_Written {
    Num_Points = J - 1;
	IF Num_Points <= 1 {
		abort( );
	}

	freq[ 2 ] = freq_counter_measure( );
	avg_freq = 0.5 * ( freq[ 1 ] + freq[ 2 ] );

	fsave( Files[ 2 ], \"\\# Scan: 1, MW freq. = # GHz (# GHz, # GHz)\\n\\n\",
		   0.5 * ( freq[ 1 ] + freq[ 2 ] ) / 1 GHz,
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "		   freq[ 1 ] / 1 GHz, freq[ 2 ] / 1 GHz );
";
# === else
    } else {
        print $fh "		   freq[ 2 ] / 1 GHz, freq[ 1 ] / 1 GHz );
";
# === endif
    }

    print $fh "
	FOR K = 1 : Num_Points {
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	    fsave( Files[ 2 ], \"#, #\\n\", field[ K ], data[ K ] );
";
# === else
    } else {
        print $fh "	    fsave( Files[ 2 ], \"#, #\\n\", field[ Num_Points - K + 1 ], data[ K ] );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	    fsave( Files[ 2 ], \"#, #, #\\n\",
		       field[ K ], data[ 1, K ], data[ 2, K ] );
";
# === else
    } else {
        print $fh "	    fsave( Files[ 2 ], \"#, #, #\\n\",
		       field[ Num_Points - K + 1 ], data[ 1, K ], data[ 2, K ] );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "	}
    fsave( Files[ 2 ], \"\\n\" );
	avg_data = data;
	Scans_Done = 1;
}

FOR K = 1 : 2 {
    fsave( Files[ K ], \"\\# Date             : # #\\n\"
                       \"\\# Start field      = # G\\n\"
                       \"\\# End field        = # G\\n\"
                       \"\\# Field step size  = # G\\n\"
					   \"\\# Number of points = #\\n\"
                       \"\\# No. of scans     = #\\n\"
					   \"\\# MW frequency     = # GHz\\n\"
					   \"\\# Lockin-In        = Stanford Research SR830\\n\"
                       \"\\# Sensitivity      = # mV\\n\"
                       \"\\# Time constant    = # ms\\n\"
					   \"\\# Waiting factor   = #\\n\"
					   \"\\# Modulation ampl. = # V\\n\"
					   \"\\# Modulation freq. = # kHz\\n\"
					   \"\\# Phase            = #\\n\",
           date( ), time( ), start_field,
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	   	   start_field + ( Num_Points - 1 ) * field_step, field_step,
";
# === else
    } else {
        print $fh "	   	   start_field - ( Num_Points - 1 ) * field_step, - field_step,
";
# === endif
    }

    print $fh "	       Num_Points, Scans_Done, avg_freq / 1 GHz,
		   lockin_sensitivity( ) / 1 mV, tc / 1 ms, factor,
	       lockin_ref_level( ), lockin_ref_freq( ) / 1kHz, lockin_phase( ) );
}

save_comment( Files[ 1 ], \"# \", \"Sample: \\nTemperature: \\nCavity: \" );

FOR K = 1 : Num_Points {
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	fsave( Files[ 1 ], \"#, #\\n\", field[ K ], avg_data[ K ] );
";
# === else
    } else {
        print $fh "	fsave( Files[ 1 ], \"#, #\\n\", field[ Num_Points - K + 1 ],
	       avg_data[ K ] );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "	fsave( Files[ 1 ], \"#, #, #\\n\", field[ K ], avg_data[ 1, K ],
		   avg_data[ 2, K ] );
";
# === else
    } else {
        print $fh "	fsave( Files[ 1 ], \"#, #, #\\n\", field[ Num_Points - K + 1 ],
	       avg_data[ 1, K ], avg_data[ 2, K ] );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "}
";
    close $fh;

    my $text;
    if ( $? != 0 ) {
        if ( $? >> 8 == 255 ) {
            $text = "Internal error.";
        } elsif ( $? >> 8 == 1 ) {
            $text = "Someone else is running fsc2.";
        } elsif ( $? >> 8 == 2 ) {
            $text = "fsc2 is already testing or\nrunning an experiment.";
        } elsif ( $? >> 8 == 3 ) {
            $text = "Internal error of fsc2.";
        } elsif ( $? >> 8 == 4 ) {
            $text = "Could not start fsc2.";
        } else {
            $text = "Something strange\nis going on here.";
        }

        &show_message( $text ) if $? >> 8 != 0;
    }
}


################################################################

sub show_message {
    my $text = shift;

    $fsc2_main_window->messageBox( -icon => 'error',
                                   -type => 'Ok',
                                   -title => 'Error',
                                   -message => $text );
}


################################################################

sub store_defs {
    my $fh;
    my $name = $0;

    $name =~ s|^.*?([^/]+)$|$1|;
    mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
    open( $fh, '>', $ENV{ HOME } . "/.fsc2/$name" ) or return;
    print $fh "# Do not edit - created automatically!\n";

    if (     $START_FIELD{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
         and (     defined $START_FIELD{ max } ? $START_FIELD{ max } >= $START_FIELD{ value } : 1 )
         and ( defined $START_FIELD{ min } ? $START_FIELD{ min } <= $START_FIELD{ value } : 1 ) ) {
        print $fh "$START_FIELD{ value }\n";
    } else {
        print $fh "3000\n";
    }

    if (     $END_FIELD{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
         and (     defined $END_FIELD{ max } ? $END_FIELD{ max } >= $END_FIELD{ value } : 1 )
         and ( defined $END_FIELD{ min } ? $END_FIELD{ min } <= $END_FIELD{ value } : 1 ) ) {
        print $fh "$END_FIELD{ value }\n";
    } else {
        print $fh "3500\n";
    }

    if (     $FIELD_STEP{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
         and (     defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } >= $FIELD_STEP{ value } : 1 )
         and ( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } <= $FIELD_STEP{ value } : 1 ) ) {
        print $fh "$FIELD_STEP{ value }\n";
    } else {
        print $fh "1\n";
    }

    if (     $NUM_SCANS{ value } =~ /^[+-]?\d+$/o
         and ( defined $NUM_SCANS{ max } ? $NUM_SCANS{ max } >= $NUM_SCANS{ value } : 1 )
         and ( defined $NUM_SCANS{ min } ? $NUM_SCANS{ min } <= $NUM_SCANS{ value } : 1 ) ) {
        print $fh "$NUM_SCANS{ value }\n";
    } else {
        print $fh "0\n";
    }

    if (     $FACTOR{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
         and (     defined $FACTOR{ max } ? $FACTOR{ max } >= $FACTOR{ value } : 1 )
         and ( defined $FACTOR{ min } ? $FACTOR{ min } <= $FACTOR{ value } : 1 ) ) {
        print $fh "$FACTOR{ value }\n";
    } else {
        print $fh "1.0\n";
    }

    print $fh "$CHANNELS{ value }\n";

    print $fh "$fsc2_how_to_run\n";

    print $fh "$geom\n" if defined $geom;

    close $fh;
};


################################################################

sub load_defs {
    my $fh;
    my $name = $0;
    my $ne;
    my $found;

    $name =~ s|^.*?([^/]+)$|$1|;
    if ( $ARGV[ 0 ] ) {
        open( $fh, '<', $ARGV[ 0 ] ) or return;
    } else {
        open( $fh, '<'. $ENV{ HOME } . "/.fsc2/$name" ) or return;
    }

    goto done_reading unless defined( $ne = <$fh> ) and $ne =~ /^#/;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $START_FIELD{ max } and $ne > $START_FIELD{ max } )
                         or ( defined $START_FIELD{ min } and $ne < $START_FIELD{ min } );
    $START_FIELD{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $END_FIELD{ max } and $ne > $END_FIELD{ max } )
                         or ( defined $END_FIELD{ min } and $ne < $END_FIELD{ min } );
    $END_FIELD{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $FIELD_STEP{ max } and $ne > $FIELD_STEP{ max } )
                         or ( defined $FIELD_STEP{ min } and $ne < $FIELD_STEP{ min } );
    $FIELD_STEP{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?\d+$/;
    chomp $ne;
    goto done_reading if    ( defined $NUM_SCANS{ max } and $ne > $NUM_SCANS{ max } )
                         or ( defined $NUM_SCANS{ min } and $ne < $NUM_SCANS{ min } );
    $NUM_SCANS{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $FACTOR{ max } and $ne > $FACTOR{ max } )
                         or ( defined $FACTOR{ min } and $ne < $FACTOR{ min } );
    $FACTOR{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @CHANNELS ) {
        if ( $ne eq $_ ) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $CHANNELS{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @fsc2_how_to_run ) {
        if ( $ne eq $_ ) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $fsc2_how_to_run = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^\s*([+-]\d+[+-]\d+)\s*$/;
    $geom = $1;

  done_reading:
    close $fh;
};
