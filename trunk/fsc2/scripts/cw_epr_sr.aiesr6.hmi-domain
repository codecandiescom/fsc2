#!/usr/bin/perl
# -*- cperl -*-
# Generated by fsc2_guify from cw_epr_sr.EDL on Mo 9. MÃ¤r 14:01:41 CET 2009

use strict;
use warnings;
use utf8;
use Tk;
use Tk::Balloon;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
    if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my %fp = ( -side => 'top',
           -fill => 'x',
           -padx => 10,
           -pady => 5 );
my %wp = ( -side   => 'left',
           -fill   => 'x',
           -expand => 1 );
my %up = ( -side => 'left' );
my $geom;

my @VARS;
my $fsc2_how_to_run = 'Test program';
my @fsc2_how_to_run = ( 'Start experiment',
                        'Test program',
                        'Load into fsc2' );
my $fsc2_main_window = MainWindow->new( -title =>
                               ( split /\./, ( split /\//, $0 )[ -1 ] )[ 0 ] );
my $fsc2_main_frame = $fsc2_main_window->Frame( -relief      => 'ridge',
                                                -borderwidth => 5 );
my $fsc2_balloon = $fsc2_main_frame->Balloon( );
my $fsc2_apply_frame = $fsc2_main_window->Frame( );
my $fsc2_apply_button = $fsc2_apply_frame->Button( -text    => 'Apply',
                                                   -command => \&write_out );
$fsc2_apply_button->bind( 'all', '<Alt-a>' => \&write_out );
my $fsc2_quit_button = $fsc2_apply_frame->Button( -text => 'Quit',
                 -command => sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                   $geom = $1;
                                   &store_defs;
                                   $fsc2_main_window->destroy } );
$fsc2_quit_button->bind( 'all',
                         '<Alt-q>' =>
                                sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                      $geom = $1;
                                      &store_defs;
                                      $fsc2_main_window->destroy } );
$fsc2_apply_frame->pack( -side => 'bottom',
                         -fill => 'x',
                         -padx => 20 );

# === START_FIELD float [ -50 : 23000 ] [ 3000 ] "Start field" "G"

my %START_FIELD;
push @VARS, \%START_FIELD;
$START_FIELD{ is_valid } = 1;
$START_FIELD{ type } = 'float';
$START_FIELD{ tk_frame } = $fsc2_main_frame->Frame( );
$START_FIELD{ tk_label } = $START_FIELD{ tk_frame }->Label( -text => "Start field",
-width => 20,
-anchor => 'w' );
$START_FIELD{ value } = 3000;

$START_FIELD{ min } = -50;
$START_FIELD{ max } = 23000;
$START_FIELD{ tk_entry } = $START_FIELD{ tk_frame }->Entry( -textvariable => \$START_FIELD{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift, \$START_FIELD{ is_valid },
( defined $START_FIELD{ min } ? $START_FIELD{ min } : undef ),
( defined $START_FIELD{ max } ? $START_FIELD{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $START_FIELD{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $START_FIELD{ min } ? $START_FIELD{ min } : '-inf' ) . ' : ' . ( defined $START_FIELD{ max } ? $START_FIELD{ max } : '+inf' ) . ' ]' . ( $START_FIELD{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$START_FIELD{ tk_unit } = $START_FIELD{ tk_frame }->Label( -text => "G",
-width => 5 );
$START_FIELD{ tk_frame }->pack( %fp );
$START_FIELD{ tk_label }->pack( %wp );
$START_FIELD{ tk_entry }->pack( %wp );
$START_FIELD{ tk_unit  }->pack( %up );

# === END_FIELD float [ -50 : 23000 ] [ 3500 ] "End field" "G"

my %END_FIELD;
push @VARS, \%END_FIELD;
$END_FIELD{ is_valid } = 1;
$END_FIELD{ type } = 'float';
$END_FIELD{ tk_frame } = $fsc2_main_frame->Frame( );
$END_FIELD{ tk_label } = $END_FIELD{ tk_frame }->Label( -text => "End field",
-width => 20,
-anchor => 'w' );
$END_FIELD{ value } = 3500;

$END_FIELD{ min } = -50;
$END_FIELD{ max } = 23000;
$END_FIELD{ tk_entry } = $END_FIELD{ tk_frame }->Entry( -textvariable => \$END_FIELD{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift, \$END_FIELD{ is_valid },
( defined $END_FIELD{ min } ? $END_FIELD{ min } : undef ),
( defined $END_FIELD{ max } ? $END_FIELD{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $END_FIELD{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $END_FIELD{ min } ? $END_FIELD{ min } : '-inf' ) . ' : ' . ( defined $END_FIELD{ max } ? $END_FIELD{ max } : '+inf' ) . ' ]' . ( $END_FIELD{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$END_FIELD{ tk_unit } = $END_FIELD{ tk_frame }->Label( -text => "G",
-width => 5 );
$END_FIELD{ tk_frame }->pack( %fp );
$END_FIELD{ tk_label }->pack( %wp );
$END_FIELD{ tk_entry }->pack( %wp );
$END_FIELD{ tk_unit  }->pack( %up );

# === FIELD_STEP float [ 0.001 : 1600 ] [ 1 ] "Field step size" "G"

my %FIELD_STEP;
push @VARS, \%FIELD_STEP;
$FIELD_STEP{ is_valid } = 1;
$FIELD_STEP{ type } = 'float';
$FIELD_STEP{ tk_frame } = $fsc2_main_frame->Frame( );
$FIELD_STEP{ tk_label } = $FIELD_STEP{ tk_frame }->Label( -text => "Field step size",
-width => 20,
-anchor => 'w' );
$FIELD_STEP{ value } = 1;

$FIELD_STEP{ min } = 0.001;
$FIELD_STEP{ max } = 1600;
$FIELD_STEP{ tk_entry } = $FIELD_STEP{ tk_frame }->Entry( -textvariable => \$FIELD_STEP{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift, \$FIELD_STEP{ is_valid },
( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } : undef ),
( defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $FIELD_STEP{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } : '-inf' ) . ' : ' . ( defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } : '+inf' ) . ' ]' . ( $FIELD_STEP{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$FIELD_STEP{ tk_unit } = $FIELD_STEP{ tk_frame }->Label( -text => "G",
-width => 5 );
$FIELD_STEP{ tk_frame }->pack( %fp );
$FIELD_STEP{ tk_label }->pack( %wp );
$FIELD_STEP{ tk_entry }->pack( %wp );
$FIELD_STEP{ tk_unit  }->pack( %up );

# === NUM_SCANS int [ 0 : ][ 0 ] "Number of scans"

my %NUM_SCANS;
push @VARS, \%NUM_SCANS;
$NUM_SCANS{ is_valid } = 1;
$NUM_SCANS{ type } = 'int';
$NUM_SCANS{ tk_frame } = $fsc2_main_frame->Frame( );
$NUM_SCANS{ tk_label } = $NUM_SCANS{ tk_frame }->Label( -text => "Number of scans",
-width => 20,
-anchor => 'w' );
$NUM_SCANS{ value } = 0;

$NUM_SCANS{ min } = 0;
$NUM_SCANS{ max } = undef;
$NUM_SCANS{ tk_entry } = $NUM_SCANS{ tk_frame }->Entry( -textvariable => \$NUM_SCANS{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ int_check( shift, \$NUM_SCANS{ is_valid },
( defined $NUM_SCANS{ min } ? $NUM_SCANS{ min } : undef ),
( defined $NUM_SCANS{ max } ? $NUM_SCANS{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $NUM_SCANS{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $NUM_SCANS{ min } ? $NUM_SCANS{ min } : '-inf' ) . ' : ' . ( defined $NUM_SCANS{ max } ? $NUM_SCANS{ max } : '+inf' ) . ' ]' . ( $NUM_SCANS{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$NUM_SCANS{ tk_unit } = $NUM_SCANS{ tk_frame }->Label( -text => "",
-width => 5 );
$NUM_SCANS{ tk_frame }->pack( %fp );
$NUM_SCANS{ tk_label }->pack( %wp );
$NUM_SCANS{ tk_entry }->pack( %wp );
$NUM_SCANS{ tk_unit  }->pack( %up );

# === FACTOR float [ 1.0e-3 : 100 ] [ 1.0  ] "Waiting time"  "* tc"

my %FACTOR;
push @VARS, \%FACTOR;
$FACTOR{ is_valid } = 1;
$FACTOR{ type } = 'float';
$FACTOR{ tk_frame } = $fsc2_main_frame->Frame( );
$FACTOR{ tk_label } = $FACTOR{ tk_frame }->Label( -text => "Waiting time",
-width => 20,
-anchor => 'w' );
$FACTOR{ value } = 1.0;

$FACTOR{ min } = 1.0e-3;
$FACTOR{ max } = 100;
$FACTOR{ tk_entry } = $FACTOR{ tk_frame }->Entry( -textvariable => \$FACTOR{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift, \$FACTOR{ is_valid },
( defined $FACTOR{ min } ? $FACTOR{ min } : undef ),
( defined $FACTOR{ max } ? $FACTOR{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $FACTOR{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $FACTOR{ min } ? $FACTOR{ min } : '-inf' ) . ' : ' . ( defined $FACTOR{ max } ? $FACTOR{ max } : '+inf' ) . ' ]' . ( $FACTOR{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$FACTOR{ tk_unit } = $FACTOR{ tk_frame }->Label( -text => "* tc",
-width => 5 );
$FACTOR{ tk_frame }->pack( %fp );
$FACTOR{ tk_label }->pack( %wp );
$FACTOR{ tk_entry }->pack( %wp );
$FACTOR{ tk_unit  }->pack( %up );

# === RESONATOR menu [ "Unspecified", "Dummy" ] [ 1 ] "Resonator"

my %RESONATOR;
push @VARS, \%RESONATOR;
$RESONATOR{ is_valid } = 1;
$RESONATOR{ type } = 'menu';
$RESONATOR{ tk_frame } = $fsc2_main_frame->Frame( );
$RESONATOR{ tk_label } = $RESONATOR{ tk_frame }->Label( -text => "Resonator",
-width => 20,
-anchor => 'w' );
$RESONATOR{ value } = "Unspecified";
my @RESONATOR = ( "Unspecified", "Dummy" );
$RESONATOR{ tk_entry } = $RESONATOR{ tk_frame }->Optionmenu( -options     => \@RESONATOR,
-width        => 10,
-textvariable => \$RESONATOR{ value } );
$RESONATOR{ tk_unit } = $RESONATOR{ tk_frame }->Label( -text => "",
-width => 5 );
$RESONATOR{ tk_frame }->pack( %fp );
$RESONATOR{ tk_label }->pack( %wp );
$RESONATOR{ tk_entry }->pack( %wp );
$RESONATOR{ tk_unit  }->pack( %up );

# === MODFREQ float_empty [ 0.000001 : 102 ] [ 100 ] "Modulation frequncy" "kHz"

my %MODFREQ;
push @VARS, \%MODFREQ;
$MODFREQ{ is_valid } = 1;
$MODFREQ{ type } = 'float_empty';
$MODFREQ{ tk_frame } = $fsc2_main_frame->Frame( );
$MODFREQ{ tk_label } = $MODFREQ{ tk_frame }->Label( -text => "Modulation frequncy",
-width => 20,
-anchor => 'w' );
$MODFREQ{ value } = 100;

$MODFREQ{ min } = 0.000001;
$MODFREQ{ max } = 102;
$MODFREQ{ tk_entry } = $MODFREQ{ tk_frame }->Entry( -textvariable => \$MODFREQ{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_empty_check( shift, \$MODFREQ{ is_valid },
( defined $MODFREQ{ min } ? $MODFREQ{ min } : undef ),
( defined $MODFREQ{ max } ? $MODFREQ{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $MODFREQ{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $MODFREQ{ min } ? $MODFREQ{ min } : '-inf' ) . ' : ' . ( defined $MODFREQ{ max } ? $MODFREQ{ max } : '+inf' ) . ' ]' . ( $MODFREQ{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$MODFREQ{ tk_unit } = $MODFREQ{ tk_frame }->Label( -text => "kHz",
-width => 5 );
$MODFREQ{ tk_frame }->pack( %fp );
$MODFREQ{ tk_label }->pack( %wp );
$MODFREQ{ tk_entry }->pack( %wp );
$MODFREQ{ tk_unit  }->pack( %up );

# === MODAMP float_empty [ 0 : ] [ 1 ] "Modulation amplitude" "G"

my %MODAMP;
push @VARS, \%MODAMP;
$MODAMP{ is_valid } = 1;
$MODAMP{ type } = 'float_empty';
$MODAMP{ tk_frame } = $fsc2_main_frame->Frame( );
$MODAMP{ tk_label } = $MODAMP{ tk_frame }->Label( -text => "Modulation amplitude",
-width => 20,
-anchor => 'w' );
$MODAMP{ value } = 1;

$MODAMP{ min } = 0;
$MODAMP{ max } = undef;
$MODAMP{ tk_entry } = $MODAMP{ tk_frame }->Entry( -textvariable => \$MODAMP{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_empty_check( shift, \$MODAMP{ is_valid },
( defined $MODAMP{ min } ? $MODAMP{ min } : undef ),
( defined $MODAMP{ max } ? $MODAMP{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $MODAMP{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $MODAMP{ min } ? $MODAMP{ min } : '-inf' ) . ' : ' . ( defined $MODAMP{ max } ? $MODAMP{ max } : '+inf' ) . ' ]' . ( $MODAMP{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$MODAMP{ tk_unit } = $MODAMP{ tk_frame }->Label( -text => "G",
-width => 5 );
$MODAMP{ tk_frame }->pack( %fp );
$MODAMP{ tk_label }->pack( %wp );
$MODAMP{ tk_entry }->pack( %wp );
$MODAMP{ tk_unit  }->pack( %up );

# === MODPHASE float_empty [ -360 : 360 ] "Modulation phase" "°"

my %MODPHASE;
push @VARS, \%MODPHASE;
$MODPHASE{ is_valid } = 1;
$MODPHASE{ type } = 'float_empty';
$MODPHASE{ tk_frame } = $fsc2_main_frame->Frame( );
$MODPHASE{ tk_label } = $MODPHASE{ tk_frame }->Label( -text => "Modulation phase",
-width => 20,
-anchor => 'w' );
$MODPHASE{ value } = '';

$MODPHASE{ min } = -360;
$MODPHASE{ max } = 360;
$MODPHASE{ tk_entry } = $MODPHASE{ tk_frame }->Entry( -textvariable => \$MODPHASE{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_empty_check( shift, \$MODPHASE{ is_valid },
( defined $MODPHASE{ min } ? $MODPHASE{ min } : undef ),
( defined $MODPHASE{ max } ? $MODPHASE{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $MODPHASE{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $MODPHASE{ min } ? $MODPHASE{ min } : '-inf' ) . ' : ' . ( defined $MODPHASE{ max } ? $MODPHASE{ max } : '+inf' ) . ' ]' . ( $MODPHASE{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$MODPHASE{ tk_unit } = $MODPHASE{ tk_frame }->Label( -text => "°",
-width => 5 );
$MODPHASE{ tk_frame }->pack( %fp );
$MODPHASE{ tk_label }->pack( %wp );
$MODPHASE{ tk_entry }->pack( %wp );
$MODPHASE{ tk_unit  }->pack( %up );

# === CHANNELS menu [ "X only", "X and Y" ] [ 2 ] "Lock-In channel(s)"

my %CHANNELS;
push @VARS, \%CHANNELS;
$CHANNELS{ is_valid } = 1;
$CHANNELS{ type } = 'menu';
$CHANNELS{ tk_frame } = $fsc2_main_frame->Frame( );
$CHANNELS{ tk_label } = $CHANNELS{ tk_frame }->Label( -text => "Lock-In channel(s)",
-width => 20,
-anchor => 'w' );
$CHANNELS{ value } = "X and Y";
my @CHANNELS = ( "X only", "X and Y" );
$CHANNELS{ tk_entry } = $CHANNELS{ tk_frame }->Optionmenu( -options     => \@CHANNELS,
-width        => 10,
-textvariable => \$CHANNELS{ value } );
$CHANNELS{ tk_unit } = $CHANNELS{ tk_frame }->Label( -text => "",
-width => 5 );
$CHANNELS{ tk_frame }->pack( %fp );
$CHANNELS{ tk_label }->pack( %wp );
$CHANNELS{ tk_entry }->pack( %wp );
$CHANNELS{ tk_unit  }->pack( %up );

$fsc2_main_frame->pack( %fp, -pady => '5' );
$fsc2_main_window->Optionmenu( -options      => \@fsc2_how_to_run,
                                -textvariable => \$fsc2_how_to_run,
                              )->pack( -padx => 15,
                                       -pady => 5 );

$fsc2_apply_button->pack( %wp, -padx => 25, -pady => 5 );
$fsc2_quit_button->pack(  %wp, -padx => 25, -pady => 5 );

load_defs( );
$fsc2_main_window->geometry( $geom ) if defined $geom;
MainLoop;


################################################################

sub int_check {
    my ( $new, $is_valid, $min, $max ) = @_;

    $$is_valid = 0;

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $$is_valid = 1;
         check_all_vars( );
     }
     return 1;
}


################################################################

sub int_empty_check {
    my ( $new, $is_valid, $min, $max ) = @_;

    $$is_valid = 0;

    if ( $new =~ /^$/ ) {
        $$is_valid = 1;
        check_all_vars( );
        return 1;
    }

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $$is_valid = 1;
         check_all_vars( );
     }

     return 1;
}


################################################################

sub float_check {
    my ( $new, $is_valid, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    $$is_valid = 0;

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $$is_valid = 1;
            check_all_vars( );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
        $$is_valid = 0;
        check_all_vars( );
        return 1;
     }

     return 0;
}


################################################################

sub float_empty_check {
    my ( $new, $is_valid, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    $$is_valid = 0;

    if ( $new =~ /^$/ ) {
        $$is_valid = 1;
        check_all_vars( );
        return 1;
    }

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $$is_valid = 1;
            check_all_vars( );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
        $$is_valid = 0;
        check_all_vars( );
        return 1;
    }

    return 0;
}


################################################################

sub check_all_vars {
    for ( @VARS ) {
        if ( ! $_->{ is_valid } ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
            return;
        }
    }

    $fsc2_apply_button->configure( -state => 'normal' );
}


################################################################

sub write_out {
    for ( @VARS ) {
        $_->{ value } = undef
            if $_->{ type } =~ /^(int|float)_empty/ and $_->{ value } eq '';
    }

    open my $fh, '|-:utf8', 'fsc2_' . lc $fsc2_how_to_run
        or die "Can't find utility fsc2_" . lc $fsc2_how_to_run . ".\n";

    my $START_FIELD = $START_FIELD{ value };
    my $END_FIELD = $END_FIELD{ value };
    my $FIELD_STEP = $FIELD_STEP{ value };
    my $NUM_SCANS = $NUM_SCANS{ value };
    my $FACTOR = $FACTOR{ value };
    my $RESONATOR = $RESONATOR{ value };
    my $MODFREQ = $MODFREQ{ value };
    my $MODAMP = $MODAMP{ value };
    my $MODPHASE = $MODPHASE{ value };
    my $CHANNELS = $CHANNELS{ value };

    print $fh "DEVICES:

er032m;
sr830;
eip371;
";
# === if RESONATOR ne "Unspecified"
    if ( eval { $RESONATOR ne "Unspecified" } ) {
        print $fh "epr_mod;
";
# === endif
    }

    print $fh "

VARIABLES:

start_field = $START_FIELD G;
end_field   = $END_FIELD G;
field_step  = $FIELD_STEP G;
Num_Points = int( abs( end_field - start_field ) / field_step ) + 1;
field[ Num_Points ];
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "data[ Num_Points ];
avg_data[ Num_Points ];
";
# === else
    } else {
        print $fh "data[ 2, Num_Points ];
avg_data[ 2, Num_Points ];
li_data[ 2 ];
";
# === endif
    }

    print $fh "Files[ 2 ];
factor = $FACTOR;
I, J, K;
Scans_Done = 0;
Scans_Written = 0;
freq[ 2 ];
avg_freq = 0.0;
Stop_Button;
Scan_No;
li_tc;
li_sens;
li_amp;
mod_amp;
li_freq;
li_phase;
TT;


PREPARATIONS:

magnet_setup( start_field, field_step );
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "init_1d( 2, Num_Points, start_field, field_step, \"Field [G]\", \"Signal [uV]\" );
";
# === else
    } else {
        print $fh "init_1d( 2, Num_Points, end_field, field_step, \"Field [G]\", \"Signal [uV]\" );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "init_1d( 4, Num_Points, start_field, field_step, \"Field [G]\", \"Signal [uV]\" );
";
# === else
    } else {
        print $fh "init_1d( 4, Num_Points, end_field, field_step, \"Field [G]\", \"Signal [uV]\" );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "
EXPERIMENT:

/* Set up magnet related stuff */

start_field = magnet_field( );
field[ 1 ] = start_field;
field_step = magnet_field_step_size( field_step );
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "end_field = start_field + ( Num_Points - 1 ) * field_step;
change_scale_1d( start_field, field_step );
";
# === else
    } else {
        print $fh "end_field = start_field - ( Num_Points - 1 ) * field_step;
change_scale_1d( end_field, field_step );

/* Set up the lock-in and get its settings */

";
# === endif
    }

    print $fh "li_tc = lockin_time_constant( );
";
# === if defined MODPHASE
    if ( eval { defined $MODPHASE } ) {
        print $fh "lockin_phase( float( $MODPHASE ) );
";
# === endif
    }

    print $fh "";
# === if defined MODFREQ
    if ( eval { defined $MODFREQ } ) {
        print $fh "lockin_ref_freq( $MODFREQ kHz );
";
# === endif
    }

    print $fh "";
# === if defined MODAMP
    if ( eval { defined $MODAMP } ) {
        print $fh "";
# ===   if RESONATOR ne "Unspecified"
    if ( eval { $RESONATOR ne "Unspecified" } ) {
        print $fh "lockin_ref_level( $MODAMP G / epr_modulation_ratio( \"$RESONATOR\" \" (SR830)\",
                                                   lockin_ref_freq( ) ) );
";
# ===   else
    } else {
        print $fh "lockin_ref_level( $MODAMP V );
";
# ===   endif
    }

    print $fh "";
# === endif
    }

    print $fh "li_sens = lockin_sensitivity( ) / 1 mV;
";
# === if RESONATOR ne "Unspecified"
    if ( eval { $RESONATOR ne "Unspecified" } ) {
        print $fh "mod_amp =   lockin_ref_level( ) 
          * epr_modulation_ratio( \"$RESONATOR\" \" (ER023M)\", lockin_ref_freq( ) );
";
# === endif
    }

    print $fh "li_amp = lockin_ref_level( );
li_freq = lockin_ref_freq( ) / 1kHz;
li_phase = lockin_phase( );

/* Open a file for the averaged data and one for all raw data */

Files[ 1 ] = get_file( \"\", \"*.avg\", \"\", \"\", \"avg\" );
Files[ 2 ] = clone_file( Files[ 1 ], \"avg\", \"scans\" );

hide_toolbox( \"ON\" );
Scan_No = output_create( \"INT_OUTPUT\", 0, \"Scan Number\" );
Stop_Button = button_create( \"PUSH_BUTTON\", \"Stop after end of scan\" );
hide_toolbox( \"OFF\" );

IF $NUM_SCANS > 0 {
   TT = ceil( $NUM_SCANS * Num_Points * factor * li_tc );
   print( \"Minimum experiment duration: #:# min\\n\", TT / 60, TT % 60 );
}

I = 0;
FOREVER {
    I += 1;
    output_value( Scan_No, I );
    freq[ 1 ] = freq_counter_measure( );

	/* Loop for all field points of a scan */

    FOR J = 1 : Num_Points {
        wait( factor * li_tc );
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        data[ J ] = lockin_get_data( );
        display_1d( J, data[ J ] / 1 uV, 1,
                    J, add_to_average( avg_data[ J ], data[ J ], I ) / 1 uV,
                    2 );
        IF J < Num_Points {
            field[ J + 1 ] = magnet_sweep_up( );
        }
";
# === else
    } else {
        print $fh "        K = Num_Points - J + 1;
        data[ K ] = lockin_get_data( );
        display_1d( K, data[ K ] / 1 uV, 1,
                    K, add_to_average( avg_data[ K ], data[ K ], I ) / 1 uV,
                    2 );
        IF K > 1 {
            field[ J + 1 ] = magnet_sweep_down( );
        }
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "        li_data = lockin_get_data( 1, 2 );
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        data[ 1, J ] = li_data[ 1 ];
        data[ 2, J ] = li_data[ 2 ];
        display_1d( J, data[ 1, J ] / 1 uV, 1,
                    J, data[ 2, J ] / 1 uV, 2,
                    J,
                    add_to_average( avg_data[ 1, J ], data[ 1, J ], I ) / 1 uV,
                    3,
                    J,
                    add_to_average( avg_data[ 2, J ], data[ 2, J ], I ) / 1 uV,
                    4 );
        IF J < Num_Points {
            field[ J + 1 ] = magnet_sweep_up( );
        }
";
# === else
    } else {
        print $fh "        K = Num_Points - J + 1;
        data[ 1, K ] = li_data[ 1 ];
        data[ 2, K ] = li_data[ 2 ];
        display_1d( K, data[ 1, K ] / 1 uV, 1,
                    K, data[ 2, K ] / 1 uV, 2,
                    K,
                    add_to_average( avg_data[ 1, K ], data[ 1, K ], I ) / 1 uV,
                    3,
                    K,
                    add_to_average( avg_data[ 2, K ], data[ 2, K ], I ) / 1 uV,
                    4);
        IF K > 1 {
            field[ J + 1 ] = magnet_sweep_down( );
        }
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "    }

    /* Measure the RF frequency again and calculate the new average */

    freq[ 2 ] = freq_counter_measure( );
    avg_freq = add_to_average( avg_freq, 0.5 * ( freq[ 1 ] + freq[ 2 ] ), I );

    fsave( Files[ 2 ], \"\\# Scan: #, MW freq. = # GHz (# GHz, # GHz)\\n\\n\",
           I, 0.5 * ( freq[ 1 ] + freq[ 2 ] ) / 1 GHz,
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "           freq[ 1 ] / 1 GHz, freq[ 2 ] / 1 GHz );
";
# === else
    } else {
        print $fh "           freq[ 2 ] / 1 GHz, freq[ 1 ] / 1 GHz );
";
# === endif
    }

    print $fh "
    /* Append the new data to the raw data file */

    FOR K = 1 : Num_Points {
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        fsave( Files[ 2 ], \"#, #\\n\", field[ K ], data[ K ] );
";
# === else
    } else {
        print $fh "        fsave( Files[ 2 ], \"#, #\\n\", field[ Num_Points - K + 1 ], data[ K ] );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        fsave( Files[ 2 ], \"#, #, #\\n\",
               field[ K ], data[ 1, K ], data[ 2, K ] );
";
# === else
    } else {
        print $fh "        fsave( Files[ 2 ], \"#, #, #\\n\",
               field[ Num_Points - K + 1 ], data[ 1, K ], data[ 2, K ] );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "    }
    fsave( Files[ 2 ], \"\\n\" );
    Scans_Written = 1;

    /* Calculate the new average data and rewrite the file for the
       average data */

    avg_data = add_to_average( avg_data, data, I );
    Scans_Done += 1;

    reset_file( Files[ 1 ] );
    fsave( Files[ 1 ], \"\\# Date                : # #\\n\"
                       \"\\# Start field         = # G\\n\"
                       \"\\# End field           = # G\\n\"
                       \"\\# Field step size     = # G\\n\"
                       \"\\# Number of points    = #\\n\"
                       \"\\# No. of scans        = #\\n\"
                       \"\\# MW frequency        = # GHz\\n\"
                       \"\\# Lockin-In           = Stanford Research SR830\\n\"
                       \"\\# Sensitivity         = # mV\\n\"
                       \"\\# Time constant       = # ms\\n\"
                       \"\\# Waiting time factor = #\\n\"
";
# === if RESONATOR ne "Unspecified"
    if ( eval { $RESONATOR ne "Unspecified" } ) {
        print $fh "                       \"\\# Resonator           = $RESONATOR\\n\"
                       \"\\# Modulation ampl.    = # G (raw: # V)\\n\"
";
# === else
    } else {
        print $fh "                       \"\\# Modulation ampl.    = # V (raw)\\n\"
";
# === endif
    }

    print $fh "                       \"\\# Modulation freq.     = # kHz\\n\"
                       \"\\# Phase                = #\\n\",
           date( ), time( ), start_field,
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "           start_field + ( Num_Points - 1 ) * field_step, field_step,
";
# === else
    } else {
        print $fh "           start_field - ( Num_Points - 1 ) * field_step, - field_step,
";
# === endif
    }

    print $fh "           Num_Points, Scans_Done, avg_freq / 1 GHz,
           li_sens, li_tc / 1 ms, factor,
";
# === if RESONATOR ne "Unspecified"
    if ( eval { $RESONATOR ne "Unspecified" } ) {
        print $fh "           mod_amp,
";
# === endif
    }

    print $fh "           li_amp, li_freq, li_phase );

    FOR K = 1 : Num_Points {
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        fsave( Files[ 1 ], \"#, #\\n\", field[ K ], avg_data[ K ] );
";
# === else
    } else {
        print $fh "        fsave( Files[ 1 ], \"#, #\\n\", field[ Num_Points - K + 1 ],
               avg_data[ K ] );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        fsave( Files[ 1 ], \"#, #, #\\n\", field[ K ], avg_data[ 1, K ],
               avg_data[ 2, K ] );
";
# === else
    } else {
        print $fh "        fsave( Files[ 1 ], \"#, #, #\\n\", field[ Num_Points - K + 1 ],
               avg_data[ 1, K ], avg_data[ 2, K ] );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "    }

    /* Update the displayed average data */

";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "    display_1d( 1, avg_data / 1 uV, 2 );
";
# === else    
    } else {
        print $fh "    display_1d( 1, avg_data[ 1 ] / 1 uV, 3,
                1, avg_data[ 2 ] / 1 uV, 4 );
";
# ===endif
    }

    print $fh "
    IF button_state( Stop_Button ) OR Scans_Done == $NUM_SCANS {
        BREAK;
    }
    magnet_reset_field( );
    field[ 1 ] = magnet_field( );
}

ON_STOP:

hide_toolbox( \"ON\" );

IF ! Scans_Written {
    Num_Points = J - 1;
    IF Num_Points <= 1 {
        abort( );
    }

    freq[ 2 ] = freq_counter_measure( );
    avg_freq = 0.5 * ( freq[ 1 ] + freq[ 2 ] );

    fsave( Files[ 2 ], \"\\# Scan: 1, MW freq. = # GHz (# GHz, # GHz)\\n\\n\",
           0.5 * ( freq[ 1 ] + freq[ 2 ] ) / 1 GHz,
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "           freq[ 1 ] / 1 GHz, freq[ 2 ] / 1 GHz );
";
# === else
    } else {
        print $fh "           freq[ 2 ] / 1 GHz, freq[ 1 ] / 1 GHz );
";
# === endif
    }

    print $fh "
    FOR K = 1 : Num_Points {
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        fsave( Files[ 2 ], \"#, #\\n\", field[ K ], data[ K ] );
";
# === else
    } else {
        print $fh "        fsave( Files[ 2 ], \"#, #\\n\", field[ Num_Points - K + 1 ], data[ K ] );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        fsave( Files[ 2 ], \"#, #, #\\n\",
               field[ K ], data[ 1, K ], data[ 2, K ] );
";
# === else
    } else {
        print $fh "        fsave( Files[ 2 ], \"#, #, #\\n\",
               field[ Num_Points - K + 1 ], data[ 1, K ], data[ 2, K ] );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "    }
    fsave( Files[ 2 ], \"\\n\" );
    avg_data = data;
    Scans_Done = 1;
}

reset_file( Files[ 1 ] );
FOR K = 1 : 2 {
    fsave( Files[ K ], \"\\# Date                : # #\\n\"
                       \"\\# Start field         = # G\\n\"
                       \"\\# End field           = # G\\n\"
                       \"\\# Field step size     = # G\\n\"
                       \"\\# Number of points    = #\\n\"
                       \"\\# No. of scans        = #\\n\"
                       \"\\# MW frequency        = # GHz\\n\"
                       \"\\# Lockin-In           = Stanford Research SR830\\n\"
                       \"\\# Sensitivity         = # mV\\n\"
                       \"\\# Time constant       = # ms\\n\"
                       \"\\# Waiting time factor = #\\n\"
";
# === if RESONATOR ne "Unspecified"
    if ( eval { $RESONATOR ne "Unspecified" } ) {
        print $fh "                       \"\\# Resonator           = $RESONATOR\\n\"
                       \"\\# Modulation ampl.    = # G (raw: # V)\\n\"
";
# === else
    } else {
        print $fh "                       \"\\# Modulation ampl.    = # V (raw)\\n\"
";
# === endif
    }

    print $fh "                       \"\\# Modulation freq.     = # kHz\\n\"
                       \"\\# Phase                = #\\n\",
           date( ), time( ), start_field,
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "           start_field + ( Num_Points - 1 ) * field_step, field_step,
";
# === else
    } else {
        print $fh "           start_field - ( Num_Points - 1 ) * field_step, - field_step,
";
# === endif
    }

    print $fh "           Num_Points, Scans_Done, avg_freq / 1 GHz,
           li_sens, li_tc / 1 ms, factor,
";
# === if RESONATOR ne "Unspecified"
    if ( eval { $RESONATOR ne "Unspecified" } ) {
        print $fh "           mod_amp,
";
# === endif
    }

    print $fh "           li_amp, li_freq, li_phase );
}

save_comment( Files[ 1 ], \"# \", \"Sample: \\nTemperature: \\nCavity: \" );

FOR K = 1 : Num_Points {
";
# === if CHANNELS eq 'X only'
    if ( eval { $CHANNELS eq 'X only' } ) {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "    fsave( Files[ 1 ], \"#, #\\n\", field[ K ], avg_data[ K ] );
";
# === else
    } else {
        print $fh "    fsave( Files[ 1 ], \"#, #\\n\", field[ Num_Points - K + 1 ],
           avg_data[ K ] );
";
# === endif
    }

    print $fh "";
# === else
    } else {
        print $fh "";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "    fsave( Files[ 1 ], \"#, #, #\\n\", field[ K ], avg_data[ 1, K ],
           avg_data[ 2, K ] );
";
# === else
    } else {
        print $fh "    fsave( Files[ 1 ], \"#, #, #\\n\", field[ Num_Points - K + 1 ],
           avg_data[ 1, K ], avg_data[ 2, K ] );
";
# === endif
    }

    print $fh "";
# === endif
    }

    print $fh "}
";
    close $fh;

    my $text;
    if ( $? != 0 ) {
        if ( $? >> 8 == 255 ) {
            $text = "Internal error.";
        } elsif ( $? >> 8 == 1 ) {
            $text = "Someone else is running fsc2.";
        } elsif ( $? >> 8 == 2 ) {
            $text = "fsc2 is already testing or\nrunning an experiment.";
        } elsif ( $? >> 8 == 3 ) {
            $text = "Internal error of fsc2.";
        } elsif ( $? >> 8 == 4 ) {
            $text = "Could not start fsc2.";
        } else {
            $text = "Something strange\nis going on here.";
        }

        &show_message( $text ) if $? >> 8 != 0;
    }
}


################################################################

sub show_message {
    my $text = shift;

    $fsc2_main_window->messageBox( -icon => 'error',
                                   -type => 'Ok',
                                   -title => 'Error',
                                   -message => $text );
}


################################################################

sub store_defs {
    my $fh;
    my $name = $0;

    $name =~ s|^.*?([^/]+)$|$1|;
    mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
    open $fh, '>:utf8', $ENV{ HOME } . "/.fsc2/$name" or return;
    print $fh "# Do not edit - created automatically!\n";

    if (    (     $START_FIELD{ type } =~ /^float_empty$/o
              and $START_FIELD{ value } eq '' )
         or (     $START_FIELD{ value } ne ''
              and $START_FIELD{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
              and ( defined $START_FIELD{ max } ? $START_FIELD{ max } >= $START_FIELD{ value } : 1 )
              and ( defined $START_FIELD{ min } ? $START_FIELD{ min } <= $START_FIELD{ value } : 1 ) ) ) {
        print $fh "$START_FIELD{ value }\n";
    } else {
        print $fh "3000\n";
    }

    if (    (     $END_FIELD{ type } =~ /^float_empty$/o
              and $END_FIELD{ value } eq '' )
         or (     $END_FIELD{ value } ne ''
              and $END_FIELD{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
              and ( defined $END_FIELD{ max } ? $END_FIELD{ max } >= $END_FIELD{ value } : 1 )
              and ( defined $END_FIELD{ min } ? $END_FIELD{ min } <= $END_FIELD{ value } : 1 ) ) ) {
        print $fh "$END_FIELD{ value }\n";
    } else {
        print $fh "3500\n";
    }

    if (    (     $FIELD_STEP{ type } =~ /^float_empty$/o
              and $FIELD_STEP{ value } eq '' )
         or (     $FIELD_STEP{ value } ne ''
              and $FIELD_STEP{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
              and ( defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } >= $FIELD_STEP{ value } : 1 )
              and ( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } <= $FIELD_STEP{ value } : 1 ) ) ) {
        print $fh "$FIELD_STEP{ value }\n";
    } else {
        print $fh "1\n";
    }

    if (    (     $NUM_SCANS{ type } =~ /^int_empty$/o
              and $NUM_SCANS{ value } eq '' )
         or (     $NUM_SCANS{ value } ne ''
              and $NUM_SCANS{ value } =~ /^[+-]?\d+$/o
              and ( defined $NUM_SCANS{ max } ? $NUM_SCANS{ max } >= $NUM_SCANS{ value } : 1 )
              and ( defined $NUM_SCANS{ min } ? $NUM_SCANS{ min } <= $NUM_SCANS{ value } : 1 ) ) ) {
        print $fh "$NUM_SCANS{ value }\n";
    } else {
        print $fh "0\n";
    }

    if (    (     $FACTOR{ type } =~ /^float_empty$/o
              and $FACTOR{ value } eq '' )
         or (     $FACTOR{ value } ne ''
              and $FACTOR{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
              and ( defined $FACTOR{ max } ? $FACTOR{ max } >= $FACTOR{ value } : 1 )
              and ( defined $FACTOR{ min } ? $FACTOR{ min } <= $FACTOR{ value } : 1 ) ) ) {
        print $fh "$FACTOR{ value }\n";
    } else {
        print $fh "1.0\n";
    }

    print $fh "$RESONATOR{ value }\n";

    if (    (     $MODFREQ{ type } =~ /^float_empty$/o
              and $MODFREQ{ value } eq '' )
         or (     $MODFREQ{ value } ne ''
              and $MODFREQ{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
              and ( defined $MODFREQ{ max } ? $MODFREQ{ max } >= $MODFREQ{ value } : 1 )
              and ( defined $MODFREQ{ min } ? $MODFREQ{ min } <= $MODFREQ{ value } : 1 ) ) ) {
        print $fh "$MODFREQ{ value }\n";
    } else {
        print $fh "100\n";
    }

    if (    (     $MODAMP{ type } =~ /^float_empty$/o
              and $MODAMP{ value } eq '' )
         or (     $MODAMP{ value } ne ''
              and $MODAMP{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
              and ( defined $MODAMP{ max } ? $MODAMP{ max } >= $MODAMP{ value } : 1 )
              and ( defined $MODAMP{ min } ? $MODAMP{ min } <= $MODAMP{ value } : 1 ) ) ) {
        print $fh "$MODAMP{ value }\n";
    } else {
        print $fh "1\n";
    }

    if (    (     $MODPHASE{ type } =~ /^float_empty$/o
              and $MODPHASE{ value } eq '' )
         or (     $MODPHASE{ value } ne ''
              and $MODPHASE{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o
              and ( defined $MODPHASE{ max } ? $MODPHASE{ max } >= $MODPHASE{ value } : 1 )
              and ( defined $MODPHASE{ min } ? $MODPHASE{ min } <= $MODPHASE{ value } : 1 ) ) ) {
        print $fh "$MODPHASE{ value }\n";
    } else {
        print $fh "\n";
    }

    print $fh "$CHANNELS{ value }\n";

    print $fh "$fsc2_how_to_run\n";

    print $fh "$geom\n" if defined $geom;

    close $fh;
};


################################################################

sub load_defs {
    my $fh;
    my $name = $0;
    my $ne;
    my $found;

    $name =~ s|^.*?([^/]+)$|$1|;
    if ( $ARGV[ 0 ] ) {
        open $fh, '<:utf8', $ARGV[ 0 ] or return;
    } else {
        open $fh, '<:utf8', $ENV{ HOME } . "/.fsc2/$name" or return;
    }

    goto done_reading unless defined( $ne = <$fh> ) and $ne =~ /^#/;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $START_FIELD{ max } and $ne > $START_FIELD{ max } )
                         or ( defined $START_FIELD{ min } and $ne < $START_FIELD{ min } );
    $START_FIELD{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $END_FIELD{ max } and $ne > $END_FIELD{ max } )
                         or ( defined $END_FIELD{ min } and $ne < $END_FIELD{ min } );
    $END_FIELD{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $FIELD_STEP{ max } and $ne > $FIELD_STEP{ max } )
                         or ( defined $FIELD_STEP{ min } and $ne < $FIELD_STEP{ min } );
    $FIELD_STEP{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?\d+$/;
    chomp $ne;
    goto done_reading if    ( defined $NUM_SCANS{ max } and $ne > $NUM_SCANS{ max } )
                         or ( defined $NUM_SCANS{ min } and $ne < $NUM_SCANS{ min } );
    $NUM_SCANS{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if    ( defined $FACTOR{ max } and $ne > $FACTOR{ max } )
                         or ( defined $FACTOR{ min } and $ne < $FACTOR{ min } );
    $FACTOR{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @RESONATOR ) {
        if ( $ne eq $_ ) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $RESONATOR{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and (    $ne =~ /^$/o
                                   or $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o );
    chomp $ne;
    goto done_reading if     $ne ne ''
                         and (    ( defined $MODFREQ{ max } and $ne > $MODFREQ{ max } )
                               or ( defined $MODFREQ{ min } and $ne < $MODFREQ{ min } ) );
    $MODFREQ{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and (    $ne =~ /^$/o
                                   or $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o );
    chomp $ne;
    goto done_reading if     $ne ne ''
                         and (    ( defined $MODAMP{ max } and $ne > $MODAMP{ max } )
                               or ( defined $MODAMP{ min } and $ne < $MODAMP{ min } ) );
    $MODAMP{ value } = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and (    $ne =~ /^$/o
                                   or $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o );
    chomp $ne;
    goto done_reading if     $ne ne ''
                         and (    ( defined $MODPHASE{ max } and $ne > $MODPHASE{ max } )
                               or ( defined $MODPHASE{ min } and $ne < $MODPHASE{ min } ) );
    $MODPHASE{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @CHANNELS ) {
        if ( $ne eq $_ ) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $CHANNELS{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @fsc2_how_to_run ) {
        if ( $ne eq $_ ) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $fsc2_how_to_run = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^\s*([+-]\d+[+-]\d+)\s*$/;
    $geom = $1;

  done_reading:
    close $fh;
};
