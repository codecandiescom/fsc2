#!/usr/bin/perl -w
# -*- cperl -*-
#
# $Id$
#
# Copyright (C) 1999-2003 Jens Thoms Toerring
#
# This file is part of fsc2.
#
# Fsc2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Fsc2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fsc2; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

use strict;
use Tk;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
	if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my $lockin     = 'SR810';
my $start_freq = 8;
my $end_freq   = 22;
my $step_freq  = 25;
my $atten      = -8;
my $mod_freq   = 19;
my $mod_ampl   = 80;
my $N_runs     = 20;
my $tc         = "Don't set";
my $tc_fac     = 1;
my $sens       = "Don't set";
my $how        = 'Start program';
my $table      = "";


my %fp = ( '-side' => 'top',
		   '-fill' => 'x',
		   '-padx' => '2m',
		   '-pady' => '2m' );

my %wp = ( '-side'   => 'left',
		   '-fill'   => 'x',
		   '-padx'   => '3m',
		   '-expand' => 1 );

# Get defaults

&get_defs;

# Create all the graphic stuff

my $mw = MainWindow->new( );
$mw->title( "cw_endor" );

my $f0 = $mw->Frame( )->pack( '-side' => 'top',
							  '-fill' => 'x',
							  '-padx' => '2m',
							  '-pady' => '2m' );


my $f1 = $mw->Frame( );
my $f1_l1 = $f1->Label( '-text'           => 'Start frequency:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f1_v = $f1->Entry( '-textvariable'    => \$start_freq,
					   '-width'           => '6',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief'          => 'sunken' );
my $f1_l2 = $f1->Label( '-text'           => 'MHz',
						'-width'          => 3 );

$f1->pack( %fp );
$f1_l1->pack( %wp );
$f1_v->pack( %wp );
$f1_l2->pack( %wp );


my $f2 = $mw->Frame( );
my $f2_l1 = $f2->Label( '-text'           => 'End frequency:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f2_v = $f2->Entry( '-textvariable'    => \$end_freq,
					   '-width'           => '6',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief'          => 'sunken' );
my $f2_l2 = $f2->Label( '-text'           => 'MHz',
						'-width'          => 3 );

$f2->pack( %fp );
$f2_l1->pack( %wp );
$f2_v->pack( %wp );
$f2_l2->pack( %wp );


my $f3 = $mw->Frame( );
my $f3_l1 = $f3->Label( '-text'           => 'Step frequency:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f3_v = $f3->Entry( '-textvariable'    => \$step_freq,
					   '-width'           => '6',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief'          => 'sunken' );
my $f3_l2 = $f3->Label( '-text'           => 'kHz',
						'-width'          => 3 );

$f3->pack( %fp );
$f3_l1->pack( %wp );
$f3_v->pack( %wp );
$f3_l2->pack( %wp );


my $f4 = $mw->Frame( );
my $f4_l1 = $f4->Label( '-text'           => 'Attenuation:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f4_v = $f4->Entry( '-textvariable'    => \$atten,
					   '-width'           => '6',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_signed_numeric,
					   '-relief'          => 'sunken' );
my $f4_l2 = $f4->Label( '-text'           => 'dB',
						'-width'          => 3 );

$f4->pack( %fp );
$f4_l1->pack( %wp );
$f4_v->pack( %wp );
$f4_l2->pack( %wp );


my $f5 = $mw->Frame( );
my $f5_l1 = $f5->Label( '-text'           => 'Modulation frequency:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f5_v = $f5->Entry( '-textvariable'    => \$mod_freq,
					   '-width'           => '6',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief'          => 'sunken' );
my $f5_l2 = $f5->Label( '-text'           => 'kHz',
						'-width'          => 3 );

$f5->pack( %fp );
$f5_l1->pack( %wp );
$f5_v->pack( %wp );
$f5_l2->pack( %wp );
$f5->{ is_shown } = 1;

my $f6 = $mw->Frame( );
my $f6_l1 = $f6->Label( '-text'           => 'Modulation amplitude:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f6_v = $f6->Entry( '-textvariable'    => \$mod_ampl,
					   '-width'           => '6',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief'          => 'sunken' );
my $f6_l2 = $f6->Label( '-text'           => 'kHz',
						'-width'          => 3 );

$f6->pack( %fp );
$f6_l1->pack( %wp );
$f6_v->pack( %wp );
$f6_l2->pack( %wp );


my $f7 = $mw->Frame( );
my $f7_l1 = $f7->Label( '-text'           => 'Number of runs:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f7_v = $f7->Entry( '-textvariable'    => \$N_runs,
					   '-width'           => '6',
					   '-validate'        => 'key',
					   '-validatecommand' => sub { $_[ 0 ] =~ /^s*\d*\s*$/ },
					   '-relief'          => 'sunken' );
my $f7_l2 = $f7->Label( '-text'           => '    ',
						'-width'          => 3 );

$f7->pack( %fp );
$f7_l1->pack( %wp );
$f7_v->pack( %wp );
$f7_l2->pack( %wp );


my $f8 = $mw->Frame( );
my $f8_l = $f8->Label( '-text'          => 'Lock-in amplifier:',
					   '-width'         => '20',
					   'anchor'         => 'w' );
my $f8_m = $f8->Optionmenu( '-options'  =>
							[ ( 'SR510', 'SR530', 'SR810', 'SR830' ) ],
							'-width'    => 9,
							'-textvariable' => \$lockin,
							'-command'  => [ \&li_conf, $lockin ] );
$f8->pack( %fp );
$f8_l->pack( %wp );
$f8_m->pack( %wp );


my $f9 = $mw->Frame( );
my $f9_l = $f9->Label( '-text'          => 'Time constant:',
					   '-width'         => '20',
					   'anchor'         => 'w' );
my $f9_m = $f9->Optionmenu( '-options'  =>
                            [ ( "Don't set", '100 s', ' 30 s', ' 10 s',
                                '  3 s', '  1 s', '300 ms', '100 ms', ' 30 ms',
                                ' 10 ms', '  3 ms', '  1 ms' ) ],
							'-width'    => 9,
							'-textvariable' => \$tc );
$f9->pack( %fp );
$f9_l->pack( %wp );
$f9_m->pack( %wp );


my $f10 = $mw->Frame( '-width'             => '29' );
my $f10_l1 = $f10->Label( '-text'           => 'Waiting time factor:',
						  '-width'          => '20',
						  'anchor'          => 'w' );
my $f10_v = $f10->Entry( '-textvariable'    => \$tc_fac,
						 '-width'           => '7',
						 '-validate'        => 'key',
						 '-validatecommand' => \&is_numeric,
						 '-relief'          => 'sunken' );
my $f10_l2 = $f10->Label( '-text'           => '* tc',
						  '-width'          => 2 );

$f10->pack( %fp );
$f10_l1->pack( %wp );
$f10_v->pack( %wp );
$f10_l2->pack( %wp );


my $f11 = $mw->Frame( );
my $f11_l = $f11->Label( '-text'         => 'Sensitivity:',
						 '-width'        => '20',
						 'anchor'        => 'w' );
my $f11_m = $f11->Optionmenu( '-options' =>
                            [ ( "Don't set", '500 mV', '200 mV', '100 mV',
                                ' 50 mV', ' 20 mV', ' 10 mV', '  5 mv',
                                '  2 mV', '  1 mV', '500 uV', '200 uV',
                                '100 uV', ' 50 uV', ' 20 uV', ' 10 uV',
                                '  5 uV', '  2 uV', '  1 uV',
                                '500 nV', '200 nV', '100 nV', ' 50 nV',
                                ' 10 nV', '  5 nV', '  2 nV', '  1 nV' ) ],
							'-width'     => 9,
							'-textvariable'  => \$sens );
$f11->pack( %fp );
$f11_l->pack( %wp );
$f11_m->pack( %wp );

my $f12 = $mw->Frame( );
my $f12_b = $f12->Button( '-text' => 'Table file',
						  '-command' =>
						  sub { my $fn = $mw->fsc2_filesel::show( $table );
								$table = $fn if defined $fn; }
						);
my $f12_e = $f12->Entry( '-textvariable'  => \$table,
						 '-relief'        => 'sunken' );

$f12->pack( %fp );
$f12_b->pack( %wp );
$f12_e->pack( %wp );



$mw->Optionmenu( '-options'      => [ ( 'Start program', 'Test program',
										'Load into fsc2' ) ],
				 '-textvariable' => \$how
			   )->pack( '-padx'  => '3m',
					    '-pady'  => '3m' );

my $f13 = $mw->Frame( );
my $f13_a = $mw->Button( '-text' => 'Apply',
						 '-command' => \&write_out );
my $f13_q = $mw->Button( '-text' => 'Quit',
						 '-command' => sub { &store_defs; $mw->destroy } );
$f13->pack( '-side' => 'top',
			'-fill' => 'x',
			'-padx' => '4m' );
$f13_a->pack( %wp, 'padx' => '5m', '-pady' => '3m' );
$f13_q->pack( %wp, 'padx' => '5m', '-pady' => '3m' );


MainLoop;


#############################################

sub get_defs {

local *F;
my $ne;

if ( $ARGV[ 0 ] ) {
	open( F, "<$ARGV[ 0 ]" ) or return;
} else {
	open( F, "<$ENV{ HOME }/.fsc2/cw_endor" ) or return;
}

goto done_reading unless defined( $ne = <F> ) and $ne =~ /^#/;
goto done_reading unless defined( $ne = <F> ) and $ne =~ /^SR(5|8)(1|3)0$/;

chomp $ne;
$lockin = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$start_freq = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$end_freq = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$step_freq = $ne;

goto done_reading unless defined( $ne = <F> ) and is_signed_numeric( $ne );
chomp $ne;
$atten = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$mod_freq = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$mod_ampl = $ne;

goto done_reading unless defined( $ne = <F> ) and $ne =~ /^\d+$/;
chomp $ne;
$N_runs = $ne;

goto done_reading unless defined( $ne = <F> )
	 and $ne =~ /(^Don't set)|([13]0{0,2} m?s)$/;
chomp $ne;
$tc = $ne;

goto done_reading unless defined( $ne = <F> ) and $ne =~ /^\d+$/;
chomp $ne;
$tc_fac = $ne;

goto done_reading unless defined( $ne = <F> )
	 and $ne =~ /(^Don't set)|(([125]0{0,2}) [mun]V)$/;
chomp $ne;
$sens = $ne;

goto done_reading unless defined( $ne = <F> );
chomp $ne;
$table = $ne;

goto done_reading unless defined( $ne = <F> ) and
	$ne =~ /^(Start experiment)|(Test program)|(Load into fsc2)$/;
chomp $ne;
$how = $ne;

done_reading:
close F;
}


#############################################

sub store_defs {
	local *F;

	mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
	open( F, ">$ENV{ HOME }/.fsc2/cw_endor" ) or return;

	$start_freq = 0 if $start_freq eq ".";
	$end_freq = 0 if $end_freq eq ".";
	$step_freq = 0 if $step_freq eq ".";
	$atten = 0 if $atten eq ".";
	$mod_freq = 0 if $mod_freq eq ".";
	$mod_ampl = 0 if $mod_ampl eq ".";

	print F "# Do not edit - created automatically!\n";
	print F "$lockin\n$start_freq\n$end_freq\n$step_freq\n$atten\n" .
	        "$mod_freq\n$mod_ampl\n$N_runs\n$tc\n$tc_fac\n$sens\n" .
			"$table\n$how\n";

	close F;
}


#############################################

sub is_numeric {

	my $new_val = shift;
	return $new_val =~ /^((\d+\.?(\d+)?)|(\.(\d+)?))?$/;
}


#############################################

sub is_signed_numeric {

	my $new_val = shift;
	return $new_val =~ /^[+-]?((\d+\.?(\d+)?)|(\.(\d+)?))?$/;
}


#############################################

sub li_conf {

	my ( $self, $li ) = @_;

	if ( $li =~ /^SR8/ ) {
		unless ( $f5->{ is_shown } == 1 ) {
			$f5_l1 = $f5->Label( '-text' => 'Modulation frequency:',
								 '-width' => '20',
								 'anchor' => 'w' );
			$f5_v = $f5->Entry( '-textvariable' => \$mod_freq,
								'-width' => '6',
								'-validate' => 'key',
								'-validatecommand' => \&is_numeric,
								'-relief' => 'sunken' );
			$f5_l2 = $f5->Label( '-text' => 'kHz',
								 '-width' => 3 );
			$f5_l1->pack( %wp );
			$f5_v->pack( %wp );
			$f5_l2->pack( %wp );
			$f5->{ is_shown } = 1;
		}
	} else {
		unless ( $f5->{ is_shown } == 0 ) {
			$f5_l1->destroy;
			$f5_v->destroy;
			$f5_l2->destroy;
			$f5->{ is_shown } = 0;
		}
	}
}


#############################################

sub write_out {

return if &do_checks( ) != 0;

local *F;
my $text = "";

open( F, "|fsc2_" . lc $how )
	or die "Can't find utility fsc2_" . lc $how . ".\n";

print F
"DEVICES:

hp8647a;
er035m_sas;\n";

print F lc( $lockin ), ";\n";
print F
"

VARIABLES:

start_freq  = $start_freq MHz;
end_freq    = $end_freq MHz;
step_freq   = $step_freq kHz;
attenuation = $atten dB;\n";

if ( $lockin =~ /^SR8/ ) {
	print F "mod_freq    = $mod_freq kHz;\n";
} else {
	print F "mod_freq;\n";
}

if ( $tc eq "Don't set" ) {
	print F "tc;\n";
} else {
	print F "tc = $tc;\n";
}

print F
"mod_ampl    = $mod_ampl kHz;
N_runs      = $N_runs;

I = 0;
J;
K = 1;

N_points = ceil( abs( ( end_freq - start_freq ) / step_freq ) ) + 1;
data[ N_points ];
mean_data[ N_points ];
File_1, File_2;
B1, OO1, OO2;

PREPARATIONS:\n\n";

if ( $table =~ /^$/ ) {
	print F "synthesizer_use_table( );\n";
} else {
	print F "synthesizer_use_table( \"$table\" );\n";
}

print F "synthesizer_attenuation( attenuation );
synthesizer_att_ref_freq( 14 MHz );
synthesizer_frequency( start_freq );
synthesizer_modulation( \"FM\", \"EXT DC\", mod_ampl );

init_1d( 2, N_points, start_freq * 1e-6, step_freq * 1e-6,
		 \"Frequency / MHz\", \"Signal / V\" );\n";
print F "lockin_time_constant( tc );\n" if $tc ne "Don't set";
print F "lockin_sensitivity( $sens );\n" if $sens ne "Don't set";
print F "\n\nEXPERIMENT:

synthesizer_state( \"ON\" );\n";

# Neither the SR510 nor the SR530 can set a modulation frequency nor level...

if ( $lockin =~ /^SR8/ ) {
	print F "lockin_ref_freq( mod_freq );
lockin_ref_level( 1 V );\n";
} else {
	print F "mod_freq = lockin_ref_freq( );\n";
}
print F "tc = lockin_time_constant( );\n" if $tc eq "Don't set";

print F "

File_1 = get_file( \"File for storing all runs:\" );
File_2 = get_file( \"File for storing final results:\" );
fsave( File_2, \"% Start frequency = # MHz\\n\"
               \"% End frequency   = # MHz\\n\"
               \"% Step frequency  = # kHz\\n\"
               \"% Lock-in sens.   = # V\\n\"
               \"% Time constant   = # s\\n\"
               \"% Phase           = #\\n\"
               \"% Mod. frequency  = # kHz\\n\"
               \"% Mod. amplitude  = # kHz\\n\"
			   \"% Field at start  = # G\\n%\\n\",
       start_freq * 1.0e-6, end_freq * 1.0e-6, step_freq * 1.0e-3,
       lockin_sensitivity( ), tc, lockin_phase( ), mod_freq * 1.0e-3,
       mod_ampl * 1.0e-3, measure_field( ) );
save_comment( File_2, \"% \" );
save_program( File_2, \"% \" );

hide_toolbox( 1 );
B1 = button_create( \"PUSH_BUTTON\", \"Pause before\\nnext run\" );
OO1 = output_create( \"INT_OUTPUT\", \"Current run\" );
OO2 = output_create( \"FLOAT_OUTPUT\", \"RF Frequency [MHz]\" );
hide_toolbox( 0 );\n\n";

print F "

FOR I = 1 : N_runs
{
    output_value( OO1, I );
    output_value( OO2, start_freq * 1.0e-6 );

    IF button_state( B1 ) {
        WHILE button_state( B1 ) {
            wait( 0.5 s );
        }
    }

	print( \"Starting #. run out of #\\n\", I, N_runs );

	FOR J = 1 : N_points
	{
		data[ J ] = lockin_get_data( );
		display( J, data[ J ], 1, J, ( mean_data[ J ] + data[ J ] ) / I, 2 );
        IF J < N_points {
			synthesizer_frequency( start_freq + J * step_freq );
            output_value( OO2, ( start_freq  + J * step_freq ) * 1.0e-6 );
        }
		wait( $tc_fac * tc );
	}

	save( File_1, data );
	mean_data += data;
	K = I;
	synthesizer_frequency( start_freq );
    output_value( OO2, start_freq * 1.0e-6 );

    IF I < N_runs - 1 {
        wait( 10 * tc );
    }
}


ON_STOP:

synthesizer_state( \"OFF\" );

IF I > 0
{
	fsave( File_2, \"%\\n% Number of completed runs: #\\n\\n\", I - 1 );
	FOR J = 1 : N_points {
		fsave( File_2, \"# #\\n\",
			   start_freq + ( J - 1 ) * step_freq, mean_data[ J ] / K );
	}
}
";

close( F );

# Notify the user if sending the program to fsc2 failed for some reasons

if ( $? != 0 ) {
    if ( $? >> 8 == 255 ) {
        $text = "Internal error.";
    } elsif ( $? >> 8 == 1 ) {
        $text = "Someone else is running fsc2.";
    } elsif ( $? >> 8 == 2 ) {
        $text = "fsc2 is currently busy.";
    } elsif ( $? >> 8 == 3 ) {
        $text = "Internal error of fsc2.";
    } elsif ( $? >> 8 == 4 ) {
        $text = "Could not start fsc2.";
    } else {
        $text = "Something strange is going on here.";
    }

    &show_message( $text ) if $? >> 8 != 0;
}
}


#############################################

sub do_checks {

	my $text = "";

	if ( $start_freq =~ /^\.?$/ ) {
		$text = "Start frequency hasn't been set.";
		&show_message( $text );
		return -1;
	}

	if ( $start_freq < 1 ) {
		$text = "Start frequency is too low.";
		&show_message( $text );
		return -1;
	}

	if ( $start_freq > 50 ) {
		$text = "Start frequency is too high.";
		&show_message( $text );
		return -1;
	}

	if ( $end_freq =~ /^\.?$/ ) {
		$text = "End frequency hasn't been set.";
		&show_message( $text );
		return -1;
	}

	if ( $end_freq < 1 ) {
		$text = "End frequency is too low.";
		&show_message( $text );
		return -1;
	}

	if ( $end_freq > 50 ) {
		$text = "End frequency is too high.";
		&show_message( $text );
		return -1;
	}

	if ( $step_freq =~ /^\.?$/ ) {
		$text = "Step frequency hasn't been set.";
		&show_message( $text );
		return -1;
	}

	if ( abs( $step_freq / 1000 ) > abs( $end_freq - $start_freq ) ) {
		$text = "Step frequency is too large.";
		&show_message( $text );
		return -1;
	}

	if ( $end_freq < $start_freq && $step_freq > 0 ) {
		$text = "End frequency lower than start frequency " .
		        "while step frequency isn't negative.";
		&show_message( $text );
		return -1;
	}

	if ( $end_freq > $start_freq && $step_freq < 0 ) {
		$text = "End frequency higher than start frequency " .
		        "but step frequency is negative.";
		&show_message( $text );
		return -1;
	}

	if ( $atten =~ /^\.?$/ ) {
		$text = "Attenuation hasn't been set.";
		&show_message( $text );
		return -1;
	}

	if ( $atten > -3 ) {
		$text = "Attenuation is too low.";
		&show_message( $text );
		return -1;
	}

	if ( $atten < -136 ) {
		$text = "Attenuation is too high.";
		&show_message( $text );
		return -1;
	}

	if ( $lockin =~ /^SR8/ ) {
		if ( $mod_freq =~ /^\.?$/ ) {
			$text = "Modulation frequency hasn't been set.";
			&show_message( $text );
			return -1;
		}

		if ( $mod_freq <= 0 ) {
			$text = "Modulation frequency is too low.";
			&show_message( $text );
			return -1;
		}

		if ( $mod_freq > 100 ) {
			$text = "Modulation frequency is too high.";
			&show_message( $text );
			return -1;
		}
	}

	if ( $mod_ampl =~ /^\.?$/ ) {
		$text = "Modulation amplitude hasn't been set.";
		&show_message( $text );
		return -1;
	}

	if ( $mod_ampl <= 0 ) {
		$text = "Modulation amplitude is too low.";
		&show_message( $text );
		return -1;
	}

	if ( $mod_ampl > 100 ) {
		$text = "Modulation amplitude is too high.";
		&show_message( $text );
		return -1;
	}

	if ( $N_runs =~ /^$/ ) {
		$text = "Number of runs hasn't been set.";
		&show_message( $text );
		return -1;
	}

	if ( $N_runs < 1 ) {
		$text = "Number of runs is too small.";
		&show_message( $text );
		return -1;
	}

	if ( $tc_fac < 1 ) {
		$text = "Waiting time factor too small.";
		&show_message( $text );
		return -1;
	}

	if ( $table !~ /^$/ and ! -e $table ) {
		$text = "Table file \"$table\" does not exist.";
		&show_message( $text );
		return -1;
	}

	if ( $table !~ /^$/ and ! -r $table ) {
		$text = "No permission to read table file \"$table\".";
		&show_message( $text );
		return -1;
	}

	if ( $table !~ /^$/ and ! -f $table ) {
		$text = "\"$table\" is not a plain file.";
		&show_message( $text );
		return -1;
	}

	return 0;
}


#############################################

sub show_message {
	my $text = shift;

    $mw->messageBox( '-icon' => 'error',
                     '-type' => 'Ok',
	                 '-title' => 'Error',
                     '-message' => $text );
}


################################################################
################################################################

package fsc2_filesel;

use Tk;
use strict;
use warnings;

my $cur_dir;
my $cur_file;

BEGIN {
    $cur_dir = `pwd`;
    chomp $cur_dir;
}

sub show {
    my ( $top, $file ) = @_;

    my $selected = undef;

    if ( defined $file and $file =~ m|^((.*?)/)?([^/]+)$|o ) {
        $cur_file = $3;
        $cur_dir = $2 ne "" ? $2 : $1 if defined $1;
    } else {
        $cur_file = "";
    }

    my %fs;

    $fs{ top } = $top->Toplevel( '-title' => 'File Select' );
    $fs{ top }->grab;
    $fs{ dir } = $fs{ top }->Entry( -textvariable => \$cur_dir,
                                    -width => 35
                                  )->pack( -side => 'top',
                                           -fill => 'x',
                                           -padx => '2m',
                                           -pady => '1m',
                                         );
    $fs{ list } = $fs{ top }->Scrolled( 'Listbox',
                                        -selectmode => 'single',
                                        -scrollbars => 'osoe',
                                      )->pack( -side => 'top',
                                               -fill => 'both',
                                               -anchor => 's',
                                               -padx => '2m',
                                               -pady => '1m',
                                               -expand => 1 );
    populate_fs( $fs{ list }, $cur_dir );
    $fs{ file } = $fs{ top }->Entry( -textvariable => \$cur_file
                                   )->pack( -side => 'top',
                                            -fill => 'x',
                                            -padx => '2m',
                                            -pady => '1m'
                                          );
    $fs{ frame } = $fs{ top }->Frame( )->pack( -side => 'bottom' );
    $fs{ frame }->Button( -text => 'Cancel',
                          -command => sub { $selected = "" }
                        )->pack( -side => 'left',
                                 -padx => '2m',
                                 -pady => '1m'
                               );
    $fs{ frame }->Button( -text => 'Rescan',
                          -command => [ \&populate_fs, $fs{ list },
                                        $cur_dir ]
                        )->pack( -side => 'left',
                                 -padx => '2m',
                                 -pady => '1m'
                                             );
    $fs{ frame }-> Button( -text => '  Ok  ',
                           -command => sub { $selected = $cur_file }
                         )->pack( -side => 'right',
                                  -padx => '2m',
                                  -pady => '1m'
                                );
    $fs{ list }->bind( '<ButtonPress-1>' =>
                       [ \&new_selection, $fs{ list }, Ev( 'y' ) ] );
    $fs{ top }->bind( '<ButtonPress-4>' =>
                       sub { $fs{ list }->yview( scroll => -1, 'units' ) } );
    $fs{ top }->bind( '<Up>' =>
                       sub { $fs{ list }->yview( scroll => -1, 'units' ) } );
    $fs{ top }->bind( '<Prior>' =>
                       sub { $fs{ list }->yview( scroll => -1, 'page' ) } );
    $fs{ top }->bind( '<ButtonPress-5>' =>
                       sub { $fs{ list }->yview( scroll => 1, 'units' ) } );
    $fs{ top }->bind( '<Down>' =>
                       sub { $fs{ list }->yview( scroll => 1, 'units' ) } );
    $fs{ top }->bind( '<Next>' =>
                       sub { $fs{ list }->yview( scroll => 1, 'page' ) } );
    $fs{ top }->bind( '<Home>' => sub { $fs{ list }->yview( 0 ) } );
    $fs{ top }->bind( '<End>' =>
                      sub { $fs{ list }->yview( $fs{ list }->size - 1 ) } );
    $fs{ top }->bind( '<Delete>' => sub { $selected = "" } );
    $fs{ top }->bind( '<BackSpace>' => sub { $selected = "" } );
    $fs{ top }->bind( '<Return>' => sub { $selected = $cur_file } );
    $fs{ top }->bind( '<Tab>' =>
                      sub { populate_fs( $fs{ list }, $cur_dir ) } );

    $fs{ top }->waitVariable( \$selected );
    $fs{ top }->destroy;
    return undef if $selected =~ /^$/o;
    if ( $cur_dir =~ m|^/$|o ) {
        return "/$selected";
    } else {
        return "$cur_dir/$selected";
    }
}


#############################################

sub new_selection {
    my ( $d, $l, $y ) = @_;
    my $sel = $l->get( $l->nearest( $y ) );
    if ( $sel =~ /^d (.*)$/o ) {
        my $dir = $1;
        $cur_file = "";
        return if $dir =~ /^\.$/o;
        if ( $dir =~ /^\.\.$/o ) {
            $cur_dir =~ s|^(.*?)/[^/]+$|$1|;
            $cur_dir = "/" if $cur_dir =~ /^$/o;
            populate_fs( $l, $cur_dir );
        }
        else {
            if ( $cur_dir =~ m|^/$|o ) {
                $cur_dir .= "$dir";
            } else {
                $cur_dir .= "/$dir";
            }
            populate_fs( $l, $cur_dir );
        }
    } else {
        $cur_file = $sel;
        $cur_file =~ s/^[l ] (.*)$/$1/o;
    }
}


#############################################

sub populate_fs {
    my ( $list, $dir ) = @_;

    $list->delete( 0, 'end' );
    my @ls = `ls -a $dir`;
    for ( @ls ) {
        chomp;
        next unless -d "$dir/$_";
        $list->insert( 'end', "d $_" );
        undef $_;
    }

    for ( @ls ) {
        $list->insert( 'end', "  $_" ) if defined;
    }
}

1;
