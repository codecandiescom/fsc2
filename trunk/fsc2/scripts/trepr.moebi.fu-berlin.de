#!/usr/bin/perl -w

# $Id$

use strict;
use Tk;


my $start_field        = 3350;
my $end_field	       = 3500;
my $field_step	       = 1;
my $sweep_method       = "sweep_up/sweep_down";
my $field_error        = "";
my $hidden_field_error = "";
my $num_runs           = 1;
my $digitizer          = 'TDS520A';
my @channels_1         = qw/ CH1 CH2 MATH1 MATH2 MATH3 /;
my @channels_2         = qw/ CH1 CH2 CH3 CH4 MATH1 MATH2 MATH3 /;
my $channels           = \@channels_1;
my $channel            = $channels_1[ 0 ];
my @trig_channels_1    = ( "Don't set", "CH1", "CH2", "AUX1", "AUX2", "LIN" );
my @trig_channels_2    = ( "Don't set", "CH1", "CH2", "CH3", "CH4",
						   "AUX", "LIN" );
my $trig_channels      = \@trig_channels_1;
my $trig_channel       = $trig_channels_1[ 0 ];
my $num_avg            = 1;
my $how                = 'Start experiment';


my ( $f8_m, $f9_m );


my %fp = ( '-side' => 'top',
		   '-fill' => 'x',
		   '-padx' => '2m',
		   '-pady' => '2m' );

my %wp = ( '-side' => 'left',
		   '-fill' => 'x',
		   '-padx' => '3m',
		   '-expand' => 1 );


my $mw = MainWindow->new( );
$mw->title( "Time resolved EPR" );


my $f1 = $mw->Frame( );
my $f1_l1 = $f1->Label( '-text' => 'Start field:',
						'-width' => '20',
						'anchor' => 'w' );
my $f1_v = $f1->Entry( '-textvariable' => \$start_field,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief' => 'sunken' );
my $f1_l2 = $f1->Label( '-text' => 'G',
						'-width' => 1 );


my $f2 = $mw->Frame( );
my $f2_l1 = $f2->Label( '-text' => 'End field:',
						'-width' => '20',
						'anchor' => 'w' );
my $f2_v = $f2->Entry( '-textvariable' => \$end_field,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief' => 'sunken' );
my $f2_l2 = $f2->Label( '-text' => 'G',
						'-width' => 1 );


my $f3 = $mw->Frame( );
my $f3_l1 = $f3->Label( '-text' => 'Field step size:',
						'-width' => '20',
						'anchor' => 'w' );
my $f3_v = $f3->Entry( '-textvariable' => \$field_step,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief' => 'sunken' );
my $f3_l2 = $f3->Label( '-text' => 'G',
						'-width' => 1 );


my $f5 = $mw->Frame( );
my $f5_l1 = $f5->Label( '-text' => 'Maximum field error:',
						'-width' => '20',
						'anchor' => 'w' );
my $f5_v = $f5->Entry( '-textvariable' => \$field_error,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief' => 'sunken',
					   'state' => $sweep_method eq 'sweep' ?
					   'disabled' : 'normal' );
my $f5_l2 = $f5->Label( '-text' => 'G',
						'-width' => 1 );


my $f4 = $mw->Frame( );
my $f4_l = $f4->Label( '-text' => 'Sweep method:',
						'-width' => '20',
						'anchor' => 'w' );
my $f4_m = $f4->Optionmenu( '-options' =>
							[ ( 'sweep', 'set_field' ) ],
							'-width' => 9,
							'-variable' => \$sweep_method,
						    '-command' => \&set_sweep_method );


my $f6 = $mw->Frame( );
my $f6_l1 = $f6->Label( '-text' => 'Number of runs:',
						'-width' => '20',
						'anchor' => 'w' );
my $f6_v = $f6->Entry( '-textvariable' => \$num_runs,
					   '-width' => '8',
					   '-validate' => 'key',
					   '-validatecommand' => sub { $_[ 0 ] =~ /^\s*\d*\s*$/ },
					   '-relief' => 'sunken' );
my $f6_l2 = $f6->Label( '-text' => ' ',
						'-width' => 1 );

my $f7 = $mw->Frame( );
my $f7_l1 = $f7->Label( '-text' => 'Digitizer:',
						'-width' => '20',
						'anchor' => 'w' );
my $f7_m = $f7->Optionmenu( '-options' => [ 'TDS520', 'TDS520A', 'TDS520C',
											'TDS540', 'TDS744A', 'TDS754A' ],
							'-width' => 9,
							'-command' => \&digitizer_check,
							'-variable' => \$digitizer );


my $f8 = $mw->Frame( );
my $f8_l1 = $f8->Label( '-text' => 'Measurement channel:',
						'-width' => '20',
						'anchor' => 'w' );
$f8_m = $f8->Optionmenu( '-options' => $channels,
						 '-width' => 9,
						 '-variable' => \$channel );

my $f9 = $mw->Frame( );
my $f9_l1 = $f9->Label( '-text' => 'Trigger channel:',
						'-width' => '20',
						'anchor' => 'w' );
$f9_m = $f9->Optionmenu( '-options' => $trig_channels,
						 '-width' => 9,
						 '-variable' => \$trig_channel );

# Get defaults

&get_defs;

# Now show all the stuff

$f1->pack( %fp );
$f1_l1->pack( %wp );
$f1_v->pack( %wp );
$f1_l2->pack( %wp );

$f2->pack( %fp );
$f2_l1->pack( %wp );
$f2_v->pack( %wp );
$f2_l2->pack( %wp );

$f3->pack( %fp );
$f3_l1->pack( %wp );
$f3_v->pack( %wp );
$f3_l2->pack( %wp );

$f4->pack( %fp );
$f4_l->pack( %wp );
$f4_m->pack( %wp );

$f5->pack( %fp );
$f5_l1->pack( %wp );
$f5_v->pack( %wp );
$f5_l2->pack( %wp );

$f6->pack( %fp );
$f6_l1->pack( %wp );
$f6_v->pack( %wp );
$f6_l2->pack( %wp );

$f7->pack( %fp );
$f7_l1->pack( %wp );
$f7_m->pack( %wp );

$f8->pack( %fp );
$f8_l1->pack( %wp );
$f8_m->pack( %wp );

$f9->pack( %fp );
$f9_l1->pack( %wp );
$f9_m->pack( %wp );



$mw->Optionmenu( '-options' => [ ( 'Start experiment', 'Test program',
								   'Load into fsc2' ) ],
				 '-variable' => \$how,
				 '-command' => \&write_out
			   )->pack( '-padx' => '3m',
						'-pady' => '3m' );



$mw->Button( '-text' => 'Quit',
			 '-command' => sub { &store_defs; $mw->destroy }
		   )->pack( '-padx' => '3m',
					'-pady' => '3m' );

MainLoop;



#############################################
# Callback function for the digitizer menu, makes sure only channels that
# exist for the selected digitizer can be picked - fortunately, $channel
# and $trig_channel will be changed automatically if they are not in the
# new set of channels. Actually, the options method for Optionmenus isn't
# officially documented but if you look at the source you'll find it...

sub digitizer_check {

	if ( $digitizer =~ /TDS520(A)?/ ) {
		$channels = \@channels_1;
		$f8_m->options( $channels );
		$trig_channels = \@trig_channels_1;
		$f9_m->options( $trig_channels );
	} else {
		$channels = \@channels_2;
		$f8_m->options( $channels );
		$trig_channels = \@trig_channels_2;
		$f9_m->options( $trig_channels );
	}
}


#############################################
# Checks if a variable is a positive number

sub is_numeric {

	my $new_val = shift;
	$new_val =~ /^((\d+\.?(\d+)?)|(\.(\d+)?))?$/;
}


#############################################
# Checks if a variable is a number

sub is_signed_numeric {

	my $new_val = shift;
	$new_val =~ /^[+-]?((\d+\.?(\d+)?)|(\.(\d+)?))?$/;
}


#############################################
#

sub do_checks {

	if ( $start_field =~ /^\.?$/ ) {
		&show_message( "Start field hasn't been set." );
		return -1;
	}

	if ( $start_field < 1460 ) {
		&show_message( "Start field is too low." );
		return -1;
	}

	if ( $start_field > 19900 ) {
		&show_message( "Start field is too high." );
	}

	if ( $end_field =~ /^\.?$/ ) {
		&show_message( "End field hasn't been set." );
		return -1;
	}

	if ( $end_field < 1460 ) {
		&show_message( "End field is too low." );
		return -1;
	}

	if ( $end_field > 19900 ) {
		&show_message( "End field is too high." );
		return -1;
	}

	if ( $field_step =~ /^\.?$/ ) {
		&show_message( "Field step size hasn't been set." );
		return -1;
	}

	$field_error = 0
		if $sweep_method eq 'set_field' and $field_error =~ /^\.?$/;

	if ( $sweep_method eq 'set_field' and $field_error > 0.1 * $field_step ) {
		&show_message( "Field error larger than\n10% of field step size." );
		return -1;
	}

	if ( abs( $field_step ) > abs( $end_field - $start_field ) ) {
		&show_message( "Field step size larger than\n" .
					   "difference between start and\n" .
					   "end field." );
		return -1;
	}

	if ( $num_runs =~ /^$/ ) {
		&show_message( "Number of runs hasn't been\n" .
					   "set, defaulting to 1." );
		$num_runs = 1;
	}

	if ( $num_runs < 1 ) {
		&show_message( "Invalid number of runs." );
		return -1;
	}

	return 0;
}


#############################################
# Callback for sweep method menu

sub set_sweep_method {
	if ( $sweep_method eq 'sweep' ) {
		$f5_v->configure( 'state' => 'disabled' );
		$hidden_field_error = $field_error;
		$field_error = "";
	} else {
		$f5_v->configure( 'state' => 'normal' );
		$field_error = $hidden_field_error;
	}
}


#############################################
# Reads default settings

sub get_defs {

local *F;
my $ne;

if ( $ARGV[ 0 ] ) {
	open( F, "<$ARGV[ 0 ]" ) or return;
} else {
	open( F, "<$ENV{ HOME }/.fsc2/trepr" ) or return;
}

goto done_reading unless defined( $ne = <F> ) and $ne =~ /^#/;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$start_field = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$end_field = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$field_step = $ne;

goto done_reading unless defined( $ne = <F> )
	and $ne =~ /^(sweep)|(set_field)$/;
chomp $ne;
$sweep_method = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$hidden_field_error = $ne;
$field_error = $ne if $sweep_method =~ /set_field/;

goto done_reading unless defined( $ne = <F> ) and $ne =~ /^\d+$/;
chomp $ne;
$num_runs = $ne;

goto done_reading unless defined( $ne = <F> ) and
	$ne =~ /^TDS(520)|(520A)|(520C)|(540)|(744A)|(754A)$/;
chomp $ne;
$digitizer = $ne;

goto done_reading unless defined( $ne = <F> ) and
	$ne =~ /^(CH[1-4])|(MATH[1-3])$/;
chomp $ne;
$channel = $ne;

digitizer_check();

goto done_reading unless defined( $ne = <F> ) and
	$ne =~ /^(CH[1-4])|(AUX[12]?)|(LIN)$/;
chomp $ne;
$trig_channel = $ne;

digitizer_check();

done_reading:
close F;
}


#############################################
# Stores current settings as default on exit

sub store_defs {
	local *F;

	mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
	open( F, ">$ENV{ HOME }/.fsc2/trepr" ) or return;

	$start_field = 0 if $start_field eq ".";
	$end_field = 0 if $end_field eq ".";
	$field_step = 0 if $field_step eq ".";
	$field_error = 0 if $field_error eq ".";

	print F "# Do not edit - created automatically!\n";
	print F "$start_field\n$end_field\n$field_step\n$sweep_method\n" .
	        "$hidden_field_error\n$num_runs\n$digitizer\n$channel\n" .
			"$trig_channel\n";

	close F;
}


#############################################
# Shows an error message box

sub show_message {
	my $text = shift;

	$mw->messageBox( '-icon' => 'error',
					 '-type' => 'Ok',
					 '-title' => 'Error',
					 '-message' => $text );
}


#############################################
# Checks the paramter and then writes the EDL program

sub write_out {

return if &do_checks( ) != 0;

local *F;

open( F, "|fsc2_" . lc $how )
	or die "Can't find utility fsc2_" . lc $how . ".\n";

print F
"DEVICES:

er035m_s;
aeg_x_band;
$digitizer;


VARIABLES:

start_field = $start_field G;
end_fied= $end_field G;
field_step = $field_step G;


field = start_field;
N = int( abs( ( end_field - start_field ) / field_step ) ) + 1;
I;

Num_avg = $num_avg;
curve[ * ];

Rec_len;
trig_pos;
time_base;
time_res;
min_time;

File;
Pretrigger;
ground;


PREPARATIONS:

init_2d( 2, 0, N, 0, 1, start_field, field_step, \"Time / us\",
	     \"Field / G\", \"Signal / mV \" );

magnet_setup( start_field, field_step );


EXPERIMENT:

Rec_len   = digitizer_record_length( );
trig_pos  = digitizer_trigger_position( );
time_base = digitizer_timebase( );
time_res  = time_base / 50.0;
min_time = - trig_pos * Rec_len * time_res;
Pretrigger = int( 0.9 * trig_pos * Rec_len );

change_scale( min_time * 1.0e6, time_res * 1.0e6 );

digitizer_num_averages( Num_avg );
digitizer_trigger_channel( $trig_channel );

File = get_file( );
fsave( File, \"% Start field     = # G\\n\"
	         \"% End field       = # G\\n\"
	     	 \"% Field step size = # G\\n\"
	     	 \"% Num. averages   = #\\n\"
	     	 \"% Time resolution = # us\\n\"
	     	 \"% Trigger pos.    = #\\n\"
	     	 \"% Record length   = #\\n\",
	     start_cur, end_cur, cur_step, Num_avg, time_res * 1.0e6,
	     trig_pos * Rec_len, Rec_len );
save_program( File, \"% \" );
save_comment( File, \"% \" );


FOR I = 1 : N {
    digitizer_start_acquisition( );
    curve = digitizer_get_curve( $channel );

    IF Pretrigger != 0 {
       ground = mean( curve, 1, Pretrigger );
    }

    display( 1, I, curve * 1.0e3, 1,
             1, I, ( curve - ground ) * 1.0e3, 2 );

    fsave( File, \"\\n% #.: Field = # G\\n\\n\", I, cur );
    save( File, curve );

    field = sweep_up( );
}
";

}
