#!/usr/bin/perl
# -*- cperl -*-
#
# $Id$
#
# Copyright (C) 1999-2007 Jens Thoms Toerring
#
# This file is part of fsc2.
#
# Fsc2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Fsc2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fsc2; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.


use strict;
use warnings;
use Tk;
use Tk::Balloon;
use POSIX;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
    if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;


my $ER032M_MIN_FIELD             = -50.0;
my $ER032M_MAX_FIELD             = 23000.0;
my $ER032M_MAX_SWEEP_WIDTH       = 16000.0;
my $ER032M_MIN_FIELD_STEP        = 1e-3;


my $start_field        = 3350;
my $end_field          = 3500;
my $field_step         = 1;
my $tc_fact            = 1;
my $tc                 = "Don't set";
my $sens1              = "Don't set";
my $old_sens1          = $sens1;
my $sens2              = "E+3";
my $old_sens2          = $sens2;
my $phase;
my $mod_freq           = "Don't set";
my $mod_amp            = 0.1;
my $sec_freq           = 0;
my $how                = 'Start experiment';


my %fp = ( '-side' => 'top',
           '-fill' => 'x',
           '-padx' => '2m',
           '-pady' => '2m' );

my %wp = ( '-side' => 'left',
           '-fill' => 'x',
           '-padx' => '3m',
           '-expand' => 1 );

# Get defaults

&get_defs;

# Create all the graphic stuff

my $mw = MainWindow->new( );
$mw->title( "cw_epr" );
my $balloon = $mw->Balloon( );


my $f1 = $mw->Frame( );
my $f1_l1 = $f1->Label( '-text'           => 'Start field:',
                        '-width'          => '20',
                        '-anchor'         => 'w' );
my $f1_v = $f1->Entry( '-textvariable'    => \$start_field,
                       '-width'           => '8',
                       '-validate'        => 'key',
                       '-validatecommand' => \&is_numeric,
                       '-relief'          => 'sunken' );
$balloon->attach( $f1_v, '-balloonmsg'    =>
                         "Enter the start field (in Gauss)" );
my $f1_l2 = $f1->Label( '-text'           => 'G',
                        '-width'          => 1 );

$f1->pack( %fp );
$f1_l1->pack( %wp );
$f1_v->pack( %wp );
$f1_l2->pack( %wp );


my $f2 = $mw->Frame( );
my $f2_l1 = $f2->Label( '-text'          => 'End field:',
                        '-width'         => '20',
                        '-anchor'        => 'w' );
my $f2_v = $f2->Entry( '-textvariable'   => \$end_field,
                       '-width'          => '8',
                       '-validate'       => 'key',
                       '-validatecommand'=> \&is_numeric,
                       '-relief'         => 'sunken' );
$balloon->attach( $f2_v, '-balloonmsg'   => "Enter the end field (in Gauss)" );
my $f2_l2 = $f2->Label( '-text'          => 'G',
                        '-width'         => 1 );

$f2->pack( %fp );
$f2_l1->pack( %wp );
$f2_v->pack( %wp );
$f2_l2->pack( %wp );


my $f3 = $mw->Frame( );
my $f3_l1 = $f3->Label( '-text'           => 'Field step size:',
                        '-width'          => '20',
                        '-anchor'         => 'w' );
my $f3_v = $f3->Entry( '-textvariable'    => \$field_step,
                       '-width'           => '8',
                       '-validate'        => 'key',
                       '-validatecommand' => \&is_numeric,
                       '-relief'          => 'sunken' );
$balloon->attach( $f3_v, '-balloonmsg'    =>
                         "Enter the size of the field steps (in Gauss)" );
my $f3_l2 = $f3->Label( '-text'           => 'G',
                        '-width'          => 1 );

$f3->pack( %fp );
$f3_l1->pack( %wp );
$f3_v->pack( %wp );
$f3_l2->pack( %wp );


my $f10 = $mw->Frame( );
my $f10_l = $f10->Label( '-text'          => 'Amplification:',
                         '-width'         => '20',
                         '-anchor'       => 'w' );
my $f10_m1 = $f10->Optionmenu( '-options'  =>
                               [ ( "Don't set", '1.0', '1.25', '1.5', '2.0',
                                   '2.5', '3.0', '4.0', '5.0', '6.0',
                                   '8.0' ) ],
                               '-width'    => 7,
                               '-textvariable' => \$sens1,
                               '-command' => \&sens_check );
$balloon->attach( $f10_m1, '-balloonmsg' =>
                  "Select the lock-in amplifiers amplification factor" );
my $f10_m2 = $f10->Optionmenu( '-options'  =>
                               [ ( 'E+1', 'E+2', 'E+3', 'E+4', 'E+5', 'E+6',
                                   'E+7' ) ],
                               '-width'    => 3,
                               '-textvariable' => \$sens2,
                               '-command' => \&sens_check );
$balloon->attach( $f10_m2, '-balloonmsg' =>
                  "Select the lock-in amplifiers amplification factor" );

$f10->pack( %fp );
$f10_l->pack( %wp );
$f10_m1->pack( %wp );
$f10_m2->pack( %wp );


my $f9 = $mw->Frame( );
my $f9_l = $f9->Label( '-text'          => 'Time constant (tc):',
                       '-width'         => '20',
                       '-anchor'        => 'w' );
my $f9_m = $f9->Optionmenu( '-options'  =>
                            [ ( "Don't set", '2.5 ms', '5 ms', '10 ms',
                                '20 ms', '40 ms', '80 ms', '160 ms', '320 ms',
                                '640 ms', '1.25 s', '2.5 s', '5 s' ) ],
                            '-width'    => 9,
                            '-textvariable' => \$tc );
$balloon->attach( $f9_m, '-balloonmsg' =>
                         "Select the lock-in amplifiers time constant" );
$f9->pack( %fp );
$f9_l->pack( %wp );
$f9_m->pack( %wp );


my $f7 = $mw->Frame( '-width'             => '29' );
my $f7_l1 = $f7->Label( '-text'           => 'Waiting time:',
                        '-width'          => '20',
                        '-anchor'         => 'w' );
my $f7_v = $f7->Entry( '-textvariable'    => \$tc_fact,
                       '-width'           => '7',
                       '-validate'        => 'key',
                       '-validatecommand' => \&is_numeric,
                       '-relief'          => 'sunken' );
my $f7_l2 = $f7->Label( '-text'           => '* tc',
                        '-width'          => 2 );
$balloon->attach( $f7_v, '-balloonmsg' =>
                         "Enter the number of lock-in time constants\n" .
                         "to wait before a new data point is recorded" );

$f7->pack( %fp );
$f7_l1->pack( %wp );
$f7_v->pack( %wp );
$f7_l2->pack( %wp );

my $f4 = $mw->Frame( );
my $f4_l1 = $f4->Label( '-text'           => 'Phase:',
                        '-width'          => '20',
                        '-anchor'         => 'w' );
my $f4_v = $f4->Entry( '-textvariable'    => \$phase,
                       '-width'           => '8',
                       '-validate'        => 'key',
                       '-validatecommand' => sub { $_[ 0 ] =~ /^[+-]?\d*$/ },
                       '-relief'          => 'sunken' );
my $f4_l2 = $f4->Label( '-text'           => ' ',
                        '-width'          => 1 );
$balloon->attach( $f4_v, '-balloonmsg'    =>
                  "Set the lock-in amplifiers phase"  );
$f4->pack( %fp );
$f4_l1->pack( %wp );
$f4_v->pack( %wp );
$f4_l2->pack( %wp );

my $f5 = $mw->Frame( );
my $f5_l = $f5->Label( '-text'          => 'Modulation frequency:',
                       '-width'         => '20',
                       '-anchor'        => 'w' );
my $f5_m = $f5->Optionmenu( '-options'  =>
                            [ ( "Don't set", '100 kHz', '50 kHz', '25 kHz',
                                '12.5 kHz', '6.25 kHz', '3.125 kHz',
							    '1.5625 kHz' )],
                            '-width'    => 9,
                            '-textvariable' => \$mod_freq );
$balloon->attach( $f5_m, '-balloonmsg' =>
                         "Select the lock-in modulation frequency" );
$f5->pack( %fp );
$f5_l->pack( %wp );
$f5_m->pack( %wp );

my $f8 = $mw->Frame( );
my $f8_l1 = $f8->Label( '-text'           => 'Modulation amplitude:',
                        '-width'          => '20',
                        '-anchor'         => 'w' );
my $f8_v = $f8->Entry( '-textvariable'    => \$mod_amp,
                       '-width'           => '8',
                       '-validate'        => 'key',
                       '-validatecommand' => \&is_numeric,
                       '-relief'          => 'sunken' );
my $f8_l2 = $f8->Label( '-text'           => '%',
                        '-width'          => 1 );
$balloon->attach( $f8_v, '-balloonmsg'    =>
                  "Set the lock-in amplifiers modulation amplitude" );
$f8->pack( %fp );
$f8_l1->pack( %wp );
$f8_v->pack( %wp );
$f8_l2->pack( %wp );


my $f12 = $mw->Frame( );
my $f12_l1 = $f12->Label( '-text'           => 'Chopper sector freq.:',
						  '-width'          => '20',
						  '-anchor'         => 'w' );
my $f12_v = $f12->Entry( '-textvariable'    => \$sec_freq,
						 '-width'           => '8',
						 '-validate'        => 'key',
						 '-validatecommand' => \&is_numeric,
						 '-relief'          => 'sunken' );
my $f12_l2 = $f12->Label( '-text'           => 'Hz',
						  '-width'          => 1 );
$balloon->attach( $f12_v, '-balloonmsg'    =>
                  "Set the chopper's sector rotation frequency\n" );
$f12->pack( %fp );
$f12_l1->pack( %wp );
$f12_v->pack( %wp );
$f12_l2->pack( %wp );


$mw->Optionmenu( '-options' => [ ( 'Start experiment', 'Test program',
                                   'Load into fsc2' ) ],
                 '-textvariable' => \$how,
               )->pack( '-padx' => '3m',
                        '-pady' => '3m' );

my $f11 = $mw->Frame( );
my $f11_a = $mw->Button( '-text' => 'Apply',
                         '-command' => \&write_out );
my $f11_q = $mw->Button( '-text' => 'Quit',
                         '-command' => sub { &store_defs; $mw->destroy } );
$f11->pack( '-side' => 'top',
            '-fill' => 'x',
            '-padx' => '4m' );
$f11_a->pack( %wp, '-padx' => '5m', '-pady' => '3m' );
$f11_q->pack( %wp, '-padx' => '5m', '-pady' => '3m' );

MainLoop;


#############################################

sub get_defs {

    my $f;
    my $ne;

    if ( $ARGV[ 0 ] ) {
        open( $f, "<$ARGV[ 0 ]" ) or return;
    } else {
        open( $f, "<$ENV{ HOME }/.fsc2/cw_epr" ) or return;
    }

    goto done_reading unless defined( $ne = <$f> ) and $ne =~ /^#/;

    goto done_reading unless defined( $ne = <$f> ) and is_numeric( $ne );
    chomp $ne;
    $start_field = $ne;

    goto done_reading unless defined( $ne = <$f> ) and is_numeric( $ne );
    chomp $ne;
    $end_field = $ne;

    goto done_reading unless defined( $ne = <$f> ) and is_numeric( $ne );
    chomp $ne;
    $field_step = $ne;

    goto done_reading unless defined( $ne = <$f> )
        and $ne =~ /^(Don't set)|(\d\.\d*)$/;
    chomp $ne;
    $sens1 = $ne;

    goto done_reading unless defined( $ne = <$f> ) and $ne =~ /^E\+\d$/;
    chomp $ne;
    $sens2 = $ne;

    goto done_reading unless defined( $ne = <$f> )
        and $ne =~ /^(Don't set)|(\d+(\.\d+)? m?s)$/;
    chomp $ne;
    $tc = $ne;

    goto done_reading unless defined( $ne = <$f> ) and is_numeric( $ne );
    chomp $ne;
    $tc_fact = $ne;

    goto done_reading unless defined( $ne = <$f> )
        and $ne =~ /^([+-]?\d+)|(unset)$/;
    chomp $ne;
    $phase = $ne if $ne =~ /^[+-]?\d+$/;

    goto done_reading unless defined( $ne = <$f> )
        and $ne =~ /^(Don't set)|(\d\.\d* kHz)$/;
    chomp $ne;
    $mod_freq = $ne;

    goto done_reading unless defined( $ne = <$f> ) and
		              ( is_numeric( $ne ) or $ne =~ /^$/ );
    chomp $ne;
    goto done_reading if $ne !~ /^$/ and $ne < 0;
    $mod_amp = $ne;

    goto done_reading unless defined( $ne = <$f> ) and
		              ( is_numeric( $ne ) or $ne =~ /^$/ );
    chomp $ne;
    goto done_reading if $ne !~ /^$/ and $ne < 0;
    $sec_freq = $ne;

    goto done_reading unless defined( $ne = <$f> )
        and $ne =~ /^(Start experiment)|(Test program)|(Load into fsc2)$/;
    chomp $ne;
    $how = $ne;

  done_reading:
    close F;
}


#############################################

sub store_defs {
    my $f;
    my $sens;

    mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
    open( $f, ">$ENV{ HOME }/.fsc2/cw_epr" ) or return;

    $start_field = 0 if $start_field eq ".";
    $end_field = 0 if $end_field eq ".";
    $field_step = 0 if $field_step eq ".";
	$mod_amp = 0 if $mod_amp eq ".";

    print $f "# Do not edit - created automatically!\n";

    print $f "$start_field\n$end_field\n$field_step\n$sens1\n" .
            "$sens2\n$tc\n$tc_fact\n";

    if ( defined( $phase ) and $phase !~ /^$/ ) {
        print $f "$phase\n";
    } else {
        print $f "unset\n";
    }

    print $f "$mod_freq\n$mod_amp\n$sec_freq\n$how\n";

    close $f;
}


#############################################

sub sens_check {

    if ( $sens1 =~ /^\d\.\d+/ ) {
        if ( $sens2 eq "E+7" and $sens1 ne "1.0" ) {
            show_message( "Maximum sensitivity is 1.0 E+7." );
            $sens1 = $old_sens1;
            $sens2 = $old_sens2;
            return;
        } elsif ( $sens2 eq "E+1" and $sens1 =~ /^1/) {
            show_message( "Minimum sensitivity is 2.0 E+1." );
            $sens1 = $old_sens1;
            $sens2 = $old_sens2;
            return;
        }
    }

    $old_sens1 = $sens1;
    $old_sens2 = $sens2;
}


#############################################

sub is_numeric {

    my $new_val = shift;
    $new_val =~ /^((\d+\.?(\d+)?)|(\.(\d+)?))?$/;
}


#############################################

sub show_message {
    my $text = shift;

    $mw->messageBox( '-icon' => 'error',
                     '-type' => 'Ok',
                     '-title' => 'Error',
                     '-message' => $text );
}


#############################################


sub do_checks {

    if ( $start_field =~ /^\.?$/ ) {
        &show_message( "Start field hasn't been set." );
        return -1;
    }

    if ( $start_field < $ER032M_MIN_FIELD ) {
        &show_message( "Start field is too low." );
        return -1;
    }

    if ( $start_field > $ER032M_MAX_FIELD ) {
        &show_message( "Start field is too high." );
    }

    if ( $end_field =~ /^\.?$/ ) {
        &show_message( "End field hasn't been set." );
        return -1;
    }

    if ( $end_field < $ER032M_MIN_FIELD ) {
        &show_message( "End field is too low." );
        return -1;
    }

    if ( $end_field > $ER032M_MAX_FIELD ) {
        &show_message( "End field is too high." );
        return -1;
    }

    if ( abs( $end_field - $start_field ) > $ER032M_MAX_SWEEP_WIDTH ) {
        &show_message( "Sweep width is too large,\n" .
                       "maximum sweep is $ER032M_MAX_SWEEP_WIDTH G." );
        return -1;
    }

    if ( $field_step =~ /^\.?$/ ) {
        &show_message( "Field step size hasn't been set." );
        return -1;
    }

    if ( abs( $field_step ) < $ER032M_MIN_FIELD_STEP ) {
        &show_message( "Field step size is too small,\n" .
                       "minimum is ". ( $ER032M_MIN_FIELD_STEP * 1000 ) .
                       "mG." );
        return -1;
    }

    if ( abs( $field_step ) > abs( $end_field - $start_field ) ) {
        &show_message( "Field step size larger than\n" .
                       "difference between start and\n" .
                       "end field." );
        return -1;
    }

	if ( $mod_amp !~ /^\.?$/ && $mod_amp > 100 ) {
		&show_message( "Maximum modulation amplitude is 100 %." );
		return -1;
	}

    return 0;
}


#############################################

sub write_out {

    return if &do_checks( ) != 0;

    local *F;
    my $ct;

    open( F, "|fsc2_" . lc $how )
        or die "Can't find utility fsc2_" . lc $how . ".\n";

    print F "DEVICES:

er032m;
er023m;
pci_mio_16e_1;
gg_chopper;


VARIABLES:

start_field = $start_field G;
end_field = $end_field G;
field_step = $field_step G;
N_points = ceil( abs( end_field - start_field ) / abs( field_step ) ) + 1;
data[ N_points ];
new_data[ N_points ];
new_avg;
I, J;
File1, File2;
tc, wt;
sec_freq = $sec_freq;
Scans_Done = 0;
Run_Count;
B_Stop;


PREPARATIONS:

magnet_setup( start_field, field_step );
chopper_sector_frequency( sec_freq );
init_1d( 3, N_points, start_field, field_step, \"Magnetic Field / G\",
         \"Signal / V\" );


EXPERIMENT:

File1 = get_file( \"File for storing all data:\" );
File2 = get_file( \"File for storing averaged data:\" );
save_comment( File2, \"# \" );\n\n";

print F "lockin_sensitivity( $sens1$sens2 );\n" if $sens1 !~ /^Don't set$/;
print F "lockin_phase( $phase );\n"
    if defined( $phase ) and $phase =~ /^[+-]?\d+$/;
print F "lockin_ref_freq( $mod_freq );\n" if $mod_freq !~ /^Don't set$/;
print F "lockin_ref_level( $mod_amp G );\n" if $mod_amp !~ /^\.?$/;
    if ( $tc !~ /^Don't set$/ ) {
        print F "tc = $tc;
lockin_time_constant( tc );\n";
        $tc =~ /^(\d+(\.\d+)?) (m?)s$/;
        if ( defined $3 and $3 eq "m" ) {
            $ct = POSIX::floor( $1 / 0.32 + 0.5 );
            $ct = 10 if $ct < 10;
            print F "lockin_conversion_time( " . ( $ct * 3.2e-1 ) . " ms );\n";
        } else {
            $ct = POSIX::floor( $1 / 0.32e-3 + 0.5 );
            $ct = 9999 if $ct > 9999;
            print F "lockin_conversion_time( " . ( $ct * 3.2e-4 ) . " s );\n";
        }
    } else {
        print F "tc = lockin_time_constant( );\n";
    }

print F "

hide_toolbox( \"ON\" );
J = 0;
Run_Count = output_create( \"INT_OUTPUT\", J, \"Current scan\" );
B_Stop = button_create( \"PUSH_BUTTON\", \"Stop at end of scan\" );
hide_toolbox( \"OFF\" );

FOREVER {
    J += 1;

	output_value( Run_Count, J );
    delta_time( );\n\n";

if ( $start_field <= $end_field ) {
	print F "    FOR I = 1 : N_points {\n";
} else {
	print F "    FOR I = N_points : 1 : -1 {\n";
}
print F "        wt = ";
print F "$tc_fact * " if $tc_fact != 1;
print F "tc - delta_time( );
        IF ( wt > 1 ms ) {
            wait( wt );
        }
        new_data[ I ] = lockin_get_data( );
	    new_avg = add_to_average( data[ I ], new_data[ I ], J );\n";
if ( $start_field <= $end_field ) {
	print F "        magnet_sweep_up( );\n";
} else {
	print F "        magnet_sweep_down( );\n";
}
print F "            fsave( File1, \"# #\\n\", ";
if ( $start_field <= $end_field ) {
	print F "start_field + ( I - 1 ) * field_step,\n";
} else {
	print F "end_field + ( I - 1 ) * field_step,\n";
}
print F "		           new_avg );
        display( I, new_avg, 1 );
        display( I, new_data[ I ], 3 );
    }

    data = add_to_average( data, new_data, J );
    Scans_Done += 1;
    clear_curve( 1 );
    display( 1, data, 2 );
    fsave( File1, \"\\n\" );
    magnet_reset_field( );

	IF button_state( B_Stop ) {
		BREAK;
	}
}


ON_STOP:

IF Scans_Done > 0 {
    fsave( File2, \"\\# Start Field:          # G\\n\", start_field );
    fsave( File2, \"\\# End Field:            # G\\n\", start_field );
    fsave( File2, \"\\# Field Step:           # G\\n\", field_step );
    fsave( File2, \"\\# Number of Points:     # \\n\", N_points );
    fsave( File2, \"\\# Number of scans:      # \\n\", J );
    fsave( File2, \"\\# Time constant:        # ms\\n\",
           lockin_time_constant( ) / 1 ms );
    fsave( File2, \"\\# Modulation Amplitude: # %\\n\", lockin_ref_level( ) );
    fsave( File2, \"\\# Modulation Phase:     # Deg\\n\", lockin_phase( ) );
    fsave( File2, \"\\# Modulation Frequency: # kHz\\n\",
           lockin_ref_freq( ) / 1 kHz );
    fsave( File2, \"\\# Receiver Gain:        # \\n\", lockin_sensitivity( ) );
    fsave( File2, \"\\# Time Constant:        # \\n\",
           lockin_time_constant( ) );
    fsave( File2, \"\\# Conversion Time:      # \\n\",
           lockin_conversion_time( ) );
    fsave( File2, \"\\# Chopper sector freq:  # Hz\\n\", sec_freq );

    FOR I = 1 : N_points {
        fsave( File2, \"# #\\n\", ";
if ( $start_field <= $end_field ) {
	print F "start_field + ( I - 1 ) * field_step,\n";
} else {
	print F "end_field + ( I - 1 ) * field_step,\n";
}
print F "               data[ I ] );
    }
}
";

	close F;

	# Notify the user if sending the program to fsc2 failed for some reasons

	my $text;
	if ( $? != 0 ) {
		 if ( $? >> 8 == 255 ) {
			 $text = "Internal error.";
		 } elsif ( $? >> 8 == 1 ) {
			 $text = "Someone else is running fsc2.";
		 } elsif ( $? >> 8 == 2 ) {
			 $text = "fsc2 is currently busy.";
		 } elsif ( $? >> 8 == 3 ) {
			 $text = "Internal error of fsc2.";
		 } elsif ( $? >> 8 == 4 ) {
			 $text = "Could not start fsc2.";
		 } else {
			 $text = "Something strange is going on here.";
		 }

		 &show_message( $text ) if $? >> 8 != 0;
	 }
}
