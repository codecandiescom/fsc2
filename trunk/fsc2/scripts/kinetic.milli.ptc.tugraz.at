#!/usr/bin/perl
# -*- cperl -*-
# Generated by fsc2_guify from graz_1.EDL on Sun Apr 10 16:29:30 CEST 2005

use strict;
use warnings;
use Tk;
use Tk::Balloon;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
    if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my %fp = ( -side => 'top',
           -fill => 'x',
           -padx => '2m',
           -pady => '2m' );
my %wp = ( -side => 'left',
           -fill => 'x',
           -expand => 1 );
my %up = ( -side => 'left' );
my $geom;

my $fsc2_how_to_run = "Test program";
my @fsc2_how_to_run = ( "Start experiment",
                        "Test program",
                        "Load into fsc2" );
my $fsc2_main_window = MainWindow->new( -title =>
							   ( split /\./, ( split /\//, $0 )[ -1 ] )[ 0 ] );
my $fsc2_main_frame = $fsc2_main_window->Frame( -relief => "ridge",
                                                -borderwidth => "1m" );
my $fsc2_balloon = $fsc2_main_frame->Balloon( );
my $fsc2_apply_frame = $fsc2_main_window->Frame( );
my $fsc2_apply_button = $fsc2_apply_frame->Button( -text => "Apply",
                                                   -command => \&write_out );
$fsc2_apply_button->bind( "all", "<Alt-a>" => \&write_out );
my $fsc2_quit_button = $fsc2_apply_frame->Button( -text => "Quit",
                 -command => sub { $fsc2_main_window->geometry =~
							   					   /^\d+x\d+([+-]\d+[+-]\d+)$/;
							   	   $geom = $1;
							   	   &store_defs;
                                   $fsc2_main_window->destroy } );
$fsc2_quit_button->bind( "all",
                         "<Alt-q>" =>
                         		sub { $fsc2_main_window->geometry =~
							   					   /^\d+x\d+([+-]\d+[+-]\d+)$/;
							   		  $geom = $1;
							   		  &store_defs;
									  $fsc2_main_window->destroy } );
$fsc2_apply_frame->pack( -side => "bottom",
                         -fill => "x",
                         -padx => "4m" );

# === START_FIELD float [ 1460 : 19900 ] [ 3000 ] "Start field" "G"

my %START_FIELD;
$START_FIELD{ tk_frame } = $fsc2_main_frame->Frame( );
$START_FIELD{ tk_label } = $START_FIELD{ tk_frame }->Label( -text => "Start field",
-width => 20,
-anchor => 'w' );
$START_FIELD{ value } = 3000;
$START_FIELD{ min } = 1460;
$START_FIELD{ max } = 19900;
$START_FIELD{ tk_entry } = $START_FIELD{ tk_frame }->Entry( -textvariable => \$START_FIELD{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $START_FIELD{ min } ? $START_FIELD{ min } : undef ),
( defined $START_FIELD{ max } ? $START_FIELD{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $START_FIELD{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $START_FIELD{ min } ? $START_FIELD{ min } : '-inf' ) .
" : " . ( defined $START_FIELD{ max } ? $START_FIELD{ max } : '+inf' ) . " ]" );
$START_FIELD{ tk_unit } = $START_FIELD{ tk_frame }->Label( -text => "G",
-width => 5 );
$START_FIELD{ tk_frame }->pack( %fp );
$START_FIELD{ tk_label }->pack( %wp );
$START_FIELD{ tk_entry }->pack( %wp );
$START_FIELD{ tk_unit  }->pack( %up );

# === END_FIELD float [ 1460 : 19900 ] [ 3500 ] "End field" "G"

my %END_FIELD;
$END_FIELD{ tk_frame } = $fsc2_main_frame->Frame( );
$END_FIELD{ tk_label } = $END_FIELD{ tk_frame }->Label( -text => "End field",
-width => 20,
-anchor => 'w' );
$END_FIELD{ value } = 3500;
$END_FIELD{ min } = 1460;
$END_FIELD{ max } = 19900;
$END_FIELD{ tk_entry } = $END_FIELD{ tk_frame }->Entry( -textvariable => \$END_FIELD{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $END_FIELD{ min } ? $END_FIELD{ min } : undef ),
( defined $END_FIELD{ max } ? $END_FIELD{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $END_FIELD{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $END_FIELD{ min } ? $END_FIELD{ min } : '-inf' ) .
" : " . ( defined $END_FIELD{ max } ? $END_FIELD{ max } : '+inf' ) . " ]" );
$END_FIELD{ tk_unit } = $END_FIELD{ tk_frame }->Label( -text => "G",
-width => 5 );
$END_FIELD{ tk_frame }->pack( %fp );
$END_FIELD{ tk_label }->pack( %wp );
$END_FIELD{ tk_entry }->pack( %wp );
$END_FIELD{ tk_unit  }->pack( %up );

# === FIELD_STEP float [ 0.005 : 1000 ] [ 1 ] "Field step size" "G"

my %FIELD_STEP;
$FIELD_STEP{ tk_frame } = $fsc2_main_frame->Frame( );
$FIELD_STEP{ tk_label } = $FIELD_STEP{ tk_frame }->Label( -text => "Field step size",
-width => 20,
-anchor => 'w' );
$FIELD_STEP{ value } = 1;
$FIELD_STEP{ min } = 0.005;
$FIELD_STEP{ max } = 1000;
$FIELD_STEP{ tk_entry } = $FIELD_STEP{ tk_frame }->Entry( -textvariable => \$FIELD_STEP{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } : undef ),
( defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $FIELD_STEP{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } : '-inf' ) .
" : " . ( defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } : '+inf' ) . " ]" );
$FIELD_STEP{ tk_unit } = $FIELD_STEP{ tk_frame }->Label( -text => "G",
-width => 5 );
$FIELD_STEP{ tk_frame }->pack( %fp );
$FIELD_STEP{ tk_label }->pack( %wp );
$FIELD_STEP{ tk_entry }->pack( %wp );
$FIELD_STEP{ tk_unit  }->pack( %up );

# === SEC_FREQ float [ 39.22 : 200 ] [ 200 ] "Chopper sector freq." "Hz"

my %SEC_FREQ;
$SEC_FREQ{ tk_frame } = $fsc2_main_frame->Frame( );
$SEC_FREQ{ tk_label } = $SEC_FREQ{ tk_frame }->Label( -text => "Chopper sector freq.",
-width => 20,
-anchor => 'w' );
$SEC_FREQ{ value } = 200;
$SEC_FREQ{ min } = 39.22;
$SEC_FREQ{ max } = 200;
$SEC_FREQ{ tk_entry } = $SEC_FREQ{ tk_frame }->Entry( -textvariable => \$SEC_FREQ{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $SEC_FREQ{ min } ? $SEC_FREQ{ min } : undef ),
( defined $SEC_FREQ{ max } ? $SEC_FREQ{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $SEC_FREQ{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $SEC_FREQ{ min } ? $SEC_FREQ{ min } : '-inf' ) .
" : " . ( defined $SEC_FREQ{ max } ? $SEC_FREQ{ max } : '+inf' ) . " ]" );
$SEC_FREQ{ tk_unit } = $SEC_FREQ{ tk_frame }->Label( -text => "Hz",
-width => 5 );
$SEC_FREQ{ tk_frame }->pack( %fp );
$SEC_FREQ{ tk_label }->pack( %wp );
$SEC_FREQ{ tk_entry }->pack( %wp );
$SEC_FREQ{ tk_unit  }->pack( %up );

# === N_SHOTS int [ 1 : ] [ 30 ] "Number of averages"

my %N_SHOTS;
$N_SHOTS{ tk_frame } = $fsc2_main_frame->Frame( );
$N_SHOTS{ tk_label } = $N_SHOTS{ tk_frame }->Label( -text => "Number of averages",
-width => 20,
-anchor => 'w' );
$N_SHOTS{ value } = 30;
$N_SHOTS{ min } = 1;
$N_SHOTS{ max } = undef;
$N_SHOTS{ tk_entry } = $N_SHOTS{ tk_frame }->Entry( -textvariable => \$N_SHOTS{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ int_check( shift,
( defined $N_SHOTS{ min } ? $N_SHOTS{ min } : undef ),
( defined $N_SHOTS{ max } ? $N_SHOTS{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $N_SHOTS{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $N_SHOTS{ min } ? $N_SHOTS{ min } : '-inf' ) .
" : " . ( defined $N_SHOTS{ max } ? $N_SHOTS{ max } : '+inf' ) . " ]" );
$N_SHOTS{ tk_unit } = $N_SHOTS{ tk_frame }->Label( -text => "",
-width => 5 );
$N_SHOTS{ tk_frame }->pack( %fp );
$N_SHOTS{ tk_label }->pack( %wp );
$N_SHOTS{ tk_entry }->pack( %wp );
$N_SHOTS{ tk_unit  }->pack( %up );

# === N_RES int [ 1 : 6250 ] [ 500 ] "Points per rotation"

my %N_RES;
$N_RES{ tk_frame } = $fsc2_main_frame->Frame( );
$N_RES{ tk_label } = $N_RES{ tk_frame }->Label( -text => "Points per rotation",
-width => 20,
-anchor => 'w' );
$N_RES{ value } = 500;
$N_RES{ min } = 1;
$N_RES{ max } = 6250;
$N_RES{ tk_entry } = $N_RES{ tk_frame }->Entry( -textvariable => \$N_RES{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ int_check( shift,
( defined $N_RES{ min } ? $N_RES{ min } : undef ),
( defined $N_RES{ max } ? $N_RES{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $N_RES{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $N_RES{ min } ? $N_RES{ min } : '-inf' ) .
" : " . ( defined $N_RES{ max } ? $N_RES{ max } : '+inf' ) . " ]" );
$N_RES{ tk_unit } = $N_RES{ tk_frame }->Label( -text => "",
-width => 5 );
$N_RES{ tk_frame }->pack( %fp );
$N_RES{ tk_label }->pack( %wp );
$N_RES{ tk_entry }->pack( %wp );
$N_RES{ tk_unit  }->pack( %up );

# === SENS menu [ "10 V", "5 V", "2.5 V", "1 V", "500 mV",  "250 mV", "100 mV", "50 mV" ] [ 8 ]  "DAQ sensitivity"

my %SENS;
$SENS{ tk_frame } = $fsc2_main_frame->Frame( );
$SENS{ tk_label } = $SENS{ tk_frame }->Label( -text => "DAQ sensitivity",
-width => 20,
-anchor => 'w' );
$SENS{ value } = "50 mV";
my @SENS = ( "10 V", "5 V", "2.5 V", "1 V", "500 mV", "250 mV", "100 mV", "50 mV" );
$SENS{ tk_entry } = $SENS{ tk_frame }->Optionmenu( -options => \@SENS,
-width => 10,
-textvariable => \$SENS{ value } );
$SENS{ tk_unit } = $SENS{ tk_frame }->Label( -text => "",
-width => 5 );
$SENS{ tk_frame }->pack( %fp );
$SENS{ tk_label }->pack( %wp );
$SENS{ tk_entry }->pack( %wp );
$SENS{ tk_unit  }->pack( %up );

# === N_RUNS int [ 1 : ] [ 1 ] "Number of runs"

my %N_RUNS;
$N_RUNS{ tk_frame } = $fsc2_main_frame->Frame( );
$N_RUNS{ tk_label } = $N_RUNS{ tk_frame }->Label( -text => "Number of runs",
-width => 20,
-anchor => 'w' );
$N_RUNS{ value } = 1;
$N_RUNS{ min } = 1;
$N_RUNS{ max } = undef;
$N_RUNS{ tk_entry } = $N_RUNS{ tk_frame }->Entry( -textvariable => \$N_RUNS{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ int_check( shift,
( defined $N_RUNS{ min } ? $N_RUNS{ min } : undef ),
( defined $N_RUNS{ max } ? $N_RUNS{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $N_RUNS{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $N_RUNS{ min } ? $N_RUNS{ min } : '-inf' ) .
" : " . ( defined $N_RUNS{ max } ? $N_RUNS{ max } : '+inf' ) . " ]" );
$N_RUNS{ tk_unit } = $N_RUNS{ tk_frame }->Label( -text => "",
-width => 5 );
$N_RUNS{ tk_frame }->pack( %fp );
$N_RUNS{ tk_label }->pack( %wp );
$N_RUNS{ tk_entry }->pack( %wp );
$N_RUNS{ tk_unit  }->pack( %up );

# === REC_ALL button [ ON ] "Store single scans"

my %REC_ALL;
$REC_ALL{ tk_frame } = $fsc2_main_frame->Frame( );
$REC_ALL{ tk_label } = $REC_ALL{ tk_frame }->Label( -text => "Store single scans",
-width => 20,
-anchor => 'w' );
$REC_ALL{ value } = 1;
$REC_ALL{ tk_entry } = $REC_ALL{ tk_frame }->Checkbutton( -variable => \$REC_ALL{ value },
-width => 10 );
$REC_ALL{ tk_unit } = $REC_ALL{ tk_frame }->Label( -text => "",
-width => 5 );
$REC_ALL{ tk_frame }->pack( %fp );
$REC_ALL{ tk_label }->pack( %wp );
$REC_ALL{ tk_entry }->pack( %wp );
$REC_ALL{ tk_unit  }->pack( %up );

$fsc2_main_frame->pack( %fp, -pady => '1m' );
$fsc2_main_window->Optionmenu( -options => \@fsc2_how_to_run,
                                -textvariable => \$fsc2_how_to_run,
                              )->pack( -padx => '3m',
                                       -pady => '3m' );

$fsc2_apply_button->pack( %wp, padx => '5m', -pady => '3m' );
$fsc2_quit_button->pack(  %wp, padx => '5m', -pady => '3m' );

load_defs( );
$fsc2_main_window->geometry( $geom ) if defined $geom;
MainLoop;


################################################################

sub int_check {
    my ( $new, $min, $max ) = @_;

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $fsc2_apply_button->configure( -state => 'normal' );
     }
     return 1;
}


################################################################

sub float_check {
    my ( $new, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $fsc2_apply_button->configure( -state => 'normal' );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

     return 0;
}


################################################################

sub write_out {
    my $fh;

    open( $fh, "|fsc2_" . lc $fsc2_how_to_run )
        or die "Can't find utility fsc2_" . lc $fsc2_how_to_run . ".\n";

    my $START_FIELD = $START_FIELD{ value };
    my $END_FIELD = $END_FIELD{ value };
    my $FIELD_STEP = $FIELD_STEP{ value };
    my $SEC_FREQ = $SEC_FREQ{ value };
    my $N_SHOTS = $N_SHOTS{ value };
    my $N_RES = $N_RES{ value };
    my $SENS = $SENS{ value };
    my $N_RUNS = $N_RUNS{ value };
    my $REC_ALL = $REC_ALL{ value };

    print $fh "DEVICES:

pci_mio_16e_1;
gg_chopper;
er032m;


VARIABLES:

start_field   = $START_FIELD G;
end_field     = $END_FIELD G;
field_step    = $FIELD_STEP G;
sec_freq      = $SEC_FREQ Hz;
N_res         = $N_RES;
N_shots       = $N_SHOTS;
N_runs        = $N_RUNS;
sens          = $SENS;

I, J, K, L;
N_field_steps = ceil( abs( ( end_field - start_field ) / field_step ) ) + 1;
dt = 1.0 / ( sec_freq * N_res );
raw_data[ N_shots * N_res ];
data[ N_field_steps, N_res ];
tmp[ N_res ];
avg_data[ N_field_steps, N_res ];
field;
F_all, F_params;
";
# === if N_RUNS > 1 and REC_ALL
    if ( eval { $N_RUNS > 1 and $REC_ALL } ) {
        print $fh "F_cur;
";
# === endif
    }

    print $fh "

PREPARATIONS:

init_2d( 2, N_res, N_field_steps, 0.0, dt * 1.0e3, start_field, field_step,
         \"Time [ms]\", \"Field [G]\", \"Signal [V]\" );
init_1d( 2, N_res, 0, dt * 1.0e3, \"Time [ms]\", \"Signal [V]\" );

";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "field = start_field;
magnet_setup( start_field, field_step );
";
# === else
    } else {
        print $fh "field = end_field;
magnet_setup( end_field, field_step );
";
# === endif
    }

    print $fh "chopper_sector_frequency( sec_freq );


EXPERIMENT:

daq_ai_channel_setup( CH0, sens, \"Ground\", \"Bipolar\" );
daq_ai_acq_setup( N_shots * N_res, \"TRIGGER_START\", \"TRIG1\", dt );
daq_trigger_setup( \"High_Window\", 2 V );

F_all = get_file( \"\", \"*.dat\", \"\", \"\", \"dat\" );
F_params = clone_file( F_all, \"dat\", \"par\" );
save_comment( F_all, \"% \" );

FOR I = 1 : N_runs {
    print( \"Starting #. run\\n\", I );
";
# === if N_RUNS > 1 and REC_ALL
    if ( eval { $N_RUNS > 1 and $REC_ALL } ) {
        print $fh "    F_cur = clone_file( F_all, \"dat\", sprint( \"run_#.dat\", I ) );
";
# === endif
    }

    print $fh "    FOR J = 1 : N_field_steps {
        daq_ai_start_acquisition( );
        raw_data = daq_ai_get_curve( );
";
# === if N_SHOTS > 1
    if ( eval { $N_SHOTS > 1 } ) {
        print $fh "        data[ J ] = mean_part_array( raw_data, N_res );
";
# === else
    } else {
        print $fh "		data[ J ] = raw_data;
";
# === endif
    }

    print $fh "";
# === if N_RUNS > 1 and REC_ALL
    if ( eval { $N_RUNS > 1 and $REC_ALL } ) {
        print $fh "	    FOR L = 1 : N_res {
			fsave( F_cur, \"# \", data[ J, L ] );
		}
        fsave( F_cur, \"\\n\" );
";
# === endif
    }

    print $fh "        tmp = ( ( I - 1 ) * avg_data[ J ] + data[ J ] ) / I;
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        display_2d( 1, J, data[ J ], 1, 1, J, tmp, 2 );
";
# === else
    } else {
        print $fh "        display_2d( 1, N_field_steps - J + 1, data[ J ], 1,
					1, N_field_steps - J + 1, tmp, 2 );
";
# === endif
    }

    print $fh "        display_1d( 1, data[ J ], 1, 1, tmp, 2 );
        change_label_1d( sprint( \"Time [ms] (#. run at # G)\", I, field ) );
        IF J < N_field_steps {
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "            field = magnet_sweep_up( );
";
# === else
    } else {
        print $fh "            field = magnet_sweep_down( );
";
# === endif
    }

    print $fh "        }
    }

    avg_data = ( ( I - 1 ) * avg_data + data ) / I;
    IF I < N_runs {
        clear_curve_2d( 1 );
        clear_curve_1d( 1, 2 );
    }
    data = 0.0;
    field = magnet_reset_field( );
}

ON_STOP:

fsave( F_params, \"% Start field:          # G\\n\"
                 \"% End field:            # G\\n\"
                 \"% Field step size:      # G\\n\"
                 \"% Sector frequency:     #\\n\"
                 \"% Number of rotations:  #\\n\"
                 \"% Points per rotation:  #\\n\"
                 \"% DAQ sensitivity:      # V\\n\"
                 \"% Number of runs:       #\\n\",
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "       start_field, I == 1 ? field : end_field, field_step,
";
# === else
    } else {
        print $fh "       end_field, I == 1 ? field : start_field, - field_step,
";
# === endif
    }

    print $fh "       sec_freq, N_shots, N_res, sens,
       I == 1 OR J == N_field_steps ? N_runs : N_runs - 1 );

";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "field = start_field;
";
# === else
    } else {
        print $fh "field = end_field;
";
# === endif
    }

    print $fh "IF I == 1 {
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "    FOR K = 1 : J {
";
# === else
    } else {
        print $fh "    FOR K = J : 1 : -1 {
";
# === endif
    }

    print $fh "		FOR L = 1 : N_res {
            fsave( F_all, \"# \", data[ K, L ] );
		}
        fsave( F_all, \"\\n\" );
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        field += field_step;
";
# === else
    } else {
        print $fh "        field -= field_step;
";
# === endif
    }

    print $fh "    }
} ELSE {
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "    FOR K = 1 : N_field_steps {
";
# === else
    } else {
        print $fh "    FOR K = N_field_steps : 1 : -1 {
";
# === endif
    }

    print $fh "		FOR L = 1 : N_res {
            fsave( F_all, \"# \", avg_data[ K, L ] );
		}
        fsave( F_all, \"\\n\" );
";
# === if START_FIELD <= END_FIELD
    if ( eval { $START_FIELD <= $END_FIELD } ) {
        print $fh "        field += field_step;
";
# === else
    } else {
        print $fh "        field -= field_step;
";
# === endif
    }

    print $fh "    }
}
";
    close $fh;

    my $text;
    if ( $? != 0 ) {
        if ( $? >> 8 == 255 ) {
            $text = "Internal error.";
        } elsif ( $? >> 8 == 1 ) {
            $text = "Someone else is running fsc2.";
        } elsif ( $? >> 8 == 2 ) {
            $text = "fsc2 is already testing or\nrunning an experiment.";
        } elsif ( $? >> 8 == 3 ) {
            $text = "Internal error of fsc2.";
        } elsif ( $? >> 8 == 4 ) {
            $text = "Could not start fsc2.";
        } else {
            $text = "Something strange\nis going on here.";
        }

        &show_message( $text ) if $? >> 8 != 0;
    }
}


################################################################

sub show_message {
    my $text = shift;

    $fsc2_main_window->messageBox( -icon => 'error',
                                   -type => 'Ok',
                                   -title => 'Error',
                                   -message => $text );
}


################################################################

sub store_defs {
    my $fh;
    my $name = $0;

    $name =~ s|^.*?([^/]+)$|$1|;
    mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
    open( $fh, ">$ENV{ HOME }/.fsc2/$name" ) or return;
    print $fh "# Do not edit - created automatically!\n";

    if ( $START_FIELD{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $START_FIELD{ max } ? $START_FIELD{ max } >= $START_FIELD{ value } : 1 ) and
         ( defined $START_FIELD{ min } ? $START_FIELD{ min } <= $START_FIELD{ value } : 1 ) ) {
        print $fh "$START_FIELD{ value }\n";
    } else {
        print $fh "3000\n";
    }

    if ( $END_FIELD{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $END_FIELD{ max } ? $END_FIELD{ max } >= $END_FIELD{ value } : 1 ) and
         ( defined $END_FIELD{ min } ? $END_FIELD{ min } <= $END_FIELD{ value } : 1 ) ) {
        print $fh "$END_FIELD{ value }\n";
    } else {
        print $fh "3500\n";
    }

    if ( $FIELD_STEP{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $FIELD_STEP{ max } ? $FIELD_STEP{ max } >= $FIELD_STEP{ value } : 1 ) and
         ( defined $FIELD_STEP{ min } ? $FIELD_STEP{ min } <= $FIELD_STEP{ value } : 1 ) ) {
        print $fh "$FIELD_STEP{ value }\n";
    } else {
        print $fh "1\n";
    }

    if ( $SEC_FREQ{ value } =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o and
         ( defined $SEC_FREQ{ max } ? $SEC_FREQ{ max } >= $SEC_FREQ{ value } : 1 ) and
         ( defined $SEC_FREQ{ min } ? $SEC_FREQ{ min } <= $SEC_FREQ{ value } : 1 ) ) {
        print $fh "$SEC_FREQ{ value }\n";
    } else {
        print $fh "200\n";
    }

    if ( $N_SHOTS{ value } =~ /^[+-]?\d+$/o and
         ( defined $N_SHOTS{ max } ? $N_SHOTS{ max } >= $N_SHOTS{ value } : 1 ) and
         ( defined $N_SHOTS{ min } ? $N_SHOTS{ min } <= $N_SHOTS{ value } : 1 ) ) {
        print $fh "$N_SHOTS{ value }\n";
    } else {
        print $fh "30\n";
    }

    if ( $N_RES{ value } =~ /^[+-]?\d+$/o and
         ( defined $N_RES{ max } ? $N_RES{ max } >= $N_RES{ value } : 1 ) and
         ( defined $N_RES{ min } ? $N_RES{ min } <= $N_RES{ value } : 1 ) ) {
        print $fh "$N_RES{ value }\n";
    } else {
        print $fh "500\n";
    }

    print $fh "$SENS{ value }\n";

    if ( $N_RUNS{ value } =~ /^[+-]?\d+$/o and
         ( defined $N_RUNS{ max } ? $N_RUNS{ max } >= $N_RUNS{ value } : 1 ) and
         ( defined $N_RUNS{ min } ? $N_RUNS{ min } <= $N_RUNS{ value } : 1 ) ) {
        print $fh "$N_RUNS{ value }\n";
    } else {
        print $fh "1\n";
    }

    print $fh "$REC_ALL{ value }\n";

    print $fh "$fsc2_how_to_run\n";

	print $fh "$geom\n" if defined $geom;

    close $fh;
};


################################################################

sub load_defs {
    my $fh;
    my $name = $0;
    my $ne;
    my $found;

    $name =~ s|^.*?([^/]+)$|$1|;
    if ( $ARGV[ 0 ] ) {
        open( $fh, "<$ARGV[ 0 ]" ) or return;
    } else {
        open( $fh, "<$ENV{ HOME }/.fsc2/$name" ) or return;
    }

    goto done_reading unless defined( $ne = <$fh> ) and $ne =~ /^#/;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $START_FIELD{ max } and $ne > $START_FIELD{ max } ) or
                         ( defined $START_FIELD{ min } and $ne < $START_FIELD{ min } );
    $START_FIELD{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $END_FIELD{ max } and $ne > $END_FIELD{ max } ) or
                         ( defined $END_FIELD{ min } and $ne < $END_FIELD{ min } );
    $END_FIELD{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $FIELD_STEP{ max } and $ne > $FIELD_STEP{ max } ) or
                         ( defined $FIELD_STEP{ min } and $ne < $FIELD_STEP{ min } );
    $FIELD_STEP{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?$/o;
    chomp $ne;
    goto done_reading if ( defined $SEC_FREQ{ max } and $ne > $SEC_FREQ{ max } ) or
                         ( defined $SEC_FREQ{ min } and $ne < $SEC_FREQ{ min } );
    $SEC_FREQ{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?\d+$/;
    chomp $ne;
    goto done_reading if ( defined $N_SHOTS{ max } and $ne > $N_SHOTS{ max } ) or
                         ( defined $N_SHOTS{ min } and $ne < $N_SHOTS{ min } );
    $N_SHOTS{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?\d+$/;
    chomp $ne;
    goto done_reading if ( defined $N_RES{ max } and $ne > $N_RES{ max } ) or
                         ( defined $N_RES{ min } and $ne < $N_RES{ min } );
    $N_RES{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @SENS ) {
        if ( $ne eq $_) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $SENS{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> )
        and $ne =~ /^[+-]?\d+$/;
    chomp $ne;
    goto done_reading if ( defined $N_RUNS{ max } and $ne > $N_RUNS{ max } ) or
                         ( defined $N_RUNS{ min } and $ne < $N_RUNS{ min } );
    $N_RUNS{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> ) and $ne =~ /^1|0$/o;
    chomp $ne;
    $REC_ALL{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @fsc2_how_to_run ) {
        if ( $ne eq $_) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $fsc2_how_to_run = $ne;

    goto done_reading unless defined( $ne = <$fh> )
							 and $ne =~ /^\s*([+-]\d+[+-]\d+)\s*$/;
	$geom = $1;

  done_reading:
    close $fh;
};
