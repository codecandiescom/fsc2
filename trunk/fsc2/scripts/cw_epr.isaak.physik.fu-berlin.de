#!/usr/bin/perl -w
# -*- cperl -*-
#
# $Id$
#
# Copyright (C) 1999-2006 Jens Thoms Toerring
#
# This file is part of fsc2.
#
# Fsc2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Fsc2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fsc2; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.


use strict;
use Tk;
use Tk::Balloon;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
	if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my $lockin		       = 'SR810';
my $start_field        = 3350;
my $end_field	       = 3500;
my $field_step	       = 1;
my $sweep_method       = "simple";
my $field_error        = "";
my $hidden_field_error = "";
my $num_runs	       = 1;
my $tc_fact  	       = 1;
my $tc			       = "Don't set";
my $sens		       = "Don't set";
my $how			       = 'Start experiment';
my $two_phases         = 'X only';
my $phase_options      = [ 'X only', 'X and Y' ];


my %fp = ( '-side' => 'top',
		   '-fill' => 'x',
		   '-padx' => '2m',
		   '-pady' => '2m' );

my %wp = ( '-side' => 'left',
		   '-fill' => 'x',
		   '-padx' => '3m',
		   '-expand' => 1 );

# Get defaults

&get_defs;

# Create all the graphic stuff

my $mw = MainWindow->new( );
$mw->title( "cw_epr" );
my $balloon = $mw->Balloon( );


my $f0 = $mw->Frame( );
my $f0_l1 = $f0->Label( '-text'           => 'Start field:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f0_v = $f0->Entry( '-textvariable'    => \$start_field,
					   '-width'           => '8',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief'          => 'sunken' );
$balloon->attach( $f0_v, '-balloonmsg'    =>
				         "Enter the start field (in Gauss)" );
my $f0_l2 = $f0->Label( '-text'           => 'G',
						'-width'          => 1 );

$f0->pack( %fp );
$f0_l1->pack( %wp );
$f0_v->pack( %wp );
$f0_l2->pack( %wp );


my $f1 = $mw->Frame( );
my $f1_l1 = $f1->Label( '-text'          => 'End field:',
						'-width'         => '20',
						'anchor'         => 'w' );
my $f1_v = $f1->Entry( '-textvariable'   => \$end_field,
					   '-width'          => '8',
					   '-validate'       => 'key',
					   '-validatecommand'=> \&is_numeric,
					   '-relief'         => 'sunken' );
$balloon->attach( $f1_v, '-balloonmsg'   => "Enter the end field (in Gauss)" );
my $f1_l2 = $f1->Label( '-text'          => 'G',
						'-width'         => 1 );

$f1->pack( %fp );
$f1_l1->pack( %wp );
$f1_v->pack( %wp );
$f1_l2->pack( %wp );


my $f2 = $mw->Frame( );
my $f2_l1 = $f2->Label( '-text'           => 'Field step size:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f2_v = $f2->Entry( '-textvariable'    => \$field_step,
					   '-width'           => '8',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief'          => 'sunken' );
$balloon->attach( $f2_v, '-balloonmsg'    =>
				         "Enter the size of the field steps (in Gauss)" );
my $f2_l2 = $f2->Label( '-text'           => 'G',
						'-width'          => 1 );

$f2->pack( %fp );
$f2_l1->pack( %wp );
$f2_v->pack( %wp );
$f2_l2->pack( %wp );


my $f3 = $mw->Frame( );
my $f3_l1 = $f3->Label( '-text'          => 'Maximum field error:',
						'-width'         => '20',
						'anchor'         => 'w' );
my $f3_v = $f3->Entry( '-textvariable'   => \$field_error,
					   '-width'          => '8',
					   '-validate'       => 'key',
					   '-validatecommand'=> \&is_numeric,
					   '-relief'         => 'sunken',
					   'state'           => $sweep_method eq 'simple' ?
					                            'disabled' : 'normal' );
$balloon->attach( $f3_v, '-balloonmsg'   => "Sets maximum acceptable field\n" .
				                            "deviation in tested sweep\n" .
			                                "(in Gauss, not larger than\n" .
				                            "10% of field step size)" );
my $f3_l2 = $f3->Label( '-text'          => 'G',
						'-width'         => 1 );


my $f4 = $mw->Frame( );
my $f4_l = $f4->Label( '-text'           => 'Sweep method:',
						'-width'         => '20',
						'anchor'         => 'w' );
my $f4_m = $f4->Optionmenu( '-options'   => [ ( 'simple', 'tested' ) ],
							'-width'     => 9,
							'-textvariable'  => \$sweep_method,
						    '-command'   => \&set_sweep_method );
$balloon->attach( $f4_m, '-balloonmsg'   => "Selects either a simple sweep\n" .
				                        "(no intermediate checks of field)\n" .
				                        "or a controlled sweep (slower)" );

$f4->pack( %fp );
$f4_l->pack( %wp );
$f4_m->pack( %wp );


$f3->pack( %fp );
$f3_l1->pack( %wp );
$f3_v->pack( %wp );
$f3_l2->pack( %wp );



my $f5 = $mw->Frame( );
my $f5_l1 = $f5->Label( '-text'           => 'Number of runs:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f5_v = $f5->Entry( '-textvariable'    => \$num_runs,
					   '-width'           => '8',
					   '-validate'        => 'key',
					   '-validatecommand' => sub { $_[ 0 ] =~ /^\s*\d*\s*$/ },
					   '-relief'          => 'sunken' );
my $f5_l2 = $f5->Label( '-text'           => ' ',
						'-width'          => 1 );
$balloon->attach( $f5_v, '-balloonmsg'    => "Sets how many times the\n" .
                                             "experiment will be repeated" );
$f5->pack( %fp );
$f5_l1->pack( %wp );
$f5_v->pack( %wp );
$f5_l2->pack( %wp );


my $f6 = $mw->Frame( '-width'             => '29' );
my $f6_l1 = $f6->Label( '-text'           => 'Waiting time:',
						'-width'          => '20',
						'anchor'          => 'w' );
my $f6_v = $f6->Entry( '-textvariable'    => \$tc_fact,
					   '-width'           => '7',
					   '-validate'        => 'key',
					   '-validatecommand' => \&is_numeric,
					   '-relief'          => 'sunken' );
my $f6_l2 = $f6->Label( '-text'           => '* tc',
						'-width'          => 2 );
$balloon->attach( $f6_v, '-balloonmsg' =>
				         "Enter the number of lock-in time constants\n" .
				         "waited before a new data point is recorded" );

$f6->pack( %fp );
$f6_l1->pack( %wp );
$f6_v->pack( %wp );
$f6_l2->pack( %wp );


my $f7 = $mw->Frame( );
my $f7_l = $f7->Label( '-text'          => 'Lock-in amplifier:',
						'-width'        => '20',
						'anchor'        => 'w' );
my $f7_m = $f7->Optionmenu( '-options'  =>
							[ ( 'SR510', 'SR530', 'SR810', 'SR830' ) ],
							'-width'    => 9,
							'-command' => \&lockin_check,
							'-textvariable' => \$lockin );
$f7->pack( %fp );
$f7_l->pack( %wp );
$f7_m->pack( %wp );


my $f8 = $mw->Frame( );
my $f8_l = $f8->Label( '-text'          => 'Phases:',
					   '-width'        => '20',
					   'anchor'        => 'w' );
my $f8_m = $f8->Optionmenu( '-options'  => [ 'X only', 'X and Y' ],
							'-width'    => 9,
							'-textvariable' => \$two_phases );
$balloon->attach( $f8_m, '-balloonmsg'   => "Select measurement of  X phase\n"
				                             . "only or both X and Y phase" );

if ( $lockin =~ /^SR[85]10$/ ) {
	$two_phases = 'X only' if $two_phases =~ /^Y and Y$/;
	$f8_m->configure( 'state' => 'disabled' );
}

$f8->pack( %fp );
$f8_l->pack( %wp );
$f8_m->pack( %wp );


my $f9 = $mw->Frame( );
my $f9_l = $f9->Label( '-text'          => 'Time constant (tc):',
					   '-width'         => '20',
					   'anchor'         => 'w' );
my $f9_m = $f9->Optionmenu( '-options'  =>
                            [ ( "Don't set", '100 s', ' 30 s', ' 10 s',
                                '  3 s', '  1 s', '300 ms', '100 ms', ' 30 ms',
                                ' 10 ms', '  3 ms', '  1 ms' ) ],
							'-width'    => 9,
							'-textvariable' => \$tc );
$f9->pack( %fp );
$f9_l->pack( %wp );
$f9_m->pack( %wp );


my $f10 = $mw->Frame( );
my $f10_l = $f10->Label( '-text'          => 'Sensitivity:',
						 '-width'         => '20',
						 'anchor'         => 'w' );
my $f10_m = $f10->Optionmenu( '-options'  =>
							  [ ( "Don't set", '500 mV', '200 mV', '100 mV',
								  ' 50 mV', ' 20 mV', ' 10 mV', '  5 mv',
								  '  2 mV', '  1 mV', '500 uV', '200 uV',
								  '100 uV', ' 50 uV', ' 20 uV', ' 10 uV',
								  '  5 uV', '  2 uV', '  1 uV',
								  '500 nV', '200 nV', '100 nV', ' 50 nV',
								  ' 10 nV', '  5 nV', '  2 nV', '  1 nV' ) ],
							  '-width'    => 9,
							  '-textvariable' => \$sens );
$f10->pack( %fp );
$f10_l->pack( %wp );
$f10_m->pack( %wp );


$mw->Optionmenu( '-options' => [ ( 'Start experiment', 'Test program',
								   'Load into fsc2' ) ],
				 '-textvariable' => \$how,
			   )->pack( '-padx' => '3m',
						'-pady' => '3m' );

my $f11 = $mw->Frame( );
my $f11_a = $mw->Button( '-text' => 'Apply',
						 '-command' => \&write_out );
my $f11_q = $mw->Button( '-text' => 'Quit',
						 '-command' => sub { &store_defs; $mw->destroy } );
$f11->pack( '-side' => 'top',
			'-fill' => 'x',
			'-padx' => '4m' );
$f11_a->pack( %wp, 'padx' => '5m', '-pady' => '3m' );
$f11_q->pack( %wp, 'padx' => '5m', '-pady' => '3m' );

MainLoop;


#############################################

sub set_sweep_method {
	if ( $sweep_method eq 'simple' ) {
		$f3_v->configure( 'state' => 'disabled' );
		$hidden_field_error = $field_error;
		$field_error = "";
	} else {
		$f3_v->configure( 'state' => 'normal' );
		$field_error = $hidden_field_error;
	}
}


##############################################

sub lockin_check {
	if ( $lockin =~ /^SR[85]10$/ ) {
		$two_phases = 'X only';
		$f8_m->configure( 'state' => 'disabled' );
	} else {
		$f8_m->configure( 'state' => 'normal' );
	}
}

##############################################

sub get_defs {

local *F;
my $ne;

if ( $ARGV[ 0 ] ) {
	open( F, "<$ARGV[ 0 ]" ) or return;
} else {
	open( F, "<$ENV{ HOME }/.fsc2/cw_epr" ) or return;
}

goto done_reading unless defined( $ne = <F> ) and $ne =~ /^#/;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$start_field = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$end_field = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$field_step = $ne;

goto done_reading unless defined( $ne = <F> )
	and $ne =~ /^(simple)|(tested)$/;
chomp $ne;
$sweep_method = $ne;

goto done_reading unless defined( $ne = <F> ) and is_numeric( $ne );
chomp $ne;
$hidden_field_error = $ne;
$field_error = $ne if $sweep_method =~ /tested/;

goto done_reading unless defined( $ne = <F> ) and $ne =~ /^\d+$/;
chomp $ne;
$num_runs = $ne;

goto done_reading unless defined( $ne = <F> )
	and $ne =~ /^SR(5|8)(1|3)0$/;
chomp $ne;
$lockin = $ne;

goto done_reading unless defined( $ne = <F> )
	and $ne =~ /^X ((only)|(and Y))$/;
chomp $ne;
$two_phases = $ne;

goto done_reading unless defined( $ne = <F> )
	and $ne =~ /(^Don't set)|([13]0{0,2} m?s)$/;
chomp $ne;
$tc = $ne;

goto done_reading unless defined( $ne = <F> )
	and $ne =~ /(^Don't set)|([125]0{0,2} [mun]V)$/;
chomp $ne;
$sens = $ne;

done_reading:
close F;
}


#############################################

sub store_defs {
	local *F;

	mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
	open( F, ">$ENV{ HOME }/.fsc2/cw_epr" ) or return;

	$start_field = 0 if $start_field eq ".";
	$end_field = 0 if $end_field eq ".";
	$field_step = 0 if $field_step eq ".";
	$hidden_field_error = 0 if $hidden_field_error eq ".";

	print F "# Do not edit - created automatically!\n";

	print F "$start_field\n$end_field\n$field_step\n$sweep_method\n" .
	        "$hidden_field_error\n$num_runs\n$lockin\n$two_phases\n" .
			"$tc\n$sens\n";

	close F;
}


#############################################

sub is_numeric {

	my $new_val = shift;
	$new_val =~ /^((\d+\.?(\d+)?)|(\.(\d+)?))?$/;
}


#############################################

sub write_out {

return if &do_checks( ) != 0;

local *F;
my $text;

open( F, "|fsc2_" . lc $how )
	or die "Can't find utility fsc2_" . lc $how . ".\n";

print F
"DEVICES:\n\n";
print F lc( $lockin ), ";\n";
print F "er035m_s;
aeg_x_band;\n\n\n";

print F
"VARIABLES:\n\nI";
print F ", J, K" if $num_runs != 1;
print F ";
start_field = $start_field G;
end_field = $end_field G;
field_step = ";
print F $end_field > $start_field ? $field_step : - $field_step;
print F " G;\n";
print F "act_field;\nfield_error = $field_error G;\n"
	if $sweep_method eq 'tested';
print F
"N_points = ceil( abs( end_field - start_field ) / abs( field_step ) ) + 1;
";
if ( $two_phases =~ /X only/ ) {
	print F "new_data[ N_points ];\n";
} else {
	print F "new_data[ N_points, 2 ];\n";
}
print F "N_runs = $num_runs;\n";
if ( $num_runs != 1 ) {
	if ( $two_phases =~ /X only/ ) {
		print F "data[ N_points ];\n";
	} else {
		print F "data[ 2, N_points ];\n";
}
}

if ( $tc eq "Don't set" ) {
	print F "tc;\n";
} else {
	print F "tc = $tc;\n";
}

print F "\n\nPREPARATIONS:\n\n";
print F "magnet_setup( start_field, field_step );\n"
	if $sweep_method eq 'simple';
print F "lockin_time_constant( tc );\n" if $tc ne "Don't set";
print F "lockin_sensitivity( $sens );\n" if $sens ne "Don't set";
print F "init_1d( ";
if ( $num_runs == 1 ) {
	if ( $two_phases =~ /'X only'/ ) {
		print F "1";
	} else {
		print F "2";
	}
} else {
	if ( $two_phases =~ /'X only'/ ) {
		print F "3";
	} else {
		print F "4";
	}
}
print F ", N_points, start_field, field_step, \"Magnetic field / G\",
		 \"Signal / V\" );\n\n\n";

print F
"EXPERIMENT:\n
fsave( \"% Field:\\n\"
	   \"%	 Start field:     # G\\n\"
	   \"%	 End field:       # G\\n\"
	   \"%	 Field step size: # G\\n\"
	   \"% Lock-In:\\n\"
	   \"%	 Sensitivity:     # V\\n\"
	   \"%	 Time constant:   # s\\n\"
	   \"%	 Phase:			  # degree\\n\"
	   \"% Number of runs:	  #\\n\",
	   start_field, start_field + ( N_points - 1 ) * field_step, field_step,
	   lockin_sensitivity( ), lockin_time_constant( ), lockin_phase( ),
	   N_runs );
save_comment( \"% \" );
save_program( \"% \", \"Sample:  \\nMicrowave frequency:  \\n\"
              \"Microwave power:  \\nTemperature:  \\n\" );\n\n";

print F "act_field = magnet_field( start_field );\n"
	if $sweep_method eq 'tested';
print F "tc = lockin_time_constant( );\n\n" if $tc eq "Don't set";
if ( $num_runs != 1 ) {
	print F
"FOR J = 1 : N_runs \{

	print( \"Starting #. run out of #\\n\", J, N_runs );

	FOR I = 1 : N_points \{

";
	if ( $two_phases =~ /^X only$/ ) {
		print F "\t\tnew_data[ I ] = lockin_get_data( );\n";
	} else {
		print F "\t\tnew_data[ I ] = lockin_get_data( 1, 2 );\n";
	}

	if ( $sweep_method eq 'simple' ) {
		if ( $two_phases =~ /^X only$/ ) {
			print F "\t\tfsave( \"# #\\n\", start_field + ( I - 1 ) * "
				. "field_step, new_data[ I ] );";
		} else {
			print F "\t\tfsave( \"# # # \\n\", start_field + ( I - 1 ) * "
				. "field_step, new_data[ I, 1 ], new_data[ I, 2 ] );";
		}
	} else {
		if ( $two_phases =~ /^X only$/ ) {
			print F "\t\tfsave( \"# #\\n\", act_field, new_data[ I ] );";
		} else {
			print F "\t\tfsave( \"# # #\\n\", act_field, new_data[ I, 1 ], "
				. "new_data[ I, 2 ] );";
		}
	}

	if ( $two_phases =~ /^X only$/ ) {
		print F "\n\t\tdisplay( I, ( data[ I ] + new_data[ I ] ) " .
			"/ float( J ), 1, I, new_data[ I ], 3 );\n";
	} else {
		print F "\n\t\tdisplay( I, ( data[ 1, I ] + new_data[ I, 1 ] ) / " .
			"float( J ), 1,\n		         I, ( data[ 2, I ] + " .
				"new_data[ I, 2 ] ) / float( J ), 2,
		         I, new_data[ I, 1 ], 3, I, new_data[ I, 2 ], 4 );\n";
	}
	print F "
		IF ( I < N_points ) \{\n\t\t\t";
	if ( $sweep_method eq 'simple' ) {
		print F "magnet_sweep_up( );";
	} else {
		print F "act_field = magnet_field( start_field + I * field_step, " .
			"field_error );";
	}
	print F "
			wait( ";
	print F "$tc_fact * " if $tc_fact != 1;
	print F "tc );
		\}
	\}
";

	if ( $two_phases =~ /^X only$/ ) {
		print F "
	data += new_data;
	clear_curve( 1, 3 );
	display( 1, data / float( J ), 2 );\n";
	} else {
		print F "
	FOR K = 1 : N_points {
		data[ 1, K ] += new_data[ K, 1 ];
		data[ 2, K ] += new_data[ K, 2 ];
	}
	clear_curve( 3, 4 );
	display( 1, data[ 1 ] / float( J ), 1, 1, data[ 2 ] / float( J ), 2 );\n";
	}

	print F "
	fsave( \"\\n\" );
	IF ( J < N_runs ) \{\n\t\t";
	if ( $sweep_method eq 'simple' ) {
		print F	"magnet_reset_field( );";
	} else {
		print F "act_field = magnet_field( start_field );";
	}
	print F "
		wait( ";
	print F "$tc_fact * " if $tc_fact != 1;
	print F "tc );
	\}
\}


ON_STOP:

fsave( \"\\n\" );
FOR I = 1 : N_points \{
";
	if ( $two_phases =~ /^X only$/ ) {
		print F "\tfsave( \"# #\\n\", start_field + ( I - 1 ) * " .
			"field_step, data[ I ] );\n\}";
	} else {
		print F "\tfsave( \"# # #\\n\", start_field + ( I - 1 ) * " .
			"field_step, data[ 1, I ], data[ 2, I ] );\n\}";
	}
} else {
	print F "\nFOR I = 1 : N_points \{\n";
	if ( $two_phases =~ /^X only$/ ) {
		print F "\t\tnew_data[ I ] = lockin_get_data( );\n\t";
	} else {
		print F "\t\tnew_data[ I ] = lockin_get_data( 1, 2);\n\t";
	}
if ( $two_phases =~ /^X only$/ ) {
	if ( $sweep_method eq 'simple' ) {
		print F "fsave( \"# #\\n\", " .
			"start_field + ( I - 1 ) * field_step, new_data[ I ] );\n";
	} else {
		print F "fsave( \"# #\\n\", act_field, new_data[ I ] );\n";
	}
	print F "\tdisplay( I, new_data[ I ] );\n";
} else {
	if ( $sweep_method eq 'simple' ) {
		print F "fsave( \"# # #\\n\", " .
			"start_field + ( I - 1 ) * field_step, new_data[ I, 1 ], " .
				"new_data[ I, 2 ] );\n";
	} else {
		print F "fsave( \"# # #\\n\", act_field, new_data[ I, 1 ], " .
			"new_data[ I, 2 ] );\n";
	}
	print F "\tdisplay( I, new_data[ I, 1 ], 1, I, new_data[ I, 2 ], 2 );\n";
}
print F "\tIF ( I < N_points ) \{\n\t\t";
if ( $sweep_method eq 'simple' ) {
	print F "magnet_sweep_up( );";
} else {
	print F "act_field = magnet_field( start_field + I * field_step, field_error );";
}
print F "
		wait( ";
print F "$tc_fact * " if $tc_fact != 1;
print F "tc );
	\}
\}";
}

close F;

# Notify the user if sending the program to fsc2 failed for some reasons

if ( $? != 0 ) {
    if ( $? >> 8 == 255 ) {
        $text = "Internal error.";
    } elsif ( $? >> 8 == 1 ) {
        $text = "Someone else is running fsc2.";
    } elsif ( $? >> 8 == 2 ) {
        $text = "fsc2 is currently busy.";
    } elsif ( $? >> 8 == 3 ) {
        $text = "Internal error of fsc2.";
    } elsif ( $? >> 8 == 4 ) {
        $text = "Could not start fsc2.";
    } else {
        $text = "Something strange is going on here.";
    }

    &show_message( $text ) if $? >> 8 != 0;
}
}


#############################################

sub do_checks {

	if ( $start_field =~ /^\.?$/ ) {
		&show_message( "Start field hasn't been set." );
		return -1;
	}

	if ( $start_field < 1460 ) {
		&show_message( "Start field is too low." );
		return -1;
	}

	if ( $start_field > 19900 ) {
		&show_message( "Start field is too high." );
	}

	if ( $end_field =~ /^\.?$/ ) {
		&show_message( "End field hasn't been set." );
		return -1;
	}

	if ( $end_field < 1460 ) {
		&show_message( "End field is too low." );
		return -1;
	}

	if ( $end_field > 19900 ) {
		&show_message( "End field is too high." );
		return -1;
	}

	if ( $field_step =~ /^\.?$/ ) {
		&show_message( "Field step size hasn't been set." );
		return -1;
	}

	$field_error = 0
		if $sweep_method eq 'tested' and $field_error =~ /^\.?$/;

	if ( $sweep_method eq 'tested' and $field_error > 0.1 * $field_step ) {
		&show_message( "Field error larger than\n10% of field step size." );
		return -1;
	}

	if ( abs( $field_step ) > abs( $end_field - $start_field ) ) {
		&show_message( "Field step size larger than\n" .
					   "difference between start and\n" .
					   "end field." );
		return -1;
	}

	if ( $num_runs =~ /^$/ ) {
		&show_message( "Number of runs hasn't been\n" .
					   "set, defaulting to 1." );
		$num_runs = 1;
	}

	if ( $num_runs < 1 ) {
		&show_message( "Invalid number of runs." );
		return -1;
	}

	return 0;
}


#############################################

sub show_message {
	my $text = shift;

	$mw->messageBox( '-icon' => 'error',
					 '-type' => 'Ok',
					 '-title' => 'Error',
					 '-message' => $text );
}
