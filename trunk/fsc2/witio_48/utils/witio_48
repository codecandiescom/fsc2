#! /bin/sh
#
# $Id$
#
# Copyright (C) 2003-2008 Jens Thoms Toerring
#
# This init script tries to be conformant to LSB (Linux Standard Base
# Specification), version 1.1.0. 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# To contact the author send email to:  jt@toerring.de

### BEGIN INIT INFO
# Provides:          witio_48
# Required-Start:    $localfs $remote_fs $syslog
# Required-Stop:     $localfs $remote_fs $syslog
# Default-Start:     2 3 5
# Default-Stop:      0 1 6
# Short-Description: Loads witio_48 module and creates device files
# Description:       The script tries to load or unload the module for the
#                    WITIO-48 DIO card by Wasco. The module must already have
#                    been installed successfully for the currently running
#                    kernel. Beside loading or unloading the module also
#                    a device files for the board is created on start and
#                    deleted on stop.
#					 Please note: Using this init script only makes sense when
#					 a dynamically assigned major device number is used for the
#					 module, otherwise demand-loading (via /etc/modules.conf)
#					 should be used.
### END INIT INFO

. /lib/lsb/init-functions


# Uncomment the following 5 lines if you're using SuSE and want to make
# starting the WITIO-48 module and creating device files dependent on an entry
# like "START_WITIO_48=yes" or "START_WITIO_48=no" in /etc/rc.config

# . /etc/rc.config
# base=${0##*/}
# link=${base#*[SK][0-9][0-9]}
# test $link = $base && START_WITIO_48=yes
# test "$START_WITIO_48" = yes || exit 0


if [ -z $1 ]; then
	log_failure_msg "Missing argument."
	exit 2;
fi

case "$1" in
    start)
		modprobe witio_48 > /dev/null 2>&1
		if [ $? != 0 ]; then
			log_failure_msg "Loading WITIO-48 module failed."
			exit 1
		fi
		grep 'devfs=only' /proc/cmdline > /dev/null 2>&1
		if [ $? != 0 ]; then
			major=`grep witio_48 /proc/devices | awk '{print $1}'`
			if [ -z $major ]; then
				log_failure_msg "Can't determine major device number for WITIO-48 cards."
				exit 1
			fi
			mknod -m 666 /dev/witio_48 c $major 0
			if [ $? != 0 ]; then
				log_failure_msg "Creating device file for WITIO-48 cards failed."
				exit 1
			fi
		fi
		test "$2" = "restart" || log_success_msg "Starting WITIO-48 support."
		;;

	 stop)
		rmmod witio_48 > /dev/null 2>&1
		if [ $? != 0 ]; then
			log_failure_msg "Unloading WITIO-48 module failed."
			exit 1
		fi
		grep 'devfs=only' /proc/cmdline > /dev/null 2>&1
		if [ $? != 0 ]; then
			rm -f /dev/witio
				if [ $? != 0 ]; then
					log_failure_msg "Deleting device files for WITIO-48 cards failed."
				exit 1
			fi
		fi
		test "$2" = "restart" || log_success_msg "Stopping WITIO-48 support."
		;;

	 restart|reload|force-reload)        # no reason here to differentiate...
		$0 stop restart
		$0 start restart && log_success_msg "WITIO-48 support restarted."
		;;

	 status)
		grep witio_48 /proc/devices
		if [ $? = 0 ]; then
			log_success_msg "WITIO-48 support is up and running."
			exit 0
		else
			log_failure_msg "WITIO-48 support is not available."
			exit 3
		fi
		;;
    *)
		echo "Usage: $0 {start|stop|restart|force-reload|reload|status}"
		exit 1
	;;
esac
