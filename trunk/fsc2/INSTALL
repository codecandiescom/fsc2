Please take the time to read the following carefully before trying to
install and run fsc2.

A) Requirements
===============

The following tools and libraries are needed to compile, install and
run fsc2:

 1) gmake (i.e. the GNU version of 'make')
 2) gcc
 3) flex
 4) bison
 5) install
 6) sed
 7) XFORMS library (version 0.89 or higher)
 8) GPIB library (fsc2 can also be compiled and run without it but
    with restricted functionality only, see below)


Optionally, you should have

 9) mail and sendmail (or similar) installed, or, if you want to use the
    built-in mail agent, the libresolv.so library is required.
10) addr2line
11) perl (version 5.0 or higher) with the pTk (Tk support) package
12) pnmtopng
13) ppmtojpeg

but if it is missing the basic functionality is still there (without mail
and addr2line no automatic bug reports can be sent and without Perl
and the next two utilities e.g. the built-in web server won't work)


To create the complete documentation beside Perl you also need

14) makeinfo
15) install-info (GNU texinfo version)
16) TeX (if missing no Postscript and PDF documentation is created)
17) convert and identify from the ImageMagick package (or no PostScript
	and PDF documentation will be created)
18) dvips (if missing no Postscript documentation is created)
19) pdftex (if missing no PDF documentation will be created)
20) gzip


While fsc2 works with the older XFORMS library version 0.89, which may be
still available in binary only form you may prefer to use the newer version
1.0 version which is distributed under the GPL and can be downloaded from

  http://savannah.nongnu.org/projects/xforms/

or, if it isn't available from there for some reasons a working version
of the sources (but probably not the newest) can be downloaded from

  http://www.physik.fu-berlin.de/~toerring/xforms-1.0-release.tgz


The GPIB library consists of a library and a driver to interface GPIB
cards. You can either use the one I've written and which works, as far
as I know, for some ISA cards with 2.0, 2.2 and 2.4 kernels and can be
downloaded from

  http://www.physik.fu-berlin.de/~toerring/GPIB.tar.gz

the older LLP (Linux Lab Project) library to be found at

  http://www.llp.fu-berlin.de

(which, at least the last time I checked, didn't work with 2.2 and 2.4
kernels) or the one from National Instruments, to be downloaded from

  http://www.natinst.com

(which is supposed to work with 2.2 and 2,4 kernels). From the documentations
of the LLP library and the one I have written it is already clear that a
GPIB configuration file (typically '/etc/gpib.conf') is required, in which
all devices to be used with are listed with their respetive properties. But
also for the NI library fsc2 expects such a configuration file (instead of
using the configuration method native to the GPIB library). A typical
entry in this file looks like the following

device {
        name        = "TDS744A"
        pad         = 26
        timeout     = 3s
        eos         = '\n'
        set-reos      no
        set-xeos      no
        set-bin       no
        set-eot       yes
}

It specifies a symbolic name for the device, the primary GPIB address (you
may also specify a secondary GPIB address, following the keyword 'sad'),
the timeout to be used for communication with the device and a few more
settings controlling the determination of the end of messages send to and
read from the device. 'eos' is the character to be used as the end of trans-
mission (EOS) character (none has to be set when no such character is to be
used). When 'set-reos' is set he driver stops reading from a device whenever
the EOS character is encountered in the message, even when the EOI line did
not get raised while receiving the EOS character. When 'set-xeos' is set
the EOI line is automatically raised when the EOS character is found in a
message send to the device (even when there are more characters in the
message). Setting 'set-bin' will make the driver check all 8 bits of each
character for identity with the EOS character, while, when unset, only the
lower 7 bits are tested (the top-most bit is excluded from the comparision).
Finally, setting 'set-eot' makes the driver raise the EOI line automatically 
with the last byte of a message send to a device (which is also the default),
while unsetting it will keep the driver from doing so.

Beside the entries for the devices another one for the GPIB board itself
is required:

device {
        name        = "gpib"
        pad         = 0
        sad         = 0
        master
        file        = "/dev/gpib"
}

Here a symbolic name and the primary and secondary GPIB address are set
for the board. The 'master' flag tells the driver that the board is the
device controlling the GPIB bus and 'file' sets the name of the device
file used for the board.

Unfortunately, only the LLP library supports cards from companies other than
National Instruments. You may also compile fsc2 without having a GPIB library,
but then devices controlled via the GPIB bus can't be used for obvious
reasons.


There is also an updated version of the LLP library, working with 2.4 kernels
and downloadable from sourceforge:

  http://linux-gpib.sourceforge.net

I would guess that it also will work, but I didn't yet had the time to
investigate this.


Please make sure that the GPIB library you want to use is already compiled
and installed before trying to compile fsc2 (unless you don't need GPIB
support built into fsc2).


B) Permissions
==============

Unless you want to do just a few simple tests with fsc2 you should
create a special account for it. fsc2 needs to be installed setuid'ed,
so for security reasons its account should have as low privileges as
possible and it should be impossible to log into this account (e.g. by
setting its shell in /etc/passwd to /bin/false). The account shouldn't
have root privileges! Most of the time fsc2 runs with the effective
user ID (EUID) and effective group ID (EGID) set to the real users ID
and group, i.e. with only the permissions of the user starting fsc2,
but in a few places (e.g. when writing to log files, manipulating
lock files or accessing shared memory or device files) it must revert
back to the EUID and EGID of the fsc2 account.


What group the fsc2 account belongs to does not really matter. Relevant is
only the group of the executable, i.e the file itself. I would recommend to
use the group that has read and write access for the serial port device
files, (/dev/ttyS* where * stands for a positive number). On the Linux
systems I have seen this group was either 'uucp' or 'dialout'. If the
fsc2 executable file is owned by this group the program automatically has
the necessary permisssions to access these device files. Otherwise you
will have to either change the modes of the files to allow access by
'other', i.e. make them world readable and writable, or to make all
users of fsc2 belong to this group as one of their supplementary groups.


By setting the group of the device file for the GPIB board (and possibly
other boards controlled by fsc2) to the group that fsc2 belongs to (i.e.
usually 'uucp' or 'dialout') also the access permissions to the board's
device file don't have to be set to allow either access by 'other' or to
make all users members of the group that has access permissions.


C) Preparing for Installation
=============================

After installing the required tools and libraries and extracting the
archive go into the newly created directory fsc2. You can use two methods
of doing so. Either you can edit the Makefile directly and change some
variables at its top. Alternatvely, go into the 'machines' subdirectory
and copy the file 'template.nowhere' to a file with the fully qualified
hostname of your machine (i.e. its full name, including the domain name)
as its name. Now you can edit this file and it will automatically get
evaluated during the make process. This is probably more convenient. When
you edit the Makefile you will have to do it again and again whenever you
install a new version. In contrast the file in the 'machines' subdirectory
can just be copied from an old installation to a new version and everything
should stay the same.


Normally, fsc2 and all auxiliary files needed will be installed below
/usr/local (in /usr/local/bin, /usr/local/lib/fsc2, /usr/local/info
and /usr/local/share/doc). To change this location edit the lines
defining the variable 'prefix' in the Makefile or the file you're setting
up for your machine.


The next two variables, OWNER and GROUP, will be used when setting the
owner of all the files that will be installed as well as its group. See
the preceeding section for all the details.


The variable DEF_INCL_DIR sets a default directory for EDL include files
(see the documentation for the EDL '#INCLUDE' directive for details).


The next lines are for setting the GPIB library that you are going to use.
You may set the first variable, GPIB_LIBRARY either to LLP for the old
(Linux Lab Project) library, to NI when using the National Instruments
library or to JTT if you're using the library I wrote. If you don't want
GPIB support you also may set this variable to NONE. In this case fsc2
won't be able to run experiments requiring devices that are connected
via the GPIB bus (but you still can test such EDL programs). Use this
option only if you either want to built a test version or if all your
devices are controlled via the serial ports or are PCI or ISA cards.


If you use the National Instruments GPIB driver you can set the location
where fsc2 will expect the GPIB configuration file, gpib.conf. But usually
there is no reason to change the default value which is /etc/gpib.conf.


While running fsc2 may write out information about the activity on the
GPIB bus into a log file. You can change the default log file /tmp/gpib.log
to something appropriate for your setup (or even to /dev/null). You can also
set the verbosity of the logs by changing the variable GPIB_LOG_LEVEL to
either HIGH, MEDIUM, LOW or OFF. To help me find bugs in the device
modules setting it to HIGH is recommended. But note that the file can
get rather large, so better have it on a partition where there is a lot
of free space. In order not to have it grow indefinitely each time a
new experiment is started the log file is truncated to zero length.


If the header files for the GPIB library aren't in either '/usr/include'
or '/usr/local/include' you will have to tell fsc2 where to look for
them by setting the variable GPIB_HEADER_DIR accordingly.


The next two variables, NUM_SERIAL_PORTS and SERIAL_LOCK_DIR, are used
for dealing with the serial ports. NUM_SERIAL_PORTS should be set to
the number of serial ports that your computer has (or to the number you
want fsc2 to have access to). If the variable is not set (or set to 0)
no serial ports can be used.


SERIAL_LOCK_DIR must be a string with the name of the directory where
UUCP type lock files for the serial ports are created (there is a
convention that programs opening a serial port create such a lock file
that contains the process ID (PID) of the program as a decimal ASCII
number, so that other programs can check if the port is already in use
and by whom). According to version 2.2 of the Filesystem Hierachy
Standard this directory should be '/var/lock', but on old systems also
'/usr/spool/locks' and '/usr/spool/uucp' were commonly used, so this
can be adjusted via this variable. If you don't want lock files for the
serial port to be created simply don't define this variable. A possible
problem arises if you use programs creating lock files not in the HDB
UUCP format (the PID being stored in a ten byte string, left-padded
with spaces and with a trailing newline). In this case fsc2 will not
try to remove stale lock files and instead print an error message to
the terminal that the lock file has to be removed manually.


The WITH_NI6601, WITH_PCI_MIO_16E_1, WITH_ME6000, WITH_WITIO_48 and
WITH_SPEC10 variables are only needed when support for the National
Instruments 6601 GPCT or PCI-MIO-16E-1 cards, the Meilhaus Electronic
6000 or 6100 DAC card, the Wasco WITIO-48 DIO card or the Roper
Scientific Spec-10 CCD camera are required. In these cases the lines
where these variables are defined must be uncommented and the
additional variables for the include paths and the exact locations
for the required libraries may have to be changed. Please see the
comments in the Makefile or the template file in the 'machines'
directory for details.


Moreover, support for the National Instruments PCI-MIO-16E-1 and the
6601 GPCT cards, the Meilhaus ME6000 and ME6100 DAQ and the Wasco
WITIO-48 DIO card requires that the drivers and libraries for the
cards (which are part of fsc2) are already successfully install,
otherwise the corresponding modules can't be built. For support for
the Roper Scientific CCD Spec-10 camera the PVCAM library supplied by
Roper Scientific is required and also must be installed together with
its header files before you should try to compile fsc2.


The WITH_HTTP_SERVER variable tells if support for the web server should
be built into fsc2. Just comment out the line and the web server won't be
available. If the web server gets included into fsc2 the next variable,
DEFAULT_HTTP_PORT, determines on which port the web server will listen for
incoming connections by default (use a number above 1023, lower numbered
ports are only accessible by programs with root privileges). A reasonable
choice is 8080.


The final variable to be set is the email address of the person that will
receive bug reports and notifications if fsc2 crashes. Usually, you should
not change this variable except when you apply changes to the program on
your own. In this case sending these kind of mails to me obviously doesn't
make too much sense... Another obvious reason for changing it would be that
the machine isn't connected to the internet.


If you're going to use devices connected via the serial port there's
another thing you've got to check. The program needs to know to which of
your serial ports a device is connected. This is controlled by an entry
in the configuration file for the device in the 'config' directory. For
each device connected via the serial port there's a line like

#define SERIAL_PORT     1

This tells the program the number of the serial port. Serial ports are
numbered starting with 0. So setting SERIAL_PORT to 0 means that the
device will be accessed via the device file '/dev/ttyS0'. In DOS or
Windows nomenclature this means COM1. The serial port numbered 1 is
accessed via 'dev/ttyS1' (re COM2 in DOS-speak). Make sure to set the
correct number or the program will complain when it tries to access
the device about communication failures.



D) Compiling and Installing
===========================


Now go into the main directory of the package and type 'make'. This may
take some time to finish. In principle no warnings should show up during
the compilation (at least on systems with a newer libc and if my GPIB
library is used), but warnings may occur when the documentation is
created and some of the required tools are not available. It may even
happen that the make process stops with an error message during this
stage (i.e. while making the documentation). This does *not* mean that
the program didn't compile succesfully, only that parts of the
documentation could not be created.


Don't try to invoke 'make' from one of the sub-directories. While in
some cases this might work, i.e. things in the sub-directory will
be created, in most cases it won't even work that far.


If you get more than a few warnings (about problems with fsc2, not header
files included by fsc2) during the compilation stage of the program or if
the make process fails completely please send me an email with the output
of make. You can save the output of make to a file, e.g. 'makelog', by
running make with the command line

    make > makelog 2>&1

if you're using the Bourne or Korn shell (sh or ksh) or bash. Use

    make >& makelog

if you use the C shell (csh) or tcsh.


When the compilation of the program succeeds (even though making the
documentation failed at some stage), you can now install the program by
typing

    make install

Normally, you will need root privileges to do this. If making the
documentation failed with an error also its installion may fail,
but that's not something to worry about too much...


If you want to you can also try to test your built of fsc2 before
installation by running

    make test

This will make fsc2 run a set of EDL programs that (hopefully) test most
of its built-in functions at least once. Be prepared for lots of windows
popping up during the test run, displaying some rather strange graphics.
Normally, the test should run without any errors, otherwise you probably
should contact me and complain. All these tests don't access any of the
devices, writing a test suite for the supported devices is still on my
to-do list.


Please note: If you installed the program and then decide that you don't
like it and want to get rid of it, you can always de-install it by running

   make deinstall

as long as you haven't changed the makefiles in between.


To manualy remove the installed package you have to delete the following
files and directories (assuming you've used the default locations, i.e.
/usr/local):

/usr/local/bin/fsc2             (file)
/usr/local/bin/fsc2_connect     (file)
/usr/local/bin/fsc2_guify       (file)
/usr/local/bin/fsc2_pulses      (file)
/usr/local/bin/fsc2_clean       (file)
/usr/local/bin/fsc2_http_server (file)
/usr/local/bin/fsc2_test        (symbolic link)
/usr/local/bin/fsc2_load        (symbolic link)
/usr/local/bin/fsc2_start       (symbolic link)
/usr/local/lib/fsc2/            (directory)
/usr/local/share/doc/fsc2/      (directory)
/usr/local/man/man1/fsc2.1.gz   (file)
/usr/local/info/fsc2.info.gz    (file)
/usr/local/info/fsc2-*.info.gz  (file, with * being a numbers between 1 and 19)


E) Getting started
==================

The subdirectory 'edl' contains several several EDL programs that you can
use to get an impression of fsc2 and to become acquainted with the syntax.
Many of the files in there are just for testing purposes and a few may
not even work. But there are a few that work without any devices, some
of them are

  a.edl
  gr.edl
  qq.edl
  z.edl
  zz.edl
  2d_endor_test.edl
  2_td.edl
  tools.edl

Just start by typing 'fsc2 edl/qq.edl' or 'fsc2 edl/z.edl' (assuming you're
still in fsc2's main directory) and click on the "Start" button to get an
idea about how fsc2 displays 1- and 2-dimensional data sets.

                        March 13, 2004         Much luck, Jens
--
       _  _____  _____
      | ||_   _||_   _|         Jens.Toerring@physik.fu-berlin.de
   _  | |  | |    | |           http://www.toerring.de
  | |_| |  | |    | |           Urbanstr. 176, D-10961 Berlin
   \___/ens|_|homs|_|oerring    +49 (0)30 692 86 27
