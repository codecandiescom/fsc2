
Please read the following carefully before trying to install and run fsc.

A) Requirements
===============

The following tools and libraries are needed to compile, install and run fsc2:

 1) gmake (i.e. the GNU version of 'make')
 2) gcc
 3) flex
 4) bison
 5) install
 6) sed
 7) XFORMS library (version 0.89 or higher)
 8) GPIB library (will also compile and run without, see below)

Optionally, you should have

 9) mail
10) addr2line

but if it is missing the basic functionality is still there.

To create the complete documentation you also need

11) makeinfo
12) install-info (GNU texinfo version)
13) tex (if missing no Postscript and PDF documentation is created)
14) convert and identify from the ImageMagick package (or no PostScript
	and PDF documentation will be created)
15) dvips (if missing no Postscript documentation is created)
16) perl (version 5.0 or higher)
17) pdftex (if missing no PDF documentation will be created)
18) gzip


The XFORMS library is available from e.g. (some links may be outdated)

  ftp.cs.ruu.nl/pub/XFORMS
  einstein.phys.uwm.edu/pub/xforms
  ftp.fu-berlin.de/unix/X11/gui/xforms
  ftp.st.ryukoku.ac.jp/pub/X11/xforms
  ftp.via.ecp.fr/pub2/xforms
  ftp.unipi.it/pub/mirror/xforms
  ftp.uni-trier.de/pub/unix/X11/xforms


The GPIB library consists of a library and a module to interface GPIB
cards. You can either use the one I've written (works, as ar as I know,
for fsc2 with 2.2 and 2.4 kernels and should also work with 2.0 kernels
but I really didn't test it), the older LLP (Linux Lab Project) library
to be found at

  http://www.llp.fu-berlin.de

(which, at least the last time I checked, didn't work with 2.2. and 2.4
kernels) or the one from National Instruments, to be downloaded from

  http://www.natinst.com

(which is supposed to work with 2.2 kernels, but I couldn't get it to
function reliable). Unfortunately, only the LLP library supports cards
from other companies than National Instruments. You may also compile
fsc2 without having a GPIB library, but then devices controlled via the
GPIB bus can't be used.


B) Permissions and Related Problems
===================================

If you want to do more than just very basic tests with fsc2 you should
create a special account for it. fsc2 needs to be installed setuid'ed,
so for security reasons its account should have as low privileges as
possible and should not be able to log into the system (e.g. by setting
its shell in /etc/passwd to /bin/false) and not be installed with root
privileges. Most of the time fsc2 runs with the effective user ID (EUID)
and effective group ID (EGID) set to the real users ID and group but in
a few places (e.g. when writing to log files, manipulating lock files or
accessing shared memory or device files) it sets back the EUID and EGID
to the one of fsc2.

When deciding about the group fsc2 shall belong to I would recommend to use
the group that has read and write access for the serial port device files,
(/dev/ttyS* where * stands for a positive number). On most Linux systems
I have seen this group was either 'uucp' or 'dialout'. If fsc2 belongs to
this group it automatically has the permisssion to access these device
files. Otherwise you will have to either change the modes of the files to
allow access by 'other', i.e. by every account, or to make all users of
fsc2 belong to this group (probably as one of their supplementary groups).

By setting the group of the device file for the GPIB board to the group
fsc2 belongs to also access permissions to the board don't have to be set
to allow access by 'other' but can be restricted to this group.


C) Preparing for Installation
=============================

After installing the required tools and libraries and extracting the
archive go into the newly created directory fsc2. Edit the Makefile in
this directory.

Normally, fsc2 and all auxiliary files needed will be installed below
/usr/local (i.e. in /usr/local/bin, /usr/local/lib/fsc2, /usr/local/info
and /usr/local/share/doc). To change these locations edit the first lines
of the Makefile.

The next two variables, OWNER and GROUP, will be used when setting the
owner of all the files that will be installed as well as its group. See
the preceding section for the details.

The next lines are for setting the GPIB library that you are going to use.
You may set the first variable, GPIB_LIBRARY either to LLP for the old
(Linux Lab Project) library, to NI when using the National Instruments
library or to JTT if you're using the library I wrote. If you don't want
GPIB support you also may set this variable to NONE. In this case fsc2
won't be able to run experiments which need devices that are connected
via the GPIB bus (but you still can test such EDL programs). Use this
option only if you either want to built a test version or if all your
devices are controlled via the serial ports.

If you use the National Instruments GPIB driver you can set the location
where fsc2 will expect the GPIB configuration file, gpib.conf. But usually
there is no reason to change the default value.

While running fsc2 may write out information about the activity on the
GPIB bus into a log file. You can change the default log file /tmp/gpib.log
to something appropriate for your setup (or even to /dev/null). You can also
set the verbosity of the logs by changing the variable GPIB_LOG_LEVEL to
either HIGH, MEDIUM, LOW or OFF.

The next to variables, NUM_SERIAL_PORTS and SERIAL_LOCK_DIR are for handling
of the serial ports. NUM_SERIAL_PORTS should be set to the number of serial
ports that the computer has. If the variable is not set (or set to 0) no
serial ports can be used.

SERIAL_LOCK_DIR must be a string with the name of the directory where UUCP
type lock files for the serial ports are created (there is a convention that
programs opening a serial port create such a lock file that contain the
process ID (PID) of the program as a decimal ASCII number, so that other
programs can check if the port is already in use and by whom). Accordingto
version 2.2 of the Filesystem Hierachy Standard this directory should be
'/var/lock', but on old systems also '/usr/spool/locks' and '/usr/spool/uucp'
where commonly used, so this can be adjusted via this variable. If you don't
want lock files for the serial port to be created simply don't define this
variable. A possible problem arises in case you use programs creating lock
files not in the HDB UUCP format (the PID being stored in a ten byte string,
left-padded with spaces and with a trailing newline). In this case fsc2 will
not try to remove stale lock files and instead print an error message to the
terminal and the lock file has to be removed manually.

The final variable to be set is the email address of the person that will
receive bug reports and notifications if fsc2 should crash. Usually, you
should not change this variable except when you apply changes to the program.
In this case sending these kind of mails to me obviously doesn't make too
much sense...


D) Compiling and Installing
===========================

Go into the main directory of the package and type 'make'. This may take
some time to finish. Usually no warnings should show up during the
compilation (at least on systems with a newer libc and if my GPIB library
is used), but warnings may occur when the documentation is created and some
of the required tools are not available. It may even happen that make stops
with an error message during this stage (i.e. while making the documentation).
This does *not* mean that the program didn't compile succesfully!

Please don't start 'make' from one of the subdirectories, this is bound to
fail in most cases.

If you get more than a few warnings (except from header files not from fsc2)
during the compilation stage of the program (or the make process fails
completely please send me an email with the output of make. You can save the
output of make to a file, e.g. makelog, by running make with the command

    make > makelog 2>&1

if you're using the Bourne or Korn shell (sh or ksh) or bash. Use

    make >& makelog

if you use the C shell (csh) or tcsh.

When the compilation of the program succeeds (even though making the
documentation failed at some stage), you can now install the program by
typing 'make install'. Normally, you will need root privileges to do this.
If making the documentation failed with an error also the installon may
fail while installing the documentation, but this is not something to
worry about...

Please note: If you installed the program and then decide that you don't
like it and want to get rid of it, you can always de-install it by running

   make deinstall

as long as you haven't changed the makefiles in between.


E) Simple Tests
===============

The subdirectory 'edl' contains several several EDL programs that you can
use to test fsc2 and get acquainted with the syntax. Unfortunately, some
of the files will not work - I didn't had time to systematically weed out
the ones that are outdated. There are a few programs that will even work
without any devices, these are

  a.edl
  gr.edl
  stoch.edl
  qq.edl
  z.edl
  zz.edl
  2d_endor_test.edl
  2_td.edl

Just start by typing 'fsc2 a.edl' or 'fsc2 z.edl' and click onto the "Start"
button to get an idea about how fsc2 displays 1-dimensional and 2-dimensional
data sets.

             22-8-2001             Have fun, Jens

-----------------------------------------------------------------------------
       _  _____  _____
      | ||_   _||_   _|         Jens.Toerring@physik.fu-berlin.de
   _  | |  | |    | |           AG Moebius, Institut fuer Moelkuelphysik
  | |_| |  | |    | |           Fachbereich Physik, Freie Universitaet Berlin
   \___/ens|_|homs|_|oerring    Tel: ++49 (0)30 838 - 53394 / FAX: - 5????
