A) Requirements
===============

The following tools and libraries are needed to create fsc2:

 1) gmake
 2) gcc
 3) flex
 4) bison
 5) install
 6) mail
 7) sed
 8) addr2line
 9) XFORMS library (version 0.89 or higher)
10) GPIB library (will also compile and run without, see below)

To create the complete documentation you will also need

11) makeinfo
12) tex
13) convert (from ImageMagick)
14) dvips
15) perl (version 5.0 or higher)
16) pdftex
17) gzip


The XFORMS library is available from e.g. (some links may be outdated)

  ftp.cs.ruu.nl/pub/XFORMS
  einstein.phys.uwm.edu/pub/xforms
  ftp.fu-berlin.de/unix/X11/gui/xforms
  ftp.st.ryukoku.ac.jp/pub/X11/xforms
  ftp.via.ecp.fr/pub2/xforms
  ftp.unipi.it/pub/mirror/xforms
  ftp.uni-trier.de/pub/unix/X11/xforms


The GPIB library consists of a library and a module to interface GPIB cards.
You can either use the one I've written (works, as ar as I know, for fsc2
with 2.2 and 2.4 kernels and should also work with 2.0 kernels but I really
didn't test yet), the older LLP (Linux Lab Project) library to be found at

  ftp.llp.fu-berlin.de/pub/linux/LINUX-LAB/IEEE488

(which, at least the last time I checked, didn't work with 2.2. and 2.4
kernels) or the one from National Instruments, to be downloaded from

  http://www.natinst.com

(which is supposed to work with 2.2 kernels, but I couldn't get it to
function reliable). Unfortunately, only the LLP library supports cards
from other companies than National Instruments. You may also compile
fsc2 without having a GPIB library, but then devices controlled via the
GPIB bus can't be used.


B) Preparing for Installation
=============================

After installing the required tools and libraries and extracting the
archive go into the newly created directory fsc2. Edit the Makefile in
this directory.

Normally, the fsc2 and all auxiliary files needed will be installed below
/usr/local (i.e. in /usr/local/bin, /usr/local/lib/fsc2, /usr/local/info
and /usr/local/share/doc). To change this location edit the first lines
of the Makefile.

The next make file variable, RESOLUTION, tells fsc2 if the program is going
to be run on a machine with a high or a low resolution display. Monitors
with less than 17" inch can be considered low resolution. Set the variable
either to LOW or HIGH accordingly.

The next lines are for setting the GPIB library that you are going to use.
You may set the first variable, GPIB_LIBRARY either to LLP for the old
(Linux Lab Project) library, to NI when using the National Instruments
library or to JTT if you're using the library I wrote. If you don't want
GPIB support you also may set this variable to NONE. In this case fsc2
won't run experiments which need devices that are connected via the GPIB
bus (but you still can test such EDL programs). Use this option only if
you either want to built a test version or if all your devices are
controlled via the serial ports.

If you use the National Instruments GPIB driver you can set the place
where fsc2 expects the GPIB configuration file, gpib.conf. But usually
there is no reason to change the default value.

While running fsc2 may write out information about the activity on the
GPIB bus into a log file. You may change the default, /tmp/gpib.log, to
something appropriate for you (or even to /dev/null). You can also set
the verbosity of the logs by changing the variable GPIB_LOG_LEVEL to
either HIGH, MEDIUM, LOW or OFF.

The next two variables must be set to the owner of the all files that will
be installed as well as its group. I would strongly recommend to create a
special account and a special group for fsc2. fsc2 needs to be setuid'ed,
so for security reasons this special user should have as low privileges as
possible and should not be able to log in to the system (set it's shell in
/etc/passwd to /bin/false). Most of the time fsc2 runs with the real users
ID and group but at a few places (e.g. when writing to shared log files,
creates lock files, or accesses shared memory) it switches back to the EUID
and EGID of fsc2.

Finally, a variable named IS_I386 can be set. Please comment out this line
or simply delete it if you want to compile the program for a machine that
does not use an i386 type of processor (e.g. on a PPC). Some routines used
only for debugging need a bit of assembler, so they wont work on a processor
with a completely different architecture. If the line defining the variable
IS_I386 is removed these parts are left out of the program, but in every
other respect fsc2 should work as on an i386 machine.


C) Compiling and Installing
===========================

Go into the main directory of the package and type 'make'. This may take
some time to finish. Usually no warnings should show up during the
compilation (at least on systems with a newer libc and if my GPIB library
is used), but errors can happen when the documentation is created and some
of the required tools are not available. It can even happen that make stops
with an error message in this case (i.e. during making the documenntation).
This does *not* mean that the program didn't compile succesfully!

Please don't start 'make' from one of the subdirectories, this is bound to
fail in most cases.

If you get more than a few warnings during the compilation stage of the
program or the make process fails completely you should send me an email
with the output of make.

When the compilation of the program succeded (even though making the
documentation failed at some stage), you can now install the program by
typing 'make install'. Normally, you will need root privileges to do so.
If making the documentation failed with an error also the installion may
fail while installing the documentation, but this is not something to
worry about...


D) Simple Tests
===============

The subdirectory 'edl' contains several several EDL programs that you can
use to test fsc2 and get acquainted with the syntax. Unfortunately, some
of the files will not work - I didn't had time to systematically weed out
the ones that are outdated. There are a few programs that will even work
without any devices, these are

  a.edl
  gr.edl
  stoch.edl
  z.edl
  zz.edl
  2d_endor_test.edl
  2_td.edl

Just start by typing 'fsc2 a.edl' or 'fsc2 z.edl' and click onto the "Start"
button to get an idea about how fsc2 displays 1-dimensional and 2-dimensional
data sets.
                                            Have fun, Jens

                               email: Jens.Toerring@physik.fu-berlin.de
