/*
  $Id$
*/

/********************************************************************/
/* List of all non-builtin functions that can be used in EDL files  */
/*                                                                  */
/* Syntax:                                                          */
/*                                                                  */
/*               name, # args [ , access ] ;                        */
/*                                                                  */
/* where `name' is the name of the function and `#args' is the      */
/* number of arguments - use a negative number for functions with   */
/* variable number of arguments. The optional parameter `access'    */
/* is the access flag, where ALL means that it can be used in all   */
/* sections of an EDL file while EXP says that the function can     */
/* be used only in the EXPERIMENTS section, i.e. it's probably a    */
/* function that accesses a device. The default is EXP. Finally,    */
/* PREP says that the function may only be used in the preparation  */
/* of an experiment.                                                */
/*                                                                  */
/********************************************************************/


square, 1, ALL;                 // returns the square of a value
int_slice, 1, ALL;              // creates an integer array slice
float_slice, 1, ALL;            // creates an float array slice


// Functions exported by the magnet power supply drivers (S_BAND)

magnet_setup, 2, ALL;           // set start field and sweep step size
magnet_fast_init, 0, ALL;       // shortens magnet setup time
set_field, 1, EXP;              // goto to a field value
sweep_up, 0, EXP;               // sweep magnet up
sweep_down, 0, EXP;             // sweep magnet down
reset_field, 0, EXP;            // go back to start field

measure_field, 0, EXP;          // for driver er035m_sa

// Functions exported by the field meter drivers (BH15, ER035M)

find_field, 0, EXP;             // return current field value
field_resolution, 0, EXP;       // returns resolution of field meter
field_meter_wait, 0, EXP;       // wait a bit for field to stabilize

measure_field, 0, EXP;          // return field value (ER035M_SA)

// Functions exported by the pulser drivers (DG2020)

pulser_update, 0, EXP;          // commits changes
pulser_shift, -1, EXP;          // shift pulse positions
pulser_increment, -1, EXP;      // change pulse lengths
pulser_pulse_reset, -1, EXP;    // set back pulses to initial state
pulser_next_phase, -1, EXP;     // switch to next phase in phase cycling
pulser_phase_reset, -1, EXP;    // switch back to first phase


// Functions exported by the lock-in amplifier drivers
// (SR510, SR530, SR810, SR830)

lockin_get_data, -1, EXP;       // returns the lock-in voltage 
lockin_get_adc_data, 1, EXP;    // returns a ADC voltage
lockin_dac_voltage, -1, ALL;    // gets or sets DAC voltage
lockin_sensitivity, -1, ALL;    // gets or sets the sensitivity
lockin_time_constant, -1, ALL;  // gets or sets the time constant
lockin_phase, -1, ALL;          // gets or sets the phase
lockin_ref_freq, -1, ALL;       // Get or set reference frequency (SR8x0 only)
lockin_ref_mode, 0, EXP;        // Get reference mode (SR8x0 only)
lockin_ref_level, -1, ALL;      // Get or set reference level (SR8x0 only)


// functions exported by the digitizer (TDS754A)

digitizer_define_window, -1, PREP;      // defines a cursor window
digitizer_timebase, -1, PREP;           // set or get the time base
digitizer_num_averages, -1, ALL;        // set or get number of averages
digitizer_trigger_channel, 1, PREP;     // set or get trigger channel
digitizer_start_acquisition, 0, EXP;
digitizer_get_area, -1, EXP;
digitizer_get_curve, -1, EXP;

digitizer_get_channel_number, 1, ALL;   // only for internal use !


// functions exported by the rf synthesizer (HP8647A)

synthesizer_state, -1, ALL;           // set/get state (ON/OFF)
synthesizer_frequency, -1, ALL;       // set/get frequency
synthesizer_attenuation, -1, ALL;     // set/get attenuation
synthesizer_step_frequency, -1, ALL;  // set/get sweep step frequency
synthesizer_sweep_up, 0, EXP;         // sweep up
synthesizer_sweep_down, 0, EXP;       // sweep down
synthesizer_reset_frequency, 0, EXP;  // go back to start frequency
synthesizer_use_table, -1, PREP;      // set attenuation-table to use in sweeps
synthesizer_att_ref_freq, -1, ALL;    // set frequency the attention setting
									  // refers to
synthesizer_modulation, -1, ALL;
synthesizer_mod_type, -1, EXP;
synthesizer_mod_source, -1, EXP;
synthesizer_mod_ampl, -1, EXP;