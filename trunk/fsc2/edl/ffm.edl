DEVICES:

dg2020_f;
tds754a;


VARIABLES:

timebase = 5 ns;
tau = 320 ns;
dtau = 20 ns;
t_dead = 250 ns;
data[ 2 ];
res;
File;
I, J;
Win1, Win2;

ASSIGNMENTS:

TIMEBASE:     timebase;
TRIGGER_MODE: INTERNAL, REP_FREQ = 200 Hz;

MICROWAVE:           POD = 5,    V_HIGH = 5 V, V_LOW = 0 V, INV;
TWT_GATE:            POD = 8,    V_HIGH = 5 V, V_LOW = 0 V;
DETECTION:           POD = 0,    V_HIGH = 5 V, V_LOW = 0 V;
DETECTION_GATE:      POD = 7,    V_HIGH = 5 V, V_LOW = 0 V;
PHASE_1:         MW, POD = 1, 2, V_HIGH = 5 V, V_LOW = 0 V;

PHASE_SETUP_1:     +X: 0, 0,
                   +Y: 1, 0,
                   -X: 0, 1,
                   -Y: 1, 1;

PHASE_SWITCH_DELAY_1 = 80ns;
GRACE_PERIOD: 10ns;


PHASES:

PHASE_SEQUENCE_1     = -y, x, -y, -y;
PHASE_SEQUENCE_2     = x, x, x, -y;
ACQUISITION_SEQUENCE = +, -, -, +;


PREPARATIONS:

P0: FUNC        = MW,
    START       = 300 ns,
    LENGTH      = 15 ns,
    PHASE_CYCLE = PHS1;

P1: FUNC        = MW,
    START       = P0.START + tau,
    LENGTH      = 15 ns,
    DSTART      = dtau,
    PHASE_CYCLE = PHS2;

P2: FUNC        = MW,
    START       = P1.START + 1800 ns,
    LENGTH      = 15 ns,
    DSTART      = dtau;


P3: FUNC        = TWT_GATE,
    START       = 0 ns,
    LENGTH      = P2.START + P2.LENGTH - 80 ns - P3.START,
    DLENGTH     = dtau;

P31: FUNC        = TWT_GATE;

P32: FUNC        = TWT_GATE,
    DSTART      = dtau;

P4: FUNC        = DETECTION,
    START       = P2.START,
    LEN         = 10 ns,
    DSTART      = dtau;

P5: FUNC        = DETECTION_GATE,
    START       = P3.START + P3.LENGTH + t_dead,
    LENGTH      = 2000 ns,
    DSTART      = dtau;


Win1 = digitizer_define_window( 320 ns, 8 ns );
Win2 = digitizer_define_window( 606 ns, 8 ns );
digitizer_num_averages( 20 );
digitizer_trigger_channel( CH4 );

init_1d( 1, 1024, tau * 1e9, dtau * 1e9, "tau [ ns ]",
         "Echo intensity [ Vs ]" );


EXPERIMENT:


pulser_update( );


save_program( "% " );



FOR I = 1 : 1024 {

    res = 0.0;

    FOR J = 1 : 4 {

        digitizer_start_acquisition( );
        data[ 1 ] = digitizer_get_area( CH1, Win1 );
        data[ 2 ] = digitizer_get_area( CH1, Win2 );

        IF ( J == 1 | J == 4 ) {
            res = res + ( data [ 1 ] - data [ 2 ] );
        } ELSE {
            res = res - ( data [ 1 ] - data [ 2 ] );
        }

        pulser_next_phase( );
        pulser_update( );
    }

    display( I, res );

    fsave( "#\n", res );

    pulser_shift( );
    pulser_increment( );

    IF ( P3.LENGTH > 3 us ) {
        P31.START  = P3.START;
        P31.LENGTH = P1.START + P1.LENGTH - 80 ns - P31.START;
        P32.START  = P2.START - 200 ns;
        P32.LENGTH = P2.START + P2.LENGTH - 80 ns - P32.START;
        P3.LENGTH  = 0 ns;
    }

    pulser_update( );
}

