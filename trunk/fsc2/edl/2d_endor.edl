/*
	EDL program for time-resolved ENDOR on transient radicals

	$Id$
*/
	

DEVICES:

hp8647a;                     // RF synthesizer
tds520;                      // digitizer
er035m_sas;                  // gauss meter


VARIABLES:

start_freq  =   8 MHz;
end_freq    =  22 MHz;
step_freq   = 100 kHz;          

attenuation =  -5 dB;

N_runs      = 20;            // how many times to repeat the whole experiment
N_averages  = 16;            // number of averages per frequency point

N_max_base_curves = 10;      // how many curve to use for baseline correction

Channel = CH1;               // input channel of the digitizer


/***********************************************/
/* Nothing needs to be changed below this line */
/***********************************************/

freq = start_freq;

N_steps = round( ( end_freq - start_freq ) / step_freq ) + 1;

curve[ * ];                      // for new raw data
mean_curve[ N_steps, * ];        // complete field of averaged data
base_curve[ * ];                 // averaged baseline curve
Pretrigger;
ground = 0.0;
mean_ground[ N_steps ];

Rec_len;                         // number of points of trace
trig_pos;                        // position od trigger in data set (range 0-1)
time_base;                       // time base of digitizer (in s)
time_res;                        // digitizer time resolution (in ns)

min_time, max_time;              // first / last point (in ns)
start_time, end_time;            // intergation window start / end pos. (in ns)
new_start_time, new_end_time;    // new values od sliders (in ns)
Start_pos, End_pos, Width;
N_base_curves;
integ, base_int;
integral[ 2 ];

I, J, K;                         // counters

F1, F2, F3;                      // file handlers
S1, S2;                          // slider handlers
B1, B2;                          // button handlers

End_index;
Is_stored = 0;


PREPARATIONS:

synthesizer_use_table( );
synthesizer_attenuation( attenuation );
synthesizer_frequency( start_freq );
synthesizer_att_ref_freq( 14 MHz );
synthesizer_modulation( "OFF" );

digitizer_num_averages( N_averages );

init_2d( 3, 0, N_steps, 0, 0, start_freq * 1.0e-6, step_freq * 1.0e-6,
		 "Time / us", "Radio frequency / MHz", "Signal / mV" );


EXPERIMENT:

synthesizer_state( "ON" );

/* Get the digitizers record length, trigger position and time base to be able
   to readjust the RF scale and to find out how many points we have before the
   laser starts - these points are used to get rid of changing 'zero levels' */

Rec_len   = digitizer_record_length( );
trig_pos  = digitizer_trigger_position( );
time_base = digitizer_timebase( );

time_res  = time_base * 1.0e9 / 50.0;

min_time = - trig_pos * Rec_len * time_res;
max_time   = min_time + Rec_len * time_res;

Pretrigger = int( 0.9 * trig_pos * Rec_len );
change_scale( min_time * 1.0e-3, time_res * 1.0e-3);

/* Get a file for storing all data */

F1 = get_file( "File for storing complete data sets:" );
F2 = get_file( "File for storing averaged data sets:" );

IF is_file( F2 ) {
	fsave( F2, "% Start frequency  = # MHz\n", start_freq * 1.0e-6 );
	fsave( F2, "% End frequency    = # MHz\n", end_freq * 1.0e-6 );
	fsave( F2, "% Step frequency   = # kHz\n", step_freq * 1.0e-3 );
	fsave( F2, "% Attenuation      = # dB\n", attenuation );
	fsave( F2, "% Record length    = #\n", Rec_len );
	fsave( F2, "% Trigger position = #\n", int( trig_pos * Rec_len ) );
	fsave( F2, "% Time base        = # ns\n", time_base * 1.0e-9 );
	fsave( F2, "%Sensitivity       = # mV\n",
		   1.0e3 * digitizer_sensitivity( Channel ) );
	fsave( F2, "% Field            = # G\n", measure_field( ) );
	save_comment( F2, "% ", "Sample: \nMicrowave frequency: \n"
				  "Microwave power: \nTemperature: \n" );
}

/* Create the sliders for setting the integration window limits */

start_time = 0.0;
S1 = slider_create( "VALUE_SLIDER", min_time, max_time,
	                "Integration window border 1 (ns)" );
slider_value( S1, start_time );
Start_pos = int( Rec_len * trig_pos );

S2 = slider_create( "VALUE_SLIDER", min_time, max_time,
		            "Integration window border 2 (ns)" );
end_time = 50.0 * time_res;
slider_value( S2, end_time );
Width = 51;


FOR J = 1 : N_runs
{
    print( "Starting #. run of #\n", J, N_runs );

	/* Set the synthesizer to the start frequency and start an acquisition */

	freq = start_freq;
	synthesizer_frequency( freq );

	digitizer_start_acquisition( );

    FOR I = 1 : N_steps
	{
		Is_stored = 0;

		/* Get next curve from the digitizer */

		curve = digitizer_get_curve_fast( Channel );

		/* If this wasn't the very last curve of the run set the new frequency
		   and already start the next masurement, so we're not loosing time 
		   doing all the graphics */

		IF I != N_steps {
	        freq += step_freq;
			synthesizer_frequency( freq );
			digitizer_start_acquisition( );
		}

		/* Write the new date to file */

		IF is_file( F1 ) {
			fsave( F1, "% #.run, frequency = # MHz\n\n", J, freq * 1.0e-6 );
			save( F1, curve );
		}

		/* Add the new curve to the results from previous runs */

		IF J != 1 {
			mean_curve[ I ] = ( ( J - 1 ) * mean_curve[ I ] + curve ) / J;
		} ELSE {
			mean_curve[ I ] = curve;
		}
		Is_stored = 1;

		/* Calculate the mean of the data before the trigger used to get rid
		   of changes of the 'zero level' */

		IF Pretrigger != 0 {
	    	ground = mean( curve, 1, Pretrigger );
			mean_ground[ I ] = ( ( J - 1 ) * mean_ground[ I ] + ground ) / J;
		}

		/* At the start of run add up curves used for baseline correction */

		IF I <= N_max_base_curves {
			IF I == 1 & J == 1 {
				N_base_curves = 1;
				base_curve = curve - ground;
			} ELSE {
				N_base_curves += 1;
		    	base_curve = ( 1.0 - 1.0 / N_base_curves ) * base_curve
	    		             + ( curve - ground ) / N_base_curves;
			}
		}

		/* Calculate the values of the integration window (now using 'curve'
		   as temporary storage for the baseline corrected curve) */

		curve = 1.0e3 * ( mean_curve[ I ] - base_curve - mean_ground[ I ] );
		integral[ 1 ] = 1.0e3 * mean( mean_curve[ I ], Start_pos, Width );
		integral[ 2 ] = mean( curve, Start_pos, Width );

		/* Display the new data */

		display( 1, I, 1.0e3 * mean_curve[ I ], 1,
				 1, I, curve, 2,
				 1, I, integral[ 1 ], 3,
				 2, I, integral[ 2 ], 3 );

		/* Finally check for new positions of the integration window sliders */

		new_start_time = slider_value( S1 );
		new_end_time   = slider_value( S2 );
		IF start_time != new_start_time | end_time != new_end_time
		{
			start_time = new_start_time;
			end_time   = new_end_time;

			Start_pos = round( ( start_time - min_time ) / time_res ) + 1;
			End_pos   = round( ( end_time - min_time ) / time_res ) + 1;
			Width = abs( End_pos - Start_pos ) + 1;
			IF Width > Rec_len - Start_pos + 1 {
				Width = Rec_len - Start_pos + 1 ;
			}
			IF Start_pos > End_pos {
				Start_pos = End_pos;
			}

			IF ( J == 1 ) {
				End_index = I;
			} ELSE {
				End_index = N_steps;
			}

			base_int = 1.0e3 * mean( base_curve, Start_pos, Width );
			FOR K = 1 : End_index {
				integral[ 1 ] = 1.0e3 * mean( mean_curve[ K ],
											  Start_pos, Width );
				integral[ 2 ] = integral[ 1 ] - base_int
								- 1.0e3 * mean_ground[ K ];
				display( 1, K, integral[ 1 ], 3,
				 		 2, K, integral[ 2 ], 3 );
			}
		}
	}

	print( "I = #, N_steps = #\n", I, N_steps );
}


/* Post-experiment stuff */

ON_STOP:

synthesizer_state( "OFF" );

/* Save the averaged data if a file has been selected */

IF ! Is_stored {           // Check if data of last trace were stored
	I -= 1;
	freq = start_freq + I * step_freq;
}

IF is_file( F2 )
{
	IF J < N_runs {
		fsave( F2, "% Number of runs: #\n", J );
	} ELSE {
		fsave( F2, "% Number of runs: #\n", N_runs );
	}

	IF I < N_steps {
		fsave( F2, "% Last run not finished, end frequency was # MHz\n",
 			   freq * 1.0e-6 );
	}
	save_program( F2, "% " );

	IF J == 1 & I < N_steps {
		End_index = I;
	} ELSE {
		End_index = N_steps;
	}

	freq = start_freq;
	FOR I = 1 : End_index {
		fsave( F2, "\n% Frequency: # MHz\n\n", freq * 1.0e-6 );
		freq += step_freq;
		save( F2, mean_curve[ I ] );
	}
}

/* Create two buttons for saving integrals and finally stopping */

B1 = button_create( "NORMAL_BUTTON", "Save" );
B2 = button_create( "NORMAL_BUTTON", "Done" );

FOREVER
{
	IF button_state( B2 ) {          // check Done button
		BREAK;
	}

	IF button_state( B1 )            // check Save button
	{
		F3 = get_file( "File for storing integrated region:" );		
		IF is_file( F3 ) {
			IF start_time < end_time {
				fsave( F3, "% Integration window from # ns to # ns\n"
						   "% (times relative to trigger)\n\n"
						   "% Integral over raw data\n\n",
					   start_time, end_time );
			} ELSE {
				fsave( F3, "% Integration window from # ns to # ns\n"
						   "% (times relative to trigger)\n"
						   "% Integrals over raw data:\n\n",
					   end_time, start_time );
			}

			IF J == 1 & I < N_steps {
				End_index = I;
			} ELSE {
				End_index = N_steps;
			}

			base_int = mean( base_curve, Start_pos, Width );
			FOR K = 1 : End_index {
				fsave( F3, "#\n", mean( mean_curve[ K ], Start_pos, Width ) );
			}
			fsave( F3, "\n% Integrals over preprocessed data:\n\n" );
			FOR K = 1 : End_index {
				fsave( F3, "#\n", mean( mean_curve[ K ], Start_pos, Width )
								  - base_int - mean_ground[ K ] );
			}
		}

		NEXT;
	}

	/* Get new positions of sliders - if nothing changed wait for a moment
	   and go back to start of loop */

	new_start_time = slider_value( S1 );
	new_end_time   = slider_value( S2 );
	IF start_time == new_start_time & end_time == new_end_time {
		wait( 0.3 s );
		NEXT;
	}

	start_time = new_start_time;
	end_time   = new_end_time;

	/* Calculate new indices of integration windows and calculate and display
	   the integrals */

	Start_pos = round( ( start_time - min_time ) / time_res ) + 1;
	End_pos   = round( ( end_time - min_time ) / time_res ) + 1;
	Width = abs( End_pos - Start_pos ) + 1;

	IF Width > Rec_len - Start_pos + 1 {
		Width = Rec_len - Start_pos + 1;
	}
	IF Start_pos > End_pos {
		Start_pos = End_pos;
	}

	IF ( J == 1 ) {
		End_index = I;
	} ELSE {
		End_index = N_steps;
	}

	base_int = 1.0e3 * mean( base_curve, Start_pos, Width );
	FOR K = 1 : End_index {
		integral[ 1 ] = 1.0e3 * mean( mean_curve[ K ], Start_pos, Width );
		integral[ 2 ] = integral[ 1 ] - base_int - 1.0e3 * mean_ground[ K ];
		display( 1, K, integral[ 1 ], 3,
				 2, K, integral[ 2 ], 3 );
	}
}
