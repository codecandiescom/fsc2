/* $Id$ */

=== TRIG_MODE menu [ "EXTERNAL", "INTERNAL" ] [ 1 ] "Trigger mode"
=== REP_TIME float [ 0.001 : ] [ 50 ] "Repetition time" "ms"
=== P1_POS int [ 200 : 167772150 ] [ 200 ] "Position of 1st MW pulse" "ns"
=== P1_LEN int [ 10 : 167772150 ] [ 100 ] "Length of 1st MW pulse" "ns"
=== P2_LEN int [ 10 : 167772150 ] [ 200 ] "Length of 2nd MW pulse" "ns"
=== P3_LEN int [ 10 : 167772150 ] [ 200 ] "Length of 3rd MW pulse" "ns"
=== P1_P2_DIST int [ 100 : 167772150 ] [ 400 ] "P1-P2 distance" "ns"
=== P2_P3_DIST int [ 100 : 167772150 ] [ 400 ] "P2-P3 distance" "ns"
=== DET_OFFSET int [ -167772150 : 167772150 ] [ 0 ] "Detection offset" "ns"
=== CREATE_DEFENSE button [ ON ] "Create defense pulse"
=== PULSE_2_DEFENSE float [ 0 : ] [ 50 ] "End of MW pulse to\nend of defense\npulse distance" "ns"
=== N_AVG menu [ "1", "3", "10", "30", "100", "300", "1000", \
===			     "3000", "10000" ] [ 3 ] "Number of averages"
=== START_FIELD float [ 0 : 48370.8 ] [ 35000 ] "Start field" "G"
=== END_FIELD float [ 0 : 48370.8 ] [ 36000 ] "End field" "G"
=== FIELD_STEP float [ 0.04152 :  ] [ 1 ] "Field step" "G"
=== ADC_CHANNELS menu [ "0", "1", "0 and 1" ] "ADC channel(s) to use"
=== SHOW_PREV button [ OFF ] "Show pulse preview"
=== WAIT_TIME float [ 0.0 : ] [ 5.0 ] "Magnet wait time" "s"
DEVICES:

ips120_10;
rb8509;
rb_pulser_w;


VARIABLES:

repeat_time   = REP_TIME ms;
p1_pos        = P1_POS ns;
p1_to_p2_dist = P1_P2_DIST ns;
p2_to_p3_dist = P2_P3_DIST ns;
p1_len        = P1_LEN ns;
p2_len        = P2_LEN ns;
p3_len        = P3_LEN ns;
det_offset    = DET_OFFSET ns;

start_field   = START_FIELD G;
end_field     = END_FIELD G;
=== if ( START_FIELD <= END_FIELD )
field_step    = magnet_field_step_size( FIELD_STEP G );
=== else
field_step    = - magnet_field_step_size( FIELD_STEP G );
=== endif

N_Avg    = N_AVG;
N_Points = ceil( ( end_field - start_field ) / field_step ) + 1;
field[ N_Points ];
wait_time = WAIT_TIME s;
I;
J = 0;
L = 0;
K;
=== if ( ADC_CHANNELS eq "0 and 1" )
data[ 2, *, * ];
avg[ 2, N_Points ] = { float_slice( N_Points ), float_slice( N_Points ) };
=== else
data[ *, * ];
avg[ N_Points ] = float_slice( N_Points );
=== endif
File1, File2;
B1, B2, B3;


ASSIGNMENTS:

TIMEBASE: 10 ns;
=== if ( TRIG_MODE eq "EXTERNAL" )
TRIGGER_MODE: EXTERNAL;
=== else
TRIGGER_MODE: TRIG_MODE, REPEAT_TIME = repeat_time;
=== endif


PREPARATIONS:

=== if ! CREATE_DEFENSE
pulser_defense_pulse_mode( "OFF" );
=== else
pulser_minimum_defense_distance( PULSE_2_DEFENSE ns );
=== endif

P1:  FUNCTION = MICROWAVE,
	 START    = p1_pos,
	 LENGTH   = p1_len;

P2:  FUNCTION = MICROWAVE,
	 START    = P1.START + p1_to_p2_dist + 0.5 * ( P1.LENGTH - p2_len ),
	 LENGTH   = p2_len;

P3:  FUNCTION = MICROWAVE,
	 START    = P2.START + p2_to_p3_dist + 0.5 * ( P2.LENGTH - p3_len ),
	 LENGTH   = p3_len;

P4:  FUNCTION = DETECTION,
	 START    = P3.START + det_offset + p1_to_p2_dist + 0.5 * P3.LENGTH,
	 LENGTH   = 10 ns;

=== if SHOW_PREV
pulser_show_pulses( );
=== endif

=== if ( ADC_CHANNELS eq "0 and 1" )
=== if ( START_FIELD <= END_FIELD )
init_1d( 4, N_Points, start_field, field_step,
		 "Field [G]", "Echo amplitude [a.u.]" );
=== else
init_1d( 4, N_Points, end_field, - field_step,
		 "Field [G]", "Echo amplitude [a.u.]" );
=== endif
=== else
=== if ( START_FIELD <= END_FIELD )
init_1d( 2, N_Points, start_field, field_step,
		 "Field [G]", "Echo amplitude [a.u.]" );
=== else
init_1d( 2, N_Points, end_field, - field_step,
		 "Field [G]", "Echo amplitude [a.u.]" );
=== endif
=== endif


EXPERIMENT:
=== if ( TRIG_MODE eq "EXTERNAL" )
print( "Please make sure the repetition time is set correctly!\n" );
=== endif

pulser_state( "ON" );

field[ 1 ] = magnet_field( start_field );
IF abs( field[ 1 ] - start_field ) > 0.05 * FIELD_STEP G {
   print( "Start field had to be adjusted from # G to # G.\n",
          start_field, field[ 1 ] );
}

IF abs( FIELD_STEP G - abs( field_step ) ) > 0.05 * FIELD_STEP G {
	print( "Field step size had to be adjusted from # G to # G.\n",
	       FIELD_STEP G, abs( field_step ) );
}

start_field = field[ 1 ];
end_field = start_field + ( N_Points - 1 ) * field_step;

=== if ( START_FIELD >= END_FIELD )
change_scale( start_field, field_step );
=== else
change_scale( end_field, - field_step );
=== endif

IF wait_time > 1 us {
	wait( wait_time );
}

File1 = get_file( "", "*.avg", "", "", "avg" );

hide_toolbox( "ON" );
B1 = output_create( "INT_OUTPUT", "Current scan" );
B2 = output_create( "FLOAT_OUTPUT", "Current field [G]", "%.3f" );
B3 = button_create( "PUSH_BUTTON", "Stop after end of scan" );
hide_toolbox( "OFF" );


FOREVER {
	L = 0;
	J += 1;
	output_value( B1, J );

	FOR I = 1 : N_Points {
		output_value( B2, field[ I ] );
		wait( 1.1 * repeat_time * N_Avg );

=== if ( ADC_CHANNELS eq "0 and 1" )
=== if ( START_FIELD <= END_FIELD )
        data[ 1, J, I ] = daq_get_voltage( CH0 );
        data[ 2, J, I ] = daq_get_voltage( CH1 );
		avg[ 1, I ] = add_to_average( avg[ 1, I ], data[ 1, J, I ], J );
		avg[ 2, I ] = add_to_average( avg[ 2, I ], data[ 2, J, I ], J );
		L += 1;
		display_1d( I, data[ 1, J, I ], 1, I, data[ 2, J, I ], 2,
                    I, ( ( J - 1 ) * avg[ 1, I ] + data[ 1, J, I ] ) / J, 3,
					I, ( ( J - 1 ) * avg[ 2, I ] + data[ 2, J, I ] ) / J, 4 );
=== else
		data[ 1, J, N_Points - I + 1 ] = daq_get_voltage( CH0 );
		data[ 2, J, N_Points - I + 1 ] = daq_get_voltage( CH1 );
		avg[ 1, N_Points - I + 1 ] =
			               add_to_average( avg[ 1, N_Points - I + 1 ],
			                               data[ 1, J, N_Points - I + 1 ], J );
		avg[ 2, N_Points - I + 1 ] =
			               add_to_average( avg[ 2, N_Points - I + 1 ],
			                               data[ 2, J, N_Points - I + 1 ], J );
		L += 1;
		display_1d( N_Points - I + 1, data[ 1, J, N_Points - I + 1 ], 1,
					N_Points - I + 1, data[ 2, J, N_Points - I + 1 ], 2,
                    N_Points - I + 1,
                    ( ( J - 1 ) * avg[ 1, N_Points - I + 1 ]
                      + data[ 1, J, N_Points - I + 1 ] ) / J, 3,
                    N_Points - I + 1,
                    ( ( J - 1 ) * avg[ 2, N_Points - I + 1 ]
                      + data[ 2, J, N_Points - I + 1 ] ) / J, 2 );
=== endif
=== else
=== if ( START_FIELD <= END_FIELD )
=== if ( ADC_CHANNELS eq "0" )
        data[ J, I ] = daq_get_voltage( CH0 );
=== else
        data[ J, I ] = daq_get_voltage( CH1 );
=== endif
		avg[ I ] = add_to_average( avg[ I ], data[ J, I ], J );
		L += 1;
		display_1d( I, data[ J, I ], 1,
                    I, ( ( J - 1 ) * avg[ I ] + data[ J, I ] ) / J, 2 );
=== else
=== if ( ADC_CHANNELS eq "0" )
		data[ J, N_Points - I + 1 ] = daq_get_voltage( CH0 );
=== else
		data[ J, N_Points - I + 1 ] = daq_get_voltage( CH1 );
=== endif
		avg[ N_Points - I + 1 ] =
                               add_to_average( avg[ N_Points - I + 1 ],
		                                       data[ J, N_Points - I + 1 ], J );
        L += 1;
		display_1d( N_Points - I + 1, data[ J, N_Points - I + 1 ], 1,
                    N_Points - I + 1,
                    ( ( J - 1 ) * avg[ N_Points - I + 1 ]
                      + data[ J, N_Points - I + 1 ] ) / J, 2 );
=== endif
=== endif

		IF I < N_Points {
			field[ I + 1 ] = magnet_field( field[ I ] + field_step );
		}
	}

	IF button_state( B3 ) {
		BREAK;
	}

	field[ 1 ] = magnet_field( start_field );
	IF wait_time > 1 us {
		wait( wait_time );
	}
}

ON_STOP:

// If L is 0 and J is 1 the first scan hadn't even started

IF L > 0 OR J > 1 {

    // If J greater than 1 but L less than N_Points we got stopped during
    // a scan and have to throw away the last, unfinished one

    IF J > 1 AND L < N_Points {
	    L = N_Points;
	    J -= 1;
        IF J > 1 {
=== if ( ADC_CHANNELS eq "0 and 1" )
            avg[ 1 ] = float_slice( N_Points );
		    avg[ 2 ] = float_slice( N_Points );
            FOR K = 1 : J {
                avg[ 1 ] = add_to_average( avg[ 1 ], data[ 1, K ], K );
                avg[ 2 ] = add_to_average( avg[ 2 ], data[ 2, K ], K );
=== else
            avg = float_slice( N_Points );
            FOR K = 1 : J {
                avg = add_to_average( avg, data[ K ], K );
=== endif
            }
	    }
    }

    // If there was more than one scan write out all single scan data

    IF J > 1 {
        File2 = clone_file( File1, "avg", "scans" );
        FOR I = 1 : N_Points {
=== if ( START_FIELD <= END_FIELD )
            fsave( File2, "#", field[ I ] );
=== else
            fsave( File2, "#", field[ N_Points - I + 1 ] );
=== endif

            FOR K = 1 : J {
=== if ( ADC_CHANNELS eq "0 and 1" )
                fsave( File2, ",#,#", data[ 1, K, I ], data[ 2, K, I ] );
=== else
                fsave( File2, ",#", data[ K, I ] );
=== endif
            }
            fsave( File2, "\n" );
        }

	    fsave( File2,
			   "\n"
               "% Date:                   # #\n"
               "% Script:                 3_pulse_epr (W-band, Leiden)\n"
               "% Start field:            # G\n"
               "% End field:              # G\n"
               "% Field step:             # G\n"
               "% Repetition time:        # ms\n"
               "% Length of 1st MW pulse: # ns\n"
               "% Length of 2nd MW pulse: # ns\n"
			   "% Length of 3rd MW pulse: # ns\n"
			   "% P1-P2 separation:       # ns\n"
			   "% P2-P3 separation:       # ns\n"
               "% Number of averages:     >= #\n"
               "% Number of scans:        #\n"
               "% ADC gain:               4\n"
			   "% ADC channel(s):         ADC_CHANNELS\n",
               date( ), time( ), field[ 1 ], field[ N_Points ], field_step,
               repeat_time / 1 ms, int( P1.LENGTH / 1 ns ),
               int( P2.LENGTH / 1 ns ), int( P3.LENGTH / 1 ns ),
			   int( p1_to_p2_dist / 1 ns ), int( p2_to_p3_dist / 1 ns ),
			   N_Avg, J );
    }

    // Write the averaged data into the first file 

=== if ( START_FIELD <= END_FIELD )
    FOR K = 1 : L {
=== if ( ADC_CHANNELS eq "0 and 1" )
        fsave( File1, "#,#,#\n", field[ K ], avg[ 1, K ], avg[ 2, K ] );
=== else
        fsave( File1, "#,#\n", field[ K ], avg[ K ] );
=== endif
=== else
    FOR K = N_Points - L + 1 : N_Points {
=== if ( ADC_CHANNELS eq "0 and 1" )
        fsave( File1, "#,#,#\n", field[ N_Points - K + 1 ],
               avg[ 1, K ], avg[ 2, K ] );
=== else
        fsave( File1, "#,#\n", field[ N_Points - K + 1 ], avg[ K ] );
=== endif
=== endif
    }

    fsave( File1,
		   "\n"
           "% Date:                   # #\n"
           "% Script:                 3_pulse_epr (W-band, Leiden)\n"
           "% Start field:            # G\n"
           "% End field:              # G\n"
           "% Field step:             # G\n"
           "% Repetition time:        # ms\n"
           "% Length of 1st MW pulse: # ns\n"
           "% Length of 2nd MW pulse: # ns\n"
		   "% Length of 3rd MW pulse: # ns\n"
		   "% P1-P2 separation:       # ns\n"
		   "% P2-P3 separation:       # ns\n"
           "% Number of averages:     >= #\n"
           "% Number of scans:        #\n"
           "% ADC gain:               4\n"
		   "% ADC channel(s):         ADC_CHANNELS\n",
           date( ), time( ), field[ 1 ], field[ L ], field_step,
           repeat_time / 1 ms, int( P1.LENGTH / 1 ns ),
           int( P2.LENGTH / 1 ns ), int( P3.LENGTH / 1 ns ),
		   int( p1_to_p2_dist / 1 ns ), int( p2_to_p3_dist / 1 ns ), N_Avg, J );

    save_comment( File1, "% " );
}
