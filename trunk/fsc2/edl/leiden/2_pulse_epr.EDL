=== TRIG_MODE menu [ "EXTERNAL", "INTERNAL" ] [ 1 ] "Trigger mode"
=== REP_TIME float [ 0.001 : ] [ 50 ] "Repetition time" "ms"
=== P1_POS int [ 200 : 167772150 ] [ 200 ] "Position of 1st MW pulse" "ns"
=== P1_LEN int [ 10 : 167772150 ] [ 100 ] "Length of 1st MW pulse" "ns"
=== P2_LEN int [ 10 : 167772150 ] [ 200 ] "Length of 2st MW pulse" "ns"
=== PULSE_DIST int [ 100 : 167772150 ] [ 400 ] "Pulse distance" "ns"
=== DET_OFFSET int [ -167772150 : 167772150 ] [ 0 ] "Detection offset" "ns"
=== START_FIELD float [ 0 : 114304 ] [ 80000 ] "Start field" "G"
=== END_FIELD float [ 0 : 114304 ] [ 82000 ] "End field" "G"
=== FIELD_STEP float [ 0.14288 :  ] [ 1 ] "Field step" "G"
=== N_AVG menu [ "1", "3", "10", "30", "100", "300", "1000", \
===              "3000", "10000" ] [ 3 ] "Number of averages"
=== SHOW_PREV button [ OFF ] "Show pulse preview"
=== WAIT_TIME float [ 0.0 : ] [ 5.0 ] "Magnet wait time" "s"
DEVICES:

ips120_10;
itc503;
rb8509;
rb_pulser_j;


VARIABLES:

repeat_time   = REP_TIME ms;
p1_pos        = P1_POS ns;
p1_to_p2_dist = PULSE_DIST ns;
p1_len        = P1_LEN ns;
p2_len        = P2_LEN ns;
det_offset    = DET_OFFSET ns;

start_field   = START_FIELD G;
end_field     = END_FIELD G;
=== if ( START_FIELD <= END_FIELD )
field_step    = FIELD_STEP G;
=== else
field_step    = - FIELD_STEP G;
=== endif

field;
N_Avg    = N_AVG;
N_Points = ceil( ( end_field - start_field ) / field_step ) + 1;
wait_time = WAIT_TIME s;
I = 0;
J = 0;
K;
data[ *, * ];
avg[ N_Points ] = float_slice( N_Points );
File1, File2;
B1, B2, B3, B4;
start_temp;


ASSIGNMENTS:

=== if ( TRIG_MODE eq "EXTERNAL" )
TRIGGER_MODE: EXTERNAL;
=== else
TRIGGER_MODE: TRIG_MODE, REPEAT_TIME = repeat_time;
=== endif


PREPARATIONS:

P1:  FUNCTION = MICROWAVE,
     START    = p1_pos,
     LENGTH   = p1_len;

P2:  FUNCTION = MICROWAVE,
     START    = P1.START + p1_to_p2_dist + 0.5 * ( P1.LENGTH - p2_len ),
     LENGTH   = p2_len;

P3:  FUNCTION = DETECTION,
     START    = P2.START + det_offset + p1_to_p2_dist + 0.5 * P2.LENGTH,
     LENGTH   = 100 ns;

=== if SHOW_PREV
pulser_show_pulses( );
=== endif

=== if ( START_FIELD <= END_FIELD )
init_1d( 2, N_Points, start_field, field_step,
         "Field [G]", "Echo amplitude [a.u.]" );
=== else
init_1d( 2, N_Points, end_field, - field_step,
         "Field [G]", "Echo amplitude [a.u.]" );
=== endif


EXPERIMENT:
=== if ( TRIG_MODE eq "EXTERNAL" )
print( "Please make sure the repetition time is set correctly!\n\n" );
=== endif

pulser_state( "ON" );
daq_gain( 4 );
start_temp = temp_contr_temperature( );

field =set_field( start_field );

IF wait_time > 1 us {
    wait( wait_time );
}

/* Open the file for averaged data */

File1 = get_file( "", "*.avg", "", "", "avg" );

/* Create the toolbox with two output field, one for the current scan number
   and one for the current field as well as a push button for stopping the
   experiment at the end of a scan */

hide_toolbox( "ON" );
B1 = output_create( "INT_OUTPUT", "Current scan" );
B2 = output_create( "FLOAT_OUTPUT", "Current field [G]", "%.3f" );
B3 = output_create( "FLOAT_OUTPUT", "Current temperature [K]", "%.1f" );
B4 = button_create( "PUSH_BUTTON", "Stop after end of scan" );
hide_toolbox( "OFF" );


FOREVER {
    J += 1;
    output_value( B1, J );                // Update the scan count display

    FOR I = 1 : N_Points {
        output_value( B2, field );
        output_value( B3, temp_contr_temperature( ) );
        wait( 1.1 * repeat_time * N_Avg );

=== if ( START_FIELD <= END_FIELD )
        data[ J, I ] = - daq_get_voltage( CH0 );
        display_1d( I, data[ J, I ], 1,
                    I, ( ( J - 1 ) * avg[ I ] + data[ J, I ] ) / J, 2 );
=== else
        data[ J, N_Points - I + 1 ] = - daq_get_voltage( CH0 );
        display_1d( N_Points - I + 1, data[ J, N_Points - I + 1 ], 1,
                    N_Points - I + 1,
                    ( ( J - 1 ) * avg[ N_Points - I + 1 ]
                      + data[ J, N_Points - I + 1 ] ) / J, 2 );
=== endif

=== if ( START_FIELD <= END_FIELD )
        IF I < N_Points {
=== else
        IF I > 1 {
=== endif
            field += field_step;
            set_field( field );
        }
    }

    avg = add_to_average( avg, data[ J ], J );

    IF button_state( B4 ) {               // Stop on user request
        BREAK;
    }

    field = set_field( start_field );

    IF wait_time > 1 us {
        wait( wait_time );
    }
}

ON_STOP:

IF I != 0 {
    IF J == 1 {
=== if ( START_FIELD <= END_FIELD )
        FOR K = 1 : I - 1 {
            fsave( File1, "#,#\n", start_field + ( K - 1 ) * field_step,
                   data[ 1, K ] );
=== else
        FOR K = N_Points - I + 2 : N_Points {
            fsave( File1, "#,#\n", end_field - ( K - 1 ) * field_step,
                   data[ 1, K ] );
=== endif
        }
        fsave( File1, "\n" );
    } ELSE {
        IF I <= N_Points {
            J -= 1;
        }

        IF J > 1 {
            File2 = clone_file( File1, "avg", "scans" );
            FOR I = 1 : N_Points {

=== if ( START_FIELD <= END_FIELD )
                fsave( File2, "#", start_field + ( I - 1 ) * field_step );
=== else
                fsave( File2, "#", end_field - ( I - 1 ) * field_step );
=== endif

                FOR K = 1 : J {
                    fsave( File2, ",#", data[ K, I ] );
                }
                fsave( File2, "\n" );
            }
            fsave( File2, "\n" );
        }

        FOR I = 1 : N_Points {
=== if ( START_FIELD <= END_FIELD )
            fsave( File1, "#,#\n", start_field + ( I - 1 ) * field_step,
                   avg[ I ] );
=== else
            fsave( File1, "#,#\n", end_field - ( I - 1 ) * field_step,
                   avg[ I ] );
=== endif
        }
        fsave( File1, "\n" );
    }

    fsave( File1,
           "% Date:                   # #\n"
           "% Script:                 2_pulse_epr (J-band, Leiden)\n"
           "% Start field:            # G\n"
           "% End field:              # G\n"
           "% Field step:             # G\n"
           "% Repetition time:        # ms\n"
           "% Length of 1st MW pulse: # ns\n"
           "% Length of 2nd MW pulse: # ns\n"
           "% Pulse distance:         # ns\n"
           "% Number of averages:     >= #\n"
           "% Number of scans:        #\n"
           "% ADC gain:               4\n"
           "% Temperature at start:   # K\n"
           "% Temperature at end:     # K\n",
           date( ), time( ), start_field, field, field_step,
           repeat_time / 1 ms, int( P1.LENGTH / 1 ns ),
           int( P2.LENGTH / 1 ns ), int( p1_to_p2_dist / 1 ns ), N_Avg, J,
           start_temp, temp_contr_temperature( ) );

    save_comment( File1, "% " );

    IF J > 1 {
        fsave( File2,
               "% Date:                   # #\n"
               "% Script:                 2_pulse_epr (J-band, Leiden)\n"
               "% Start field:            # G\n"
               "% End field:              # G\n"
               "% Field step:             # G\n"
               "% Repetition time:        # ms\n"
               "% Length of 1st MW pulse: # ns\n"
               "% Length of 2nd MW pulse: # ns\n"
               "% Pulse distance:         # ns\n"
               "% Number of averages:     >= #\n"
               "% Number of scans:        #\n"
               "% ADC gain:               4\n"
               "% Temperature at start:   # K\n"
               "% Temperature at end:     # K\n",
               date( ), time( ), start_field, field, field_step,
               repeat_time / 1 ms, int( P1.LENGTH / 1 ns ),
               int( P2.LENGTH / 1 ns ), int( p1_to_p2_dist / 1 ns ), N_Avg,
               J, start_temp, temp_contr_temperature( ) );
    }
}
