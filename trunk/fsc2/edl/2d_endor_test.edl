/*
	Test EDL program for time-resolved ENDOR on transient radicals
*/
	

VARIABLES:

start_freq  =   8 MHz;
end_freq    =  22 MHz;
step_freq   = 250 kHz;

attenuation = -5 db;

N_runs      =  5;            // how many times to repeat the whole experiment
N_averages  = 16;            // number of averages per frequency

N_max_base_curves = 10;      // how many curve to use for baseline correction

/***********************************************/
/* Nothing needs to be changed below this line */
/***********************************************/

freq = start_freq;

N_steps = round( ( end_freq - start_freq ) / step_freq ) + 1;

curve[ 500 ];
mean_curve[ N_steps, * ];
base_curve[ * ];
Pretrigger;
ground = 0.0;
mean_ground[ N_steps ];

Rec_len;                         // number of points of trace
trig_pos;                        // position od trigger in data set (range 0-1)
time_base;                       // time base of digitizer (in s)
time_res;                        // digitizer time resolution (in ns)

min_time, max_time;              // first / last point (in ns)
start_time, end_time;            // intergation window start / end pos. (in ns)
new_start_time, new_end_time;    // new values od sliders (in ns)
Start_pos, End_pos, Width;
N_base_curves;
integ, base_int;
integral[ 2 ];

F1, F2, F3;
I, J, K;
S1, S2;
B1, B2;

End_index;
M;
Is_stored = 0;


PREPARATIONS:

init_2d( 3, 0, N_steps, 0, 0, start_freq * 1.0e-6, step_freq * 1.0e-6,
		 "Time / us", "Radio frequency / MHz", "Signal / mV" );


EXPERIMENT:

Rec_len = 500;
trig_pos = 0.1;
time_base = 100 ns;

time_res  = time_base * 1.0e9 / 50.0;

min_time = - trig_pos * Rec_len * time_res;
max_time   = min_time + Rec_len * time_res;

Pretrigger = int( 0.9 * trig_pos * Rec_len );
change_scale( min_time * 1.0e-3, time_res * 1.0e-3);

mean_curve[ 1 ] = float_slice( Rec_len );
base_curve = float_slice( Rec_len );

/* Get a file for storing all data and write experiments parameter */

F1 = get_file( "File for storing complete data sets:" );
F2 = get_file( "File for storing averaged data sets:" );
IF is_file( F2 ) {
	fsave( F2, "% Start frequency  = # MHz\n", start_freq * 1.0e-6 );
	fsave( F2, "% End frequency    = # MHz\n", end_freq * 1.0e-6 );
	fsave( F2, "% Step frequency   = # kHz\n", step_freq * 1.0e-3 );
	fsave( F2, "% Attenuation      = # dB\n", attenuation );
	fsave( F2, "% Record length    = #\n", Rec_len );
	fsave( F2, "% Trigger position = #\n", int( trig_pos * Rec_len ) );
	fsave( F2, "% Time base        = # ns\n", time_base * 1.0e-9 );
	save_comment( F2, "% ", "Sample: \nMicrowave frequency: \n"
				  "Microwave power: \nTemperature: \n" );
}

/* Create the sliders for setting the integration window limits */

start_time = 0.0;
S1 = slider_create( "VALUE_SLIDER", min_time, max_time,
	                "Integration window border 1 (ns)" );
slider_value( S1, start_time );
Start_pos = int( Rec_len * trig_pos );

S2 = slider_create( "VALUE_SLIDER", min_time, max_time,
		            "Integration window border 2 (ns)" );
end_time = 50.0 * time_res;
slider_value( S2, end_time );
Width = 51;


FOR J = 1 : N_runs
{
    print( "Starting #. run of #\n", J, N_runs );

	/* Set the synthesizer to the start frequency and start an acquisition */

	freq = start_freq;

    FOR I = 1 : N_steps
	{
		Is_stored = 0;

		/* Get next curve from the digitizer */

		wait( 0.5 s );
		FOR M = 1 : Rec_len
		{
			IF M < Rec_len / 10
			{
				curve[ M ] = 2.5e-9 * random();
			}
			ELSE
			{
				curve[ M ] =
					  1.0e-9 * exp( - ( 0.1 * ( I - N_steps / 2 ) )^2
						            - 0.005 * ( M - Rec_len / 10 ) )
                    + 2.5e-9 * random( ) + 5.0e-9;
			}
		}
		curve += 2.0e-9 * random( );

		/* If this wasn't the very last curve of the run set the new frequency
		   and already start the next masurement, so we're not loosing time 
		   doing all the graphics */

		IF I != N_steps
		{
	        freq += step_freq;
		}

		/* Save the new date to file */

		IF is_file( F1 )
		{
			fsave( F1, "% #.run, frequency = # MHz\n\n", J, freq * 1.0e-6 );
			save( F1, curve );
		}

		/* Add the new curve to the results from previous runs */

		mean_curve[ I ] = ( ( J - 1 ) * mean_curve[ I ] + curve ) / J;
		Is_stored = 1;

		/* Calculate the mean of the data before the trigger used to get rid
		   of changes of the 'zero level' */

		IF Pretrigger != 0
		{
	    	ground = mean( curve, 1, Pretrigger );
			mean_ground[ I ] = ( ( J - 1 ) * mean_ground[ I ] + ground ) / J;
		}

		/* At the start of a run add up curves to be used as baseline */

		IF I <= N_max_base_curves
		{
			N_base_curves = ( J - 1 ) * N_max_base_curves + I;
	    	base_curve = ( 1.0 - 1.0 / N_base_curves ) * base_curve
	    	             + ( curve - ground ) / N_base_curves;
		}

		/* Calculate the values of the integration window (now using 'curve'
		   as temporary storage for the baseline corrected curve) */

		curve = 1.0e3 * ( mean_curve[ I ] - base_curve - mean_ground[ I ] );
		integral[ 1 ] = 1.0e3 * mean( mean_curve[ I ], Start_pos, Width );
		integral[ 2 ] = mean( curve, Start_pos, Width );

		/* Display the new data */

		display( 1, I, 1.0e3 * mean_curve[ I ], 1,
				 1, I, curve, 2,
				 1, I, integral[ 1 ], 3,
				 2, I, integral[ 2 ], 3 );

		/* Finally check for new positions of the integration window sliders */

		new_start_time = slider_value( S1 );
		new_end_time   = slider_value( S2 );
		IF start_time != new_start_time | end_time != new_end_time
		{
			start_time = new_start_time;
			end_time   = new_end_time;

			Start_pos = round( ( start_time - min_time ) / time_res ) + 1;
			End_pos   = round( ( end_time - min_time ) / time_res ) + 1;
			Width = abs( End_pos - Start_pos ) + 1;

			IF Width > Rec_len - Start_pos + 1
			{
				Width = Rec_len - Start_pos + 1 ;
			}

			IF Start_pos > End_pos
			{
				Start_pos = End_pos;
			}

			IF J == 1
			{
				End_index = I;
			}
			ELSE
			{
				End_index = N_steps;
			}

			base_int = 1.0e3 * mean( base_curve, Start_pos, Width );
			FOR K = 1 : End_index
			{
				integral[ 1 ] = 1.0e3 * mean( mean_curve[ K ],
											  Start_pos, Width );
				integral[ 2 ] = integral[ 1 ] - base_int
								- 1.0e3 * mean_ground[ K ];
				display( 1, K, integral[ 1 ], 3,
				 		 2, K, integral[ 2 ], 3 );
			}
		}
	}
}

ON_STOP:

/* Save the averaged data if a file has been selected */

IF ! Is_stored            // Check if data of last trace were stored
{
	I -= 1;
	freq = start_freq + I * step_freq;
}

IF is_file( F2 )
{
	IF J < N_runs
	{
		fsave( F2, "% Number of runs: #\n", J );
	}
	ELSE
	{
		fsave( F2, "% Number of runs: #\n", N_runs );
	}

	IF I < N_steps
	{
		fsave( F2, "% Last run not finished, end frequency was # MHz\n",
 			   freq * 1.0e-6 );
	}
	save_program( F2, "% " );

	IF J == 1 & I < N_steps
	{
		End_index = I;
	}
	ELSE
	{
		End_index = N_steps;
	}

	freq = start_freq;
	FOR I = 1 : End_index
	{
		fsave( F2, "\n% Frequency: # MHz\n\n", freq * 1.0e-6 );
		freq += step_freq;
		save( F2, mean_curve[ I ] );
	}
}

/* Create two buttons for saving integrals and stopping */

B1 = button_create( "NORMAL_BUTTON", "Save" );
B2 = button_create( "NORMAL_BUTTON", "Done" );

FOREVER
{
	IF button_state( B2 )           // check Done button
	{
		BREAK;
	}

	IF button_state( B1 )           // check Save button
	{
		F3 = get_file( "File for storing integrated region:" );		
		IF is_file( F3 ) {
			IF start_time < end_time
			{
				fsave( F3, "% Integration window from # ns to # ns\n"
						   "% (times relative to trigger)\n\n"
						   "% Integral over raw data\n\n",
					   start_time, end_time );
			}
			ELSE
			{
				fsave( F3, "% Integration window from # ns to # ns\n"
						   "% (times relative to trigger)\n"
						   "% Integrals over raw data:\n\n",
					   end_time, start_time );
			}

			IF J == 1 & I < N_steps
			{
				End_index = I;
			}
			ELSE
			{
				End_index = N_steps;
			}

			base_int = mean( base_curve, Start_pos, Width );
			FOR K = 1 : End_index
			{
				fsave( F3, "#\n", mean( mean_curve[ K ], Start_pos, Width ) );
			}
			fsave( F3, "\n% Integrals over preprocessed data:\n\n" );
			FOR K = 1 : End_index
			{
				fsave( F3, "#\n", mean( mean_curve[ K ], Start_pos, Width )
								  - base_int - mean_ground[ K ] );
			}
		}

		NEXT;
	}

	/* Get new positions of sliders - if nothing changed wait for a moment
	   and go back to start of loop */

	new_start_time = slider_value( S1 );
	new_end_time   = slider_value( S2 );
	IF start_time == new_start_time & end_time == new_end_time
	{
		wait( 0.2 s );
		NEXT;
	}

	start_time = new_start_time;
	end_time   = new_end_time;

	/* Calculate new indices of integration windows and calculate and display
	   the integrals */

	Start_pos = round( ( start_time - min_time ) / time_res ) + 1;
	End_pos   = round( ( end_time - min_time ) / time_res ) + 1;
	Width = abs( End_pos - Start_pos ) + 1;

	IF Width > Rec_len - Start_pos + 1
	{
		Width = Rec_len - Start_pos + 1;
	}

	IF Start_pos > End_pos
	{
		Start_pos = End_pos;
	}

	IF ( J == 1 )
	{
		End_index = I;
	}
	ELSE
	{
		End_index = N_steps;
	}

	base_int = 1.0e3 * mean( base_curve, Start_pos, Width );
	FOR K = 1 : End_index
	{
		integral[ 1 ] = 1.0e3 * mean( mean_curve[ K ], Start_pos, Width );
		integral[ 2 ] = integral[ 1 ] - base_int - 1.0e3 * mean_ground[ K ];
		display( 1, K, integral[ 1 ], 3,
				 2, K, integral[ 2 ], 3 );
	}
}
