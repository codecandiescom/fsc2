/* -*-C-*-
 *  $Id$
 * 
 *  Copyright (C) 1999-2008 Jens Thoms Toerring
 * 
 *  This file is part of fsc2.
 * 
 *  Fsc2 is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 * 
 *  Fsc2 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with fsc2; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 59 Temple Place - Suite 330,
 *  Boston, MA 02111-1307, USA.
 */


#include "fsc2.h"
#include "gpib_if.h"
#include <sys/timeb.h>


/*----------------------------------------------------------------*
 * GPIB_LOG_FILE is the name of the default file to which logging
 * information about GPIB operations are written - the name can
 * changed by passing a different name to gpib_init().
 *----------------------------------------------------------------*/


#define SRQ      0x40    /* SRQ bit in device status register */
#define TIMEOUT  T10s    /* GPIB timeout period set at initialization */


#define ON  1
#define OFF 0


#define TEST_BUS_STATE                                               \
        if ( ! gpib_is_active )                                      \
        {                                                            \
            strcpy( gpib_error_msg, "GPIB bus not initialized.\n" ); \
            return FAILURE;                                          \
        }


/*------------------------------------------------------------------------*/
/* Exported variables                                                     */
/*------------------------------------------------------------------------*/


char gpib_error_msg[ 1024 ];            /* global for GPIB error messages */


/*------------------------------------------------------------------------*/
/* Local functions                                                        */
/*------------------------------------------------------------------------*/


static int   gpib_init_controller( void );
static void  gpib_init_log( const char * log_file_name );
static void  gpib_read_end( const char * dev_name,
                            char *       buffer,
                            long         received,
                            long         expected );
static void  gpib_log_date( void );
static void  gpib_log_error( const char * type );
static void  gpib_write_start( const char * dev_name,
                               const char * buffer,
                               long         length );
static void  gpib_log_function_start( const char * function,
                                      const char * dev_name );
static void  gpib_log_function_end( const char * function,
                                    const char * dev_name );
static char *gpib_get_dev_name( int device );
static int *get_fd_list( void );
static void close_on_exec_hack( int * fd_list );


/*------------------------------------------------------------------------*/
/* Local global variables                                                 */
/*------------------------------------------------------------------------*/


static int ll;                         /* log level                       */
static int gpib_is_active = 0;         /* flag, set after initialization
                                          of bus                          */
static int controller;                 /* device number assigned to
                                          controller                      */
static int timeout;                    /* stores actual timeout period    */
static FILE *gpib_log;                 /* file pointer of GPIB log file   */
static GPIB_Dev_T *gpib_dev_list = NULL; /* list of symbolic names of
                                            devices etc.                  */


/*-------------------------------------------------------------------------*
 * gpib_init() initializes the GPIB bus by starting the logging mechanism
 * and determining the device descriptor of the controller board.
 * *** This function has to be called before any other bus activity ! ***
 * Calling this function a second time without a prior call of
 * gpib_shutdown() will do nothing but still return successfully (the name
 * of the log file remains unchanged!).
 * In order to make opening the log file with write access work for all
 * users it should be created previously and be given the proper access
 * permissions, i.e. r and w for everyone.
 * ->
 *  * Pointer to the name of log file - if the pointer is NULL or does not
 *    point to a non-empty string stderr is used.
 *  * log level, either LL_NONE, LL_ERR, LL_CE or LL_ALL
 *    (if log level is LL_NONE 'log_file_name' is not used at all)
 * <-
 *  * SUCCESS: bus is initialized
 *  * FAILURE: error, GPIB bus can't be used
 *-------------------------------------------------------------------------*/

int
gpib_init( const char * log_file_name,
           int          log_level )
{
    GPIB_Dev_T *cur_dev;


    if ( gpib_is_active )
        return SUCCESS;

    ll = log_level;
    if ( ll < LL_NONE )
        ll = LL_NONE;
    if ( ll > LL_ALL )
        ll = LL_ALL;

    gpib_init_log( log_file_name );             /* initialize logging */

    if ( gpib_init_controller( ) != SUCCESS )   /* initialize the controller */
    {
        strcpy( gpib_error_msg, "Initialization of controller failed!" );

        if ( ll > LL_NONE )
        {
            raise_permissions( );
            gpib_log_date( );
            fprintf( gpib_log, "Initialization of controller failed.\n\n" );
            if ( gpib_log != stderr )
                fclose( gpib_log );                 /* close log file */
            lower_permissions( );
        }

        /* Get rid of the device list if it has already been created */

        if ( gpib_dev_list != NULL )
        {
            for ( cur_dev = gpib_dev_list; cur_dev->next != NULL;
                  cur_dev = cur_dev->next )
                /* empty */ ;

            while ( 1 )
            {
                T_free( cur_dev->name );
                if ( cur_dev->prev != NULL )
                {
                    cur_dev = cur_dev->prev;
                    T_free( cur_dev->next );
                }
                else
                    break;
            }
        }

        return FAILURE;
    }

    gpib_is_active = 1;
    gpib_timeout( controller, TIMEOUT );
    return SUCCESS;
}


/*-------------------------------------------------------------*
 * gpib_init_controller() initializes the controller by first
 * getting the device/board descriptor, testing, if this is
 * really the controller and finally "switching on" the board,
 * clearing the interface and asserting the REN line.
 * <-
 *  * SUCCESS: OK, FAILURE: error
 *-------------------------------------------------------------*/

static int
gpib_init_controller( void )
{
    int *fd_list;


    raise_permissions( );

    fd_list = get_fd_list( );

    if ( gpib_init_device( GPIB_CARD_NAME, &controller ) != SUCCESS )
    {
        if ( fd_list )
            T_free( fd_list );
        lower_permissions( );
        return FAILURE;
    }

    close_on_exec_hack( fd_list );

    return SUCCESS;
}


/*--------------------------------------------------------*
 * gpib_shutdown() shuts down the GPIB bus by setting all
 * devices into the local state and closing the log file.
 * <-
 *    SUCCESS: bus is shut down,
 *    FAILURE: bus is already inactive
 *--------------------------------------------------------*/

int
gpib_shutdown( void )
{
    GPIB_Dev_T *cur_dev;


    TEST_BUS_STATE;

    for ( cur_dev = gpib_dev_list; cur_dev->next != NULL;
          cur_dev = cur_dev->next )
        /* empty */ ;

    while ( 1 )
    {
        T_free( cur_dev->name );
        if ( cur_dev->prev != NULL )
        {
            cur_dev = cur_dev->prev;
            T_free( cur_dev->next );
        }
        else
            break;
    }

    T_free( cur_dev );
    gpib_dev_list = NULL;

    if ( ll > LL_NONE )
    {
        raise_permissions( );
        gpib_log_date( );
        fprintf( gpib_log, "GPIB bus is being shut down.\n\n" );
        if ( gpib_log != stderr )
            fclose( gpib_log );                 /* close log file */
        lower_permissions( );
    }

    gpib_is_active = 0;
    return SUCCESS;
}


/*-------------------------------------------------------------------------*
 * gpib_init_log() initializes the logging mechanism. If the logging level
 * is not LL_NONE, a log file will be opened. The name to be used for the
 * log file can be passed to the function, see below. If the file cannot
 * be opened 'sterr' is used instead. If the log file did not exist its
 * permissions are set to allow read and write access for everyone.
 * ->
 *  * Pointer to the name of log file - if the pointer is NULL or does not
 *    point to a non-empty string stderr is used.
 *-------------------------------------------------------------------------*/

static void
gpib_init_log( const char * log_file_name )
{
    const char *name;


    if ( ll == LL_NONE )
        return;

    raise_permissions( );

    if ( log_file_name == NULL || *log_file_name == '\0' )
    {
        gpib_log = stderr;
        fprintf( stderr, "GPIB log file not specified, using stderr "
                 "instead\n" );
    }
    else
    {
        name = log_file_name;

        if ( ( gpib_log = fopen( name, "w" ) ) == NULL )     /* open fails ? */
        {
            gpib_log = stderr;
            fprintf( stderr, "Can't open log file %s, using stderr instead.\n",
                     name );
        }
        else
            chmod( name, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH );
    }

    gpib_log_date( );

    fprintf( gpib_log, "GPIB bus is being initialized.\n" );
    fflush( gpib_log );
    lower_permissions( );
}


/*-----------------------------------------------------------------------*
 * gpib_init_device() initializes a device.
 * Function has to be called before any other operations on the device !
 * ->
 *  * Symbolic name of the device (string, has to be identical to the
 *    corresponding entry in GPIB_CONF_FILE)
 *  * pointer for returning assigned device number
 * <-
 *  * SUCCESS: OK, assigned device number is returned in 'dev'
 *  * FAILURE: error, no valid data is returned in 'dev'
 *-----------------------------------------------------------------------*/

int
gpib_init_device( const char * device_name,
                  int *        dev )
{
    GPIB_Dev_T *cur_dev;


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.mode  == EXPERIMENT );

    if ( ! gpib_is_active && strcmp( device_name, GPIB_CARD_NAME ) )
    {
        strcpy( gpib_error_msg, "GPIB bus not initialized yet.\n" );
        return FAILURE;
    }

    /* Append a new entry to the device list */

    if ( gpib_dev_list == NULL )
    {
        gpib_dev_list = cur_dev = T_malloc( sizeof *cur_dev );
        cur_dev->prev = NULL;
    }
    else
    {
        for ( cur_dev = gpib_dev_list; cur_dev->next != NULL;
              cur_dev = cur_dev->next )
            /* empty */ ;

        cur_dev->next = T_malloc( sizeof *cur_dev->next );
        cur_dev->next->prev = cur_dev;
        cur_dev = cur_dev->next;
    }

    cur_dev->name = T_strdup( device_name );
    cur_dev->next = NULL;

    if ( ll > LL_ERR )
        gpib_log_function_start( "gpib_init_device", device_name );

    raise_permissions( );
    cur_dev->number = ibfind( ( char * ) device_name );
    lower_permissions( );

    if ( cur_dev->number == -1 )
    {
        T_free( cur_dev->name );
        if ( cur_dev->prev != NULL )
            cur_dev->prev->next = NULL;
        else
            gpib_dev_list = NULL;
        T_free( cur_dev );
        sprintf( gpib_error_msg, "Can't initialize device %s, not found in "
                 "GPIB configuration file", device_name );

        return FAILURE;
    }

    if ( ll > LL_NONE )
        gpib_log_function_end( "gpib_init_device", device_name );

    *dev = cur_dev->number;
    return SUCCESS;
}


/*-----------------------------------------------------------*
 *-----------------------------------------------------------*/

int
gpib_local( int device )
{
    char *dev_name;


    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    if ( ( dev_name = gpib_get_dev_name( device ) ) == NULL )
    {
        sprintf( gpib_error_msg, "CALL of gpib_local for unknown device "
                 "(device number %d)\n", device );
        return FAILURE;
    }

    if ( ll > LL_NONE )
        gpib_log_function_start( "gpib_local", dev_name );

    raise_permissions( );
    ibloc( device );
    lower_permissions( );

    if ( ibsta & IBERR )
    {
        sprintf( gpib_error_msg, "Can't bring device %s into local mode, "
                 "ibsta = 0x%x.", dev_name, ibsta );
        return FAILURE;
    }

    if ( ll > LL_NONE )
        gpib_log_function_end( "gpib_local", dev_name );

    return SUCCESS;
}


/*-----------------------------------------------------------*
 *-----------------------------------------------------------*/

int
gpib_local_lockout( int device  UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return SUCCESS;
}


/*-----------------------------------------------------------*
 * gpib_timeout() sets the period the controller is supposed
 * to wait for a reaction from a device before timing out.
 * ->
 *  * timeout period (cmp. definitions of TNONE to T1000s)
 * <-
 *  * SUCCESS: OK, FAILURE: error
 *-----------------------------------------------------------*/

int
gpib_timeout( int device,
              int period )
{
    char *dev_name;
    sigset_t new_mask, old_mask;
    const char tc[ ][ 9 ] = { "infinity", "10us", "30us", "100us",
                              "300us", "1ms", "3ms", "10ms", "30ms",
                              "100ms", "300ms", "1s", "3s", "10s",
                              "30s", "100s", "300s", "1000s" };


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    TEST_BUS_STATE;              /* bus not initialized yet ? */

    if ( ( dev_name = gpib_get_dev_name( device ) ) == NULL )
    {
        sprintf( gpib_error_msg, "CALL of gpib_timeout for unknown device "
                 "(device number %d)\n", device );
        return FAILURE;
    }

    if ( period < TNONE )        /* check validity of parameter */
        period = TNONE;
    if ( period > T1000s )
        period = T1000s;

    if ( ll > LL_ERR )
    {
        raise_permissions( );
        gpib_log_date( );
        fprintf( gpib_log, "CALL of gpib_timeout for device %s, ", dev_name );
        fprintf( gpib_log, "-> timeout is set to %s\n", tc[ period ] );
        fflush( gpib_log );
        lower_permissions( );
    }

    raise_permissions( );
    sigaddset( &new_mask, DO_QUIT );
    sigprocmask( SIG_BLOCK, &new_mask, &old_mask );
    ibtmo( device, period );
    sigprocmask( SIG_SETMASK, &old_mask, NULL );
    lower_permissions( );

    if ( ibsta & IBERR )
    {
        sprintf( gpib_error_msg, "Can't set timeout period for device %s, "
                 "ibsta = 0x%x.", dev_name, ibsta );
        return FAILURE;
    }

    if ( ll > LL_ERR )
    {
        raise_permissions( );
        gpib_log_date( );
        fprintf( gpib_log, "EXIT of gpib_timeout\n" );
        fflush( gpib_log );
        lower_permissions( );
    }

    timeout = period;          /* store actual value of timeout period */

    return SUCCESS;
}


/*------------------------------------------------*
 * gpib_clear() clears a device by sending it the
 * Selected Device Clear (SDC) message.
 * ->
 *  * number of device to be cleared
 * <-
 *  * SUCCESS: OK, FAILURE: error
 *------------------------------------------------*/

int
gpib_clear_device( int device )
{
    char *dev_name;
    sigset_t new_mask, old_mask;


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    TEST_BUS_STATE;              /* bus not initialized yet ? */

    if ( ( dev_name = gpib_get_dev_name( device ) ) == NULL )
    {
        sprintf( gpib_error_msg, "CALL of gpib_clear_device for unknown "
                 "device (device number %d)\n", device );
        return FAILURE;
    }

    if ( ll > LL_ERR )
        gpib_log_function_start( "gpib_clear_device", dev_name );

    raise_permissions( );
    sigaddset( &new_mask, DO_QUIT );
    sigprocmask( SIG_BLOCK, &new_mask, &old_mask );
    ibclr( device );
    sigprocmask( SIG_SETMASK, &old_mask, NULL );
    lower_permissions( );

    if ( ll > LL_NONE )
        gpib_log_function_end( "gpib_clear_device", dev_name );

    if ( ibsta & IBERR )
    {
        sprintf( gpib_error_msg, "Can't clear device %s, ibsta = 0x%x",
                 dev_name, ibsta );
        return FAILURE;
    }

    return SUCCESS;
}


/*------------------------------------------------*
 * gpib_trigger() triggers a device by sending it
 * a Device Trigger Command.
 * ->
 *  * number of device to be triggered
 * <-
 *  * SUCCESS: OK, FAILURE: error
 *------------------------------------------------*/

int
gpib_trigger( int device )
{
    char *dev_name;
    sigset_t new_mask, old_mask;


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    TEST_BUS_STATE;              /* bus not initialized yet ? */

    if ( ( dev_name = gpib_get_dev_name( device ) ) == NULL )
    {
        sprintf( gpib_error_msg, "CALL of gpib_trigger for unknown device "
                 "(device number %d)\n", device );
        return FAILURE;
    }

    if ( ll > LL_ERR )
        gpib_log_function_start( "gpib_trigger", dev_name );

    raise_permissions( );
    sigaddset( &new_mask, DO_QUIT );
    sigprocmask( SIG_BLOCK, &new_mask, &old_mask );
    ibtrg( device );
    sigprocmask( SIG_SETMASK, &old_mask, NULL );
    lower_permissions( );

    if ( ll > LL_NONE )
        gpib_log_function_end( "gpib_trigger", dev_name );

    if ( ibsta & IBERR )
    {
        sprintf( gpib_error_msg, "Can't trigger device %s, ibsta = 0x%x",
                 dev_name, ibsta );
        return FAILURE;
    }

    return SUCCESS;
}


/*-----------------------------------------------------------------*
 * gpib_wait() monitors the events specified by 'mask' from a
 * device and delays processing until at least one of the events
 * occur. If 'mask' is zero, gpib_wait() returns immediately.
 * Valid events to be waited for are TIMO, END, RQS and CMPL.
 *
 * Since the function ibwait() returns after the timeout period
 * even when the TIMO bit is not set in 'mask' and flags an EBUS
 * error (14) the timeout period is set to TNONE before ibwait()
 * is called and reset to the old value on return.
 *
 * ->
 *  * number of device that should produce the event
 *  * mask specifying the events (TIMO, END, RQS and CMPL)
 *  * pointer to return state (or NULL)
 * <-
 *  * SUCCESS: OK, FAILURE: error
 *-----------------------------------------------------------------*/

int
gpib_wait( int   device,
           int   mask,
           int * status )
{
    int old_timeout = timeout;
    char *dev_name;
    sigset_t new_mask, old_mask;


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    TEST_BUS_STATE;              /* bus not initialized yet ? */

    if ( ( dev_name = gpib_get_dev_name( device ) ) == NULL )
    {
        sprintf( gpib_error_msg, "CALL of gpib_wait for unknown device "
                 "(device number %d)\n", device );
        return FAILURE;
    }

    if ( ll > LL_ERR )
    {
        gpib_log_function_start( "gpib_wait", dev_name );
        raise_permissions( );
        fprintf( gpib_log, "wait mask = 0x0%X\n", mask );
        if ( mask & ~( TIMO | END | RQS | CMPL ) )
            fprintf( gpib_log, "=> Setting mask to 0x%X <=\n",
                     mask & ( TIMO | END | RQS | CMPL ) );
        fflush( gpib_log );
        lower_permissions( );
    }

    mask &= TIMO | END | RQS | CMPL;    /* remove invalid bits */

    if ( ! ( mask & TIMO ) && timeout != TNONE )
        gpib_timeout( device, TNONE );

    raise_permissions( );
    sigaddset( &new_mask, DO_QUIT );
    sigprocmask( SIG_BLOCK, &new_mask, &old_mask );
    ibwait( device, mask );
    sigprocmask( SIG_SETMASK, &old_mask, NULL );
    lower_permissions( );

    if ( status != NULL )
        *status = ibsta;

    if ( ll > LL_ERR )
        fprintf( gpib_log, "wait return status = 0x0%X\n", ibsta );

    if ( ! ( mask & TIMO ) && old_timeout != TNONE )
        gpib_timeout( device, old_timeout );

    if ( ll > LL_NONE )
        gpib_log_function_end( "gpib_wait", dev_name );

    if ( ibsta & IBERR )
    {
        sprintf( gpib_error_msg, "Can't wait for device %s, ibsta = 0x%x",
                 dev_name, ibsta );
        return FAILURE;
    }

    return SUCCESS;
}


/*---------------------------------------------------*
 * gpib_write() sends a number of bytes to a device.
 * ->
 *  * number of device the data are to be sent to
 *  * buffer containing the bytes to be sent
 *  * number of bytes to be sent
 * <-
 *  * SUCCESS: OK, FAILURE: write error
 *---------------------------------------------------*/

int
gpib_write( int          device,
            const char * buffer,
            long         length )
{
    char     * dev_name;
    char     * buf;
    sigset_t   new_mask, old_mask;


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    TEST_BUS_STATE;              /* bus not initialized yet ? */

    if ( ( dev_name = gpib_get_dev_name( device ) ) == NULL )
    {
        sprintf( gpib_error_msg, "CALL of gpib_write for unknown device "
                 "(device number %d)\n", device );
        return FAILURE;
    }

    if ( length <= 0 )           /* check validity of length parameter */
    {
        if ( ll != LL_NONE )
        {
            raise_permissions( );
            gpib_log_date( );
            fprintf( gpib_log, "ERROR in in call of gpib_write: "
                               "Invalid parameter: %ld bytes.\n", length );
            fflush( gpib_log );
            lower_permissions( );
        }

        sprintf( gpib_error_msg, "Can't write %ld bytes.", length );
        return FAILURE;
    }

    buf = T_malloc( length + 1 );
    strncpy( buf, buffer, length );
    buf[ length ] = '\0';

    if ( ll > LL_ERR )
        gpib_write_start( dev_name, buf, length );

    raise_permissions( );
    sigaddset( &new_mask, DO_QUIT );
    sigprocmask( SIG_BLOCK, &new_mask, &old_mask );
    ibwrt( device, buf, length );
    sigprocmask( SIG_SETMASK, &old_mask, NULL );
    lower_permissions( );

    T_free( buf );

    if ( ll > LL_NONE )
        gpib_log_function_end( "gpib_write", dev_name );

    if ( ibsta & IBERR )
    {
        sprintf( gpib_error_msg, "Can't send data to device %s, ibsta = 0x%x",
                 dev_name, ibsta );
        return FAILURE;
    }

    return SUCCESS;
}


/*----------------------------------------------------------------*
 * gpib_write_start() logs the call to the function gpib_write().
 * ->
 *  * name of device the data are to be sent to
 *  * buffer containing the bytes to be sent
 *  * number of bytes to be sent
 *----------------------------------------------------------------*/

static void
gpib_write_start( const char * dev_name, 
                  const char * buffer,
                  long         length )
{
    raise_permissions( );

    gpib_log_function_start( "gpib_write", dev_name );
    fprintf( gpib_log, "-> There are %ld bytes to be sent\n", length );

    if ( ll == LL_ALL )
    {
        size_t c;

        c = fwrite( buffer, sizeof *buffer, length, gpib_log );
        fputc( ( int) '\n', gpib_log );
    }
    fflush( gpib_log );

    lower_permissions( );
}


/*----------------------------------------------------------*
 * gpib_read() reads a number of bytes from a device.
 * ->
 *  * number of device the data are to be received from
 *  * buffer for storing the data
 *  * pointer to maximum number of bytes to be read
 * <-
 *  * SUCCESS: OK, data are stored in 'buffer' and 'length'
 *             is set to the number of bytes received
 *  * FAILURE: read error
 *----------------------------------------------------------*/

int
gpib_read( int    device,
           char * buffer,
           long * length )
{
    long       expected = *length;
    char     * dev_name;
    sigset_t   new_mask, old_mask;


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    TEST_BUS_STATE;              /* bus not initialized yet ? */

    if ( ( dev_name = gpib_get_dev_name( device ) ) == NULL )
    {
        sprintf( gpib_error_msg, "CALL of gpib_read for unknown device "
                 "(device number %d)\n", device );
        return FAILURE;
    }

    if ( *length <= 0 )          /* check validity of length parameter */
    {
        if ( ll != LL_NONE )
        {
            raise_permissions( );
            gpib_log_date( );
            fprintf( gpib_log, "ERROR in call of gpib_read: "
                               "Invalid parameter: %ld bytes\n", *length );
            fflush( gpib_log );
            lower_permissions( );
        }

        sprintf( gpib_error_msg, "Can't read %ld bytes.", *length );
        return FAILURE;
    }

    if ( ll > LL_ERR )
    {
        raise_permissions( );
        gpib_log_function_start( "gpib_read", dev_name );
        fprintf( gpib_log, "-> Expecting up to %ld bytes\n", *length );
        fflush( gpib_log );
        lower_permissions( );
    }

    raise_permissions( );
    sigaddset( &new_mask, DO_QUIT );
    sigprocmask( SIG_BLOCK, &new_mask, &old_mask );
    ibrd( device, buffer, expected );
    sigprocmask( SIG_SETMASK, &old_mask, NULL );
    lower_permissions( );
    *length = ibcnt;

    if ( ll > LL_NONE )
        gpib_read_end( dev_name, buffer, *length, expected );

    if ( ibsta & IBERR )
    {
        sprintf( gpib_error_msg, "Can't read data from device %s, ibsta = "
                 "0x%x.", dev_name, ibsta );
        return FAILURE;
    }

    return SUCCESS;
}


/*------------------------------------------------------------------*
 * gpib_read_end() logs the completion of the function gpib_read().
 * ->
 *  * name of device the data were received from
 *  * buffer for storing the data
 *  * maximum number of data to read
 *  * number of bytes actually read
 *------------------------------------------------------------------*/

static void
gpib_read_end( const char * dev_name,
               char *       buffer,
               long         received,
               long         expected )
{
    if ( ll > LL_ERR || ( ibsta & IBERR ) )
        gpib_log_function_end( "gpib_read", dev_name );

    if ( ll < LL_CE )
        return;

    raise_permissions( );

    fprintf( gpib_log, "-> Received %ld of up to %ld bytes\n",
             received, expected );

    if ( ll == LL_ALL )
    {
        size_t c;

        c = fwrite( buffer, sizeof *buffer, received, gpib_log );
        fputc( ( int ) '\n', gpib_log );
    }

    fflush( gpib_log );
    lower_permissions( );
}


/*------------------------------------------------------------------*
 *------------------------------------------------------------------*/

int
gpib_serial_poll( int             device,
                  unsigned char * stb )
{
    char     * dev_name;
    sigset_t   new_mask, old_mask;


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    TEST_BUS_STATE;              /* bus not initialized yet ? */

    if ( ( dev_name = gpib_get_dev_name( device ) ) == NULL )
    {
        sprintf( gpib_error_msg, "CALL of gpib_serial_poll for unknown device "
                 "(device number %d)\n", device );
        return FAILURE;
    }

    if ( ll > LL_ERR )
        gpib_log_function_start( "gpib_serial_poll", dev_name );

    raise_permissions( );
    sigaddset( &new_mask, DO_QUIT );
    sigprocmask( SIG_BLOCK, &new_mask, &old_mask );
    ibrsp( device, ( char * ) stb );
    sigprocmask( SIG_SETMASK, &old_mask, NULL );
    lower_permissions( );

    if ( ll > LL_NONE )
        gpib_log_function_end( "gpib_serial_poll", dev_name );

    if ( ibsta & ERR )
    {
        sprintf( gpib_error_msg, "Can't serial poll device %s, "
                 "gpib_status = 0x%x", dev_name, ibsta );
        return FAILURE;
    }

    if ( ll >= LL_CE )
    {
        raise_permissions( );
        fprintf( gpib_log, "-> Received status byte = 0x%x\n", *stb );
        fflush( gpib_log );
        lower_permissions( );
    }

    return SUCCESS;
}


/*--------------------------------------------------*
 * gpib_log_date() writes the date to the log file.
 *--------------------------------------------------*/

static void
gpib_log_date( void )
{
    char tc[ 26 ];
    struct timeb mt;
    time_t t;


    t = time( NULL );
    strcpy( tc, asctime( localtime( &t ) ) );
    tc[ 10 ] = '\0';
    tc[ 19 ] = '\0';
    tc[ 24 ] = '\0';
    ftime( &mt );
    fprintf( gpib_log, "[%s %s %s.%03d] ", tc, tc + 20, tc + 11, mt.millitm );
}


/*--------------------------------------------------------------*
 * gpib_log_error() writes an error message to the log file.
 * ->
 *  * string with short description of the type of the function
 *    the error happened in
 *--------------------------------------------------------------*/

static void
gpib_log_error( const char * type )
{
    int i;
    static int state[ 16 ] = { 0x8000, 0x4000, 0x2000, 0x1000,
                               0x0800, 0x0400, 0x0200, 0x0100,
                               0x0080, 0x0040, 0x0020, 0x0010,
                               0x0008, 0x0004, 0x0002, 0x0001 };
    static char is[ 16 ][ 6 ] = { "IBERR", "TIMO",  "END",   "SRQI",
                                  "RQS",   "SPOLL", "EVENT", "CMPL",
                                  "LOK",   "REM",   "CIC",   "ATN",
                                  "TACS",  "LACS",  "DTAS",  "DCAS" };
    static char ie[ 21 ][ 5 ] = { "EDVR", "ECIC", "ENOL", "EADR",
                                  "EARG", "ESAC", "EABO", "ENEB",
                                  "EDMA", "",     "EOIP", "ECAP",
                                  "EFSO", "",     "EBUS", "ESTB",
                                  "ESRQ" };


    gpib_log_date( );
    fprintf( gpib_log, "ERROR in function %s: <", type );
    for ( i = 15; i >= 0; i-- )
    {
        if ( ibsta & state[ 15 - i ] )
            fprintf( gpib_log, " %s", is[ 15 - i ] );
    }
    fprintf( gpib_log, " > -> %s\n", ie[ iberr ] );
    fflush( gpib_log );
}


/*------------------------------------------------------------*
 * gpib_log_function_start() logs the call of a GPIB function
 * by appending a short message to the log file.
 * ->
 *  * name of the function
 *  * name of the device involved
 *------------------------------------------------------------*/

static void
gpib_log_function_start( const char * function,
                         const char * dev_name )
{
    raise_permissions( );
    gpib_log_date( );
    fprintf( gpib_log, "CALL of %s, dev = %s\n", function, dev_name );
    fflush( gpib_log );
    lower_permissions( );
}


/*--------------------------------------------------------*
 * gpib_log_function_end() logs the completion of a GPIB
 * function by appending a short message to the log file.
 * ->
 *  * name of the function
 *  * name of the device involved
 *--------------------------------------------------------*/

static void
gpib_log_function_end( const char * function,
                       const char * dev_name )
{
    raise_permissions( );
    if ( ibsta & IBERR )
        gpib_log_error( function );
    else
    {
        if ( ll > LL_ERR )
        {
            gpib_log_date( );
            fprintf( gpib_log, "EXIT of %s, dev = %s\n", function, dev_name );
        }
    }

    fflush( gpib_log );
    lower_permissions( );
}


/*--------------------------------------------------------*
 *--------------------------------------------------------*/

static char *
gpib_get_dev_name( int device )
{
    GPIB_Dev_T *cur_dev = gpib_dev_list;


    while ( cur_dev != NULL && cur_dev->number != device )
        cur_dev = cur_dev->next;

    return cur_dev == NULL ? NULL : cur_dev->name;
}


/*--------------------------------------------------------*
 *--------------------------------------------------------*/

void
gpib_log_message( const char * fmt,
                  ... )
{
    va_list ap;


    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    if ( gpib_log == NULL || ll == LL_NONE )
        return;

    raise_permissions( );
    gpib_log_date( );
    va_start( ap, fmt );
    vfprintf( gpib_log, fmt, ap );
    va_end( ap );
    lower_permissions( );
}


/*-----------------------------------------------------------------*
 * The following functions are part of a dirty hack to get around
 * the problem that the SLG library does not set the close-on-exec
 * flag for the GPIB board device file. In the first function we
 * built up a list with all open file descriptor from the entries
 * in the fd subdirectory in the /proc directory for the current
 * process. Then the function for initialization of the GPIB board
 * gets called where the device file is opened. Afterwards, the
 * second function gets invoked that compares the fd's in the list
 * with the entries in the /proc/self/fd directory and sets the
 * close-on-exec flag for the new fd. Of course, this will only
 * work on Linux but fail (benignly) on other systems...
 *-----------------------------------------------------------------*/

static int *
get_fd_list( void )
{
    DIR *dir;
    struct dirent *de;
    int *fd_list = NULL;
    int num_fds = 0;
    char *dn;
    int fd;
    struct stat buf;


    CLOBBER_PROTECT( fd_list );
    CLOBBER_PROTECT( num_fds );
 
    if ( ( dir = opendir( "/proc/self/fd" ) ) == NULL )
        return NULL;

    while ( ( de = readdir( dir ) ) != NULL )
    {
        for ( dn = de->d_name; *dn && isdigit( *dn ); dn++ )
            /* empty */ ;

        if ( *dn != '\0' )
            continue;

        TRY
        {
            fd = T_atoi( de->d_name );
            if ( fstat( fd, &buf ) == -1 )
                THROW( EXCEPTION );

            if ( S_ISDIR( buf.st_mode ) )
            {
                TRY_SUCCESS;
                continue;
            }

            fd_list = T_realloc( fd_list, ( num_fds + 2 ) * sizeof *fd_list );
            fd_list[ num_fds++ ] = fd;

            TRY_SUCCESS;
        }
        OTHERWISE
        {
            if ( fd_list != NULL )
                T_free( fd_list );
            closedir( dir );
            return NULL;
        }

        fd_list[ num_fds ] = -1;
    }

    closedir( dir );
    return fd_list;
}


/*-----------------------------------------------------------------*
 *-----------------------------------------------------------------*/

static void
close_on_exec_hack( int * fd_list )
{
    int *new_fd_list;
    int i, j;
    bool found;
    int flags;


    if ( fd_list == NULL )
        return;

    /* Get list of open file descriptors */

    if ( ( new_fd_list = get_fd_list( ) ) == NULL )
    {
        T_free( fd_list );
        return;
    }

    /* Check for files that weren't in the old list and set the close-on-exec
       flag for these files (there should be only one...) */

    for ( i = 0; new_fd_list[ i ] != -1; i++ )
    {
        found = UNSET;
        for ( j = 0; fd_list[ j ] != -1; j++ )
            if ( new_fd_list[ i ] == fd_list[ j ] )
            {
                found = SET;
                break;
            }

        if (    ! found
             && ( flags = fcntl( new_fd_list [ i ], F_GETFD, 0 ) ) >= 0 )
            fcntl( new_fd_list [ i ], F_SETFD, flags | FD_CLOEXEC );
    }

    T_free( new_fd_list );
    T_free( fd_list );
}


/*
 * Local variables:
 * tags-file-name: "../TAGS"
 * tab-width: 4
 * indent-tabs-mode: nil
 * End:
 */
