#!/bin/bash
#
# $Id$
#
# Copyright (C) 2003-2006 Jens Thoms Toerring
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# To contact the author send email to jt@toerring.de


################################################################
# Utility function

function get_reply() {

    test $? -eq 0 || exit 1
    eval $1="`cat /tmp/RULBUS_reply`"
}


################################################################
# Ask the user for the module paramters

function do_setup() {

if [ $1 -ne 1 ]; then
	dialog --yesno \
"  Installation of RULBUS (Rijksuniversiteit Leiden BUS)\n\
     parallel port (EPP) interface driver and library\n\n\
You will now be asked a few questions concerning the default\n\
settings for the driver. If you have problems understanding\n\
   what this is all about please read the README file.\n\n\
             Do you want to continue?" 13 66;

	test $? -eq 0 || exit 0
fi

# Ask for the default parallel port base address

REPEAT=1;
while [ $REPEAT -ne 0 ]; do
    BASE="0x378";
    REPEAT=0;
    dialog --inputbox "\
Enter the default parallel port base address. Typically,\n\
this is either 0x378 (LPT1) or 0x278 (LPT2 and sometimes\n\
0x3BC. Please note that a different parallel port base\n\
address can be set when the module is loaded." \
    12 64 "$BASE" 2> /tmp/RULBUS_reply

    get_reply BASE
    test -n "BASE" || REPEAT=1
    test -z `echo $BASE | tr -d '[:digit:] | tr -d 'x''` || REPEAT=1
done

# Ask for the major device number, it must be between 1 and 254 (or 4094
# for 2.6 kernels) or 0 for a dynamically assigned device nuber

if [ `echo $KERNEL_VERSION | sed 's/^\(2\.[0-4]\)\..*$/XXX/'` != "XXX" ]; then

	REPEAT=1;
	while [ $REPEAT -ne 0 ]; do
		MAJOR=0;
		REPEAT=0;
		dialog --inputbox "\
Select the major device number, pick one between 1 and 254\n\
and also compare with/usr/src/linux/Documentation/devices.txt.\n\
Alternatively, specify 0 to use a dynamically assigned major\n\
device number." 12 70 "$MAJOR" 2> /tmp/RULBUS_reply

		get_reply MAJOR
		test -n "$MAJOR" || REPEAT=1
		test -z `echo $MAJOR | tr -d '[:digit:]'` || REPEAT=1
		if [ $REPEAT -eq 0 ]; then
			test \( $MAJOR -ge 0 -a $MAJOR -le 254 \) || REPEAT=1
		fi
	done
else
	REPEAT=1;
	while [ $REPEAT -ne 0 ]; do
		MAJOR=0;
		REPEAT=0;
		dialog --inputbox "\
Select the major device number, pick one between 1 and 4094\n\
and also compare with/usr/src/linux/Documentation/devices.txt.\n\
Alternatively, specify 0 to use a dynamically assigned major\n\
device number." 12 70 "$MAJOR" 2> /tmp/RULBUS_reply

		get_reply MAJOR
		test -n "$MAJOR" || REPEAT=1
		test -z `echo $MAJOR | tr -d '[:digit:]'` || REPEAT=1
		if [ $REPEAT -eq 0 ]; then
			test \( $MAJOR -ge 0 -a $MAJOR -le 4094 \) || REPEAT=1
		fi
	done
fi

# Finally get user to set the install directory

PREFIX="/usr/local"
dialog --inputbox \
"Finally, please enter the place where to install\n\
    the include files and the library:\n" \
    10 58 "$PREFIX" 2> /tmp/RULBUS_reply
get_reply PREFIX
PREFIX=${PREFIX%%/}    # strip trailing slashes

# Show user the values he has selected and give him a last chance to back out

dialog --yesno "\
You selected the following settings for the driver:\n\n\
      Major device number:     $MAJOR\n\
      Install directory:       $PREFIX\n\n\
           Create 'include/autoconf.h'?\n" 11 57

return $?

} # end of do_setup()


################################################################
# Create the autoconf.h file

function make_auto() {

echo "/* Automatically created - change carefully */" > include/autoconf.h
echo "" >> include/autoconf.h
echo "#define RULBUS_EPP_MAJOR    $MAJOR" >> include/autoconf.h
echo "#define RULBUS_EPP_BASE     $BASE"  >> include/autoconf.h
echo "#define RULBUS_EPP_PREFIX   \"$PREFIX\"" >> include/autoconf.h

} # end of make_auto()


################################################################
# Run setup of parameter until the user is satisfied

function setup_loop() {

    do_setup $1
    while [ $? -ne  0 ]; do
        do_setup 1
    done

    make_auto

	# Ask user if she wants the program compiled

    dialog --yesno "\
    Created 'include/autoconfig.h'\n\
 Continue with compiling everything?\n\n\
(You can return to this point anytime\n\
	  you feel like it.)\n" 11 44

	test $? -eq 0 || exit 0
}


################################################################
# Function that starts the make process after some more checks

function do_compile() {

# Check that system headers are available

if [    ! -e /lib/modules/$KERNEL_VERSION/build/include/linux/autoconf.h \
	 -a ! -e /usr/include/linux/autoconf.h ]; then
	dialog --msgbox \
"To create the driver for the RULBUS EPP interface the file\n\
/lib/modules/$KERNEL_VERSION/build/include/linux/autoconf.h\n\
(or /usr/include/linux/autoconf.h, depending on how old\n\
your kernel is) is required. This file contains vital\n\
information about the kernel the module is intended for.\n\
Please also see additonal information in the README file.\n\n\
Unfortunately, the installation can't proceed.\n" 13 68;
	exit 1;
fi

# Compile the driver and the library

echo "Compiling the driver, please wait..."
make driver > makelog 2>&1

if [ $? -ne 0 ]; then
    dialog --msgbox \
"Sorry, compiling the driver failed.\nSee \"makelog\" for the reasons.\n" 7 42;
    exit 1;
fi

echo "Compiling the library, please wait..."
make lib >> makelog 2>&1

if [ $? -ne 0 ]; then
    dialog --msgbox \
"  Sorry, compiling the library failed.\n\
See \"makelog\" for the reasons.\n" 7 45;
    exit 1;
fi

} # end of do_compile()


################################################################
# Does everything needed for the installation

function do_install() {

# Ask user if he wants to install the library, driver and include files etc.

PREFIX=`grep RULBUS_EPP_PREFIX include/autoconf.h | sed 's/[^\"]*//' | tr -d \"`
MAJOR=`grep RULBUS_EPP_MAJOR include/autoconf.h | awk '{print $3}'`;
if [ `echo $KERNEL_VERSION | sed 's/^\(2\.6\)\..*$/XXX/'` == "XXX" ]; then
	MOD_INST_AS="/lib/modules/$KERNEL_VERSION/extra/rulbus_epp.ko";
	LOCAL_NAME="driver/rulbus_epp.ko";
else
	MOD_INST_AS="/lib/modules/$KERNEL_VERSION/misc/rulbus_epp.o";
	LOCAL_NAME="driver/rulbus_epp.o ";
fi

dialog --yesno \
"Now we're ready to install everything. This starts with\n\
copying the following files, if necessary creating\n\
directories that don't exist:\n\n\
 include/rulbus.h     => $PREFIX/include/rulbus.h\n\
 lib/librulbus.a      => $PREFIX/lib/librulbus.a\n\
 lib/librulbus.so     => $PREFIX/lib/librulbus.so\n\
 $LOCAL_NAME => $MOD_INST_AS\n\n\
		Do you want to continue ?" 14 74

test $? -eq 0 || exit 0

# Check that user has root privileges

if [ `id -u` != "0" ]; then
	dialog --msgbox \
"Sorry, you need root privileges to install\n\
 the driver and the library etc. Please\n\
    become root and then try again.\n" 7 48
	exit 1;
fi

# Do the basic installation (covered by the makefile)

 make install >> makelog 2>&1
if [ $? -ne 0 ]; then
	dialog --msgbox \
"Sorry, installation failed.\nSee \"makelog\" for the reasons.\n" 7 35;
    exit 1
fi

# Find out if user wants to create the device file for the board, but only if
# the major device number isn't set to 0.

if [ $MAJOR -ne 0 ]; then
	dialog --yesno \
"Do you want to create the device file\n\
          /dev/rulbus_epp\n\n\
     for the board now?"  9 46

	if [ $? -eq 0 ]; then
		if [ -e /dev/rulbus_epp ]; then 
				dialog --yesno \
"A device file /dev/rulbus_epp already exists.\n\
Delete existing file and replace with a new one?" 7 54;
			if [ $? -eq 0 ]; then
				rm -f /dev/rulbus_epp
				mknod /dev/rulbus_epp c $MAJOR 0
				chmod 666 /dev/rulbus_epp
			fi
		else
			mknod /dev/rulbus_epp c $MAJOR 0
			chmod 666 /dev/rulbus_epp
		fi
	fi

	# Ask user if the module should be included in /etc/modules.conf (or, on
	# older installations, in /etc/conf.modules, or, on newer installations,
	# in /etc/modules.conf.local) and find out if user the  wants to update
	# the modules dependency file

	MODULECONF="/etc/modules.conf";
	if [ ! -e $MODULECONF -a -e /etc/conf.modules ]; then
		MODULECONF="/etc/conf.modules"
	fi
	if [ -e $MODULECONF -a -e /etc/modules.conf.local ]; then
		MODULECONF="/etc/modules.conf.local"
	fi

	dialog --yesno \
"  Update $MODULECONF to include the new driver?\n\
 (Old version will be copied to $MODULECONF.bak.)" 7 62
	test $? -ne 0 || mod_update
else              # dynamically assigned major device number

	# Test if the system is LSB 1.1.0 compliant

	if [ ! \(    -d /etc/init.d                   	              \
		      -a -e /lib/lsb/init-functions       	              \
              -a \(    -e /lib/lsb/install_initd                  \
					-o -e /usr/lib/lsb/install_initd \)           \
              -a \(    -e /lib/lsb/remove_initd                   \
					-o -e /usr/lib/lsb/remove_initd \) \) ]; then
	dialog --msgbox "\
Sorry, your system does not seem to be LSB 1.1.0 compliant.\n\
To have the RULBUS module loaded at boot time and device files\n\
created automatically please change the script 'rulbus_epp' in\n\
the 'utils' subdirectory to fit your needs and install it\n\
in the directory for init scripts yourself." 12 70

	else   # System is LSB compliant

		dialog --yesno "\
Do you want me to copy the init script 'utils/rulbus_epp'\n\
to the init directory '/etc/init.d' and create the\n\
necessary runlevel links so that the RULBUS EPP module\n\
gets loaded at boot time and the device files are\n\
             created automatically?" 9 65

		if [ $? -eq 0 ]; then
			if [ -e /etc/init.d/rulbus_epp ]; then
				if [ -e /lib/lsb/remove_initd ]; then
					/lib/lsb/remove_initd /etc/init.d/rulbus_epp > /dev/null 2>&1
				else
					/usr/lib/lsb/remove_initd /etc/init.d/rulbus_epp > /dev/null 2>&1
				fi
				rm -f /etc/init.d/rulbus_epp
			fi
			install -m 744 utils/rulbus_epp /etc/init.d/rulbus_epp
			if [ -e /lib/lsb/install_initd ]; then
				/lib/lsb/install_initd /etc/init.d/rulbus_epp
			else
				/usr/lib/lsb/install_initd /etc/init.d/rulbus_epp
			fi
			dialog --msgbox "\
Unless you reboot the system (which is *not* required)\n\
please run the command\n\
\n\
         /etc/init.d/rulbus_epp start\n\
\n\
    to load the module and create device files.\n\
    If the module is already loaded please use\n\
\n\
         /etc/init.d/rulbus_epp restart\n\
\n\
      to replace it by the new version." 16 60
		fi
	fi
fi

} # end of do_install()


################################################################
# Removes entries for drivers with the same major number device
# number from /etc/modules.conf (or, if this is still used,
# /etc/conf.modules) and adds the RULBUS EPP driver instead. The old
# configuration file is saved with the extension .bak

function mod_update() {

cp $MODULECONF $MODULECONF.bak

MAJOR=`grep RULBUS_EPP_MAJOR include/autoconf.h | awk '{print $3}'`
PATTERN="^[[:space:]]*alias[[:space:]+]char-major-$MAJOR[[:space:]+]"
PATTERN2="^[[:space:]]*pre-install[[:space:]+]rulbus_epp[[:space:]+]"

LINE=`grep $PATTERN $MODULECONF`
if [ $? -eq 0 ]; then
	LINE2=`grep $PATTERN2 $MODULECONF`
	if [ $? -eq 0 ]; then
		grep -v $PATTERN $MODULECONF | grep -v $PATTERN2 > /tmp/`basename $MODULECONF`
		echo "#$LINE2" >> /tmp/`basename $MODULECONF`
		echo "#$LINE" >> /tmp/`basename $MODULECONF`
	else
		grep -v $PATTERN $MODULECONF > /tmp/`basename $MODULECONF`
		echo "#$LINE" >> /tmp/`basename $MODULECONF`
	fi

	LINE=`grep "^[[:space:]]*options[[:space:]+]rulbus_epp" /tmp/\`basename $MODULECONF\``;
	if [ $? -eq 0 ]; then
		mv /tmp/`basename $MODULECONF` /tmp/`basename $MODULECONF`2
		grep -v "$LINE" /tmp/`basename $MODULECONF`2 > /tmp/`basename $MODULECONF`
		rm -f /tmp/`basename $MODULECONF`2
		echo "#$LINE" >> /tmp/`basename $MODULECONF`
	fi

	mv /tmp/`basename $MODULECONF` $MODULECONF
fi

echo "pre-install rulbus_epp modprobe \"-k\" \"parport\"" >> $MODULECONF
echo "alias char-major-$MAJOR rulbus_epp" >> $MODULECONF

dialog --yesno \
"Do you want to update the modules dependency\n\
file /lib/modules/$KERNEL_VERSION/modules.dep using\n\
        the command 'depmod -a'?" 8 55
test $? || depmod -v $KERNEL_VERSION -a >/dev/null
}


################################################################
# Chooses either compiling or installing (called at the start
# when the include/autoconf.h file exists)

function pref_comp() {

dialog --radiolist "\
  What do you want to do next?\n\
   (press <Space> to select)"  \
   10 53 2 \
   "Setup  "  "Set the board driver parameters" "off" \
   "Compile"  "Compile the driver and library"  "on"  \
   2> /tmp/RULBUS_reply

get_reply MTYPE

test $MTYPE != "Setup" || setup_loop 1

} # end of pref_comp()


################################################################
# Chooses between setup, compilation or installation (called at
# the start when include/autoconf.h file  as well as the compiled
# library and driver exist)

function pref_inst() {

dialog --radiolist "\
  What do you want to do next?\n\
   (press <Space> to select)"  \
   11 53 3 \
   "Setup  "  "Set the board driver parameters" "off" \
   "Compile"  "Compile driver and library"      "off" \
   "Install"  "Install driver and library"      "on"  \
   2> /tmp/RULBUS_reply

get_reply MTYPE

case $MTYPE in
    Setup  )
        setup_loop 1
        do_compile 0
        do_install
        ;;

    Compile)
        make clean
        do_compile 1
        do_install
        ;;

    Install)
        do_install
        ;;
esac
}


################################################################
# Function sets the variable KENREL_VERSION to a string with 
# the name of the kernel we're supposed to compile for.

function get_kernel_version() {

	if [ -n "$RULBUS_EPP_KERNEL_SOURCE" ]; then
		KERNEL_DIR=$RULBUS_EPP_KERNEL_SOURCE;
	else
		KERNEL_DIR="/lib/modules/`uname -r`/build";
		if [ -z "$KERNEL_DIR" ]; then
			KERNEL_DIR="/usr/src/linux";
		fi
	fi

	if [ ! -e $KERNEL_DIR/include/linux/version.h ]; then
		dialog --msgbox \
"To create the driver for the RULBUS EPP interface the file\n\
$KERNEL_DIR/linux/version.h\n\
(or /usr/include/linux/version.h, depending on how old\n\
your kernel is) is required. This file contains vital\n\
information about the kernel the module is intended for.\n\
Please also see additonal information in the README file.\n\n\
Unfortunately, the installation can't proceed.\n" 13 68;
		exit 1;
fi

	KERNEL_VERSION=`grep UTS_RELEASE $KERNEL_DIR/include/linux/version.h \
                    2>/dev/null | \
				    sed 's/^[^"]\{1,\}"\([^"]\{1,\}\)".*$/\1/' 2>/dev/null`;

	if [ -z "$KERNEL_VERSION" ]; then
		dialog --msgbox "\
Sorry, can't determine kernel version under the assumption\n\
that kernel sources are at '$KERNEL_DIR'" 6 64;
		exit 1
	fi
}


################################################################
# Main part of the installation script

trap "rm -f /tmp/RULBUS_reply" 0 1 2 15

export DIALOGRC=./.INSTALLrc

# We need dialog so check if it's available

DIALOG=`which dialog`
if [ $? -eq 1 ]; then
    echo "Sorry, you need the 'dialog' utility to run this script!";
    exit 1;
fi


# Check if this is a 2.4 or 2.6 kernel

get_kernel_version;

if [ `echo $KERNEL_VERSION | sed 's/^\(2\.[46]\)\..*$/XXX/'` != "XXX" ]; then
    dialog --yesno \
"This package is only tested with 2.4 and 2.6 kernels.\n\
There may be lots of problems with other kernels.\n\n\
           Do you want to continue?" 8 56
    test $? -eq 0 || exit 0
fi

if [ ! -e include/autoconf.h ]; then
   setup_loop 0
   do_compile 0
   do_install
else
    if [ ! -e driver/rulbus.o -o \
		 ! -e lib/librulbus.a -o \
		 ! -e lib/librulbus.so ]; then
        pref_comp
        do_compile 0
        do_install
    else
        pref_inst
    fi
fi

dialog --msgbox "\
Ok, you're hopefully done with creating and\n\
installing the driver and the library. You\n\
still need to create a configuration file\n\
'rulbus.conf' for the Rulbus devices and\n\
then copy it to '/etc'." 9 50;

exit 0
