#! /usr/bin/perl -w  -*- cperl -*-
#
# $Id$
#
# Copyright (c) 2001 Jens Thoms Toerring
#
# This file is part of fsc2.
#
# Fsc2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Fsc2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Script checks if for each malloc(), calloc(), strdup() or realloc() there's
# also a free(). To use it define MDEBUG when compiling fsc2, run fsc2 with
# stderr redirected to a file and then feed the resulting file to this script.
# To figure out the exact file name and line number that triggered the error
# that the executable was either the version of fsc2 in the current directory
# or, if none exists there, /usr/local/bin/fsc2.

use strict;

my ( $h, %h1, %h2, @f, $key, $exe );

$exe = ( -f "fsc2" ) ? "fsc2" : "/usr/local/bin/fsc2";

while ( <> ) {

	@f = split /\s+/;

	$h = $f[ 0 ] eq "(0)" ? \%h1 : \%h2;

	$$h{ $f[ 2 ] } = "$1 $f[ 2 ] (line $.) at $f[ 5 ]"
		if $f[ 1 ] =~ /^((malloc)|(calloc)|(strdup)):$/;

	if ( $f[ 1 ] eq "realloc:" ) {
		if ( $f[ 2 ] eq "(nil)" ) {
			$$h{ $f[ 4 ] } = "$f[ 0 ]: realloc from (nil) $f[ 4 ] (line $.) " .
				             "at $f[ 7 ]\n";
		} else {
			if ( not defined $$h{ $f[ 2 ] } ) {
				print "$f[ 0 ]: realloc error for $f[ 2 ] (line $.) called " .
					   "from " . `addr2line -e $exe $f[ 7 ]`
			} else {
				delete $$h{ $f[ 2 ] };
			}
		}
		$$h{ $f[ 4 ] } = "realloc $f[ 4 ] (line $.) at $f[ 7 ]";
	}

	if ( $f[ 1 ] eq "free:" ) {
		if ( not defined $$h{ $f[ 2 ] } ) {
			print "$f[ 0 ]: free error for $f[ 2 ] (line $.) called from " .
				  `addr2line -e $exe $f[ 4 ]`;
		} else {
			delete $$h{ $f[ 2 ] };
		}
	}
}

if ( ( keys %h1 ) ) {
	print "Remaing memory from parent:\n";
	for ( keys %h1 ) {
		print $h1{ $_ };
		my @e = split / /, $h1{ $_ };
		print " called from `addr2line -e $exe $e[ $#e ]`";
	}
}

if ( ( keys %h2 ) ) {
	print "Remaing memory from child:\n";
	for ( keys %h2 ) {
		print $h2{ $_ };
		my @e = split / /, $h2{ $_ };
		print " called from `addr2line -e $exe $e[ $#e ]`";
	}
}

