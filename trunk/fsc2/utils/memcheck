#! /usr/bin/perl -w
#
# Script checks if for each malloc, calloc or realloc there is a free.
# To be able to use it define MDEBUG when compiling fsc2 and run it with
# stderr redirected to a file, which is in turn read in by memcheck.


use strict;


my ( $h, %h1, %h2, $a, @f, $key );

if ( $#ARGV == -1 ) {
	open( F, "<mem" ) or die "Can' open file `mem'";
} else {
	open( F, "<$ARGV[0]" ) or die "Can' open file `$ARGV[0]'";
}

while ( <F> ) {
	@f = split /\s+/;

	$h = $f[ 0 ] eq "(0)" ? \%h1 : \%h2;

	$$h{ $f[ 2 ] } = "malloc $f[ 2 ] at line $." if $f[ 1 ] eq "malloc:";
	$$h{ $f[ 2 ] } = "calloc $f[ 2 ] at line $." if $f[ 1 ] eq "calloc:";
	$$h{ $f[ 2 ] } = "strdup $f[ 2 ] at line $." if $f[ 1 ] eq "strdup:";

	if ( $f[ 1 ] eq "realloc:" ) {
		if ( $f[ 2 ] eq "(nil)" ) {
			$$h{ $f[ 4 ] } = "$f[ 0 ]: realloc from (nil) $f[ 4 ]";
		} else {
			if ( not defined $$h{ $f[ 2 ] } ) {
				print "$f[ 0 ]: realloc error for $f[ 2 ] at $.\n";
			} else {
				delete $$h{ $f[ 2 ] };
			}
		}
		$$h{ $f[ 4 ] } = "realloc $f[ 4 ]";
	}

	if ( $f[ 1 ] eq "free:" ) {
		if ( not defined $$h{ $f[ 2 ] } ) {
			print "$f[ 0 ]: free error for $f[ 2 ] at line $.\n";
		} else {
			delete $$h{ $f[ 2 ] };
		}
	}
}

close( F );

print "Remaing memory from parent:\n";
foreach $key ( keys %h1 ) {
	print "$h1{ $key }\n";
}

print "\nRemaing memory from child:\n";
foreach $key ( keys %h2 ) {
	print "$h2{ $key }\n";
}
