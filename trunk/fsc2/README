fsc2 is a program written to remotely control spectrometers.

Programs for controlling spectrometers are usually home-written,
restricted to doing a certain set of experiments and often bound to
a fixed hardware base. One of the few counter-examples is e.g. LabVIEW,
but which is a commercial, closed-source application and requires the
experimentator to become comfortable with the rather unusual graphical
approach to programming if even simple changes are needed in either the
way the experiment is to be done or the hardware configuration.

In contrast, fsc2 basically interprets a rather simple but powerful
scripting language (in the following called EDL for Experiment Description
Language) and has a strictly modular approach to handling of devices.
This allows you to easily set up a completely new experiment (or to change
an already existing experiment description) in a short time without
any detailed knowledge of the internals of fsc2 nor on how exactly the
devices have to be controlled.

Some key features:

* The EDL language is similar to other medium to high level languages,
  borrowing from e.g. MathLab, C, Fortran and Perl etc. Moreover, it
  comes with a lot of functions for displaying and saving measured
  data in completely user defined ways. Thus writing a description
  for a new experiment (or adapting an already existing EDL script)
  won't be difficult for anyone remotely acqainted with one of the
  above mentioned programming languages.

* Device are not hard-coded into fsc2. Instead, devices are dealt with
  by modules that get loaded on demand (a single instruction in an EDL
  script). This allows to employ a different device with similar
  functionality by usually changing not more than a single line in an
  EDL script.

* Currently fsc2 controls devices that are either connected via the serial
  ports or the GPIB bus. Functions for simplifying access of devices using
  these interfaces are built into fsc2.

* fsc2 allows other programs to send it EDL scripts to execute. This
  allows to write a set of scripts for standard experiments that
  automatically create EDL scripts from user input (e.g. via a graphical
  interface). The package comes with a tool that automatically can generate
  such scripts from (slightly modified) EDL programs. Once such a script
  has been created, "normal" user don't even have to know how to write EDL
  programs, thus having all the convenience of the traditional type of
  programs without sacrificing the flexibility of fsc2. Several examples
  of such scripts, written in Perl/Tk, are included in the distribution.

* fsc2 comes with a simple web server (only running on user demand) that
  allows the experimentator to remotely monitor the current state of the
  experiment.

* Writing new device modules (or adapting existing ones for a new device)
  shouldn't be too difficult for anyone having some experience with writing
  programs in C. About 30 modules for quite a range of devices are already
  part of the package and can be used as a starting point for the
  development of new ones.

* An extensive 150+ page documentation (in HTML, info, PostScript and PDF
  format), covering all aspects of fsc2 from the graphical interface, the
  EDL language, device functions to writing of new device modules, is part
  of the fsc2 package.

* fsc2 has been extensively tested and is currently used to control seven
  EPR spectrometers, using a broad range of different devices and   
  experimental techniques.

* The complete sources for the program and all device modules are available
  under the GPL, so it can be adapted or extended to fit your special needs.

Devices for which functional drivers already exist are:

* Tektronix Digitizing Oszilloscopes TDS 520, 520A, 520C, 540, 744A, 754A
* LeCroy Digitizing Oscilloscope 9400
* Sony/Tektronix Data Generator DG2020
* Tektronix Stimulus System HFS9003
* Stanford Research Lock-In Amplifier SR510, SR530, SR810, SR830
* AEG Magnet Power Supply (home-build computer control, S-, X-Band)
* Bruker Field controller ER 032 M
* Keithley 228A (used as superconducting magnet power supply)
* Oxford Magnet Sweep Power Supply IPS20-4
* Bruker Hall Effect Field Controller BH 15
* Bruker NMR Gaussmeter ER 035 M (F0, F1 probe, serial port and GPIB versions)
* Metrolab NMR Teslameter PT2025
* HP RF Synthesizer HP8647A
* Bruker Signal Channel ER 023 M
* Lake Shore 330 Temperature Controller
* Kontron 4060 Voltmeter
* EG&G PARC Box-Car Integrator 4402 (download of measured data only)

fsc2 currently works with three different GPIB driver/library combinations,
the Linux Lab Project driver (http://www.llp.fu-berlin.de), the National
Instruments driver (http://www.natinst.com) and a driver for NI PCII and
AT-GPIB/TNT (ISA) cards I wrote (can be downloaded from the same URL as
fsc2, see below).

Of course, there are some limitations: Due to my professional background
fsc2 has been written with the different types of EPR (Electron Paramagnetic
Resonance) experiments in mind. On the other hand, fsc2's basic concepts
should make it easy to use it also for a large range of other types of
spectrometers.

You can download the sources for the program and the existing modules or
just the documentation (in PostScript or PDF format) from

       http://www.physik.fu-berlin/~toerring/

or read the HTTP version of the documentation at

       http://www.physik.fu-berlin/~toerring/fsc2

                                        Regards, Jens Thoms Toerring

                                     Jens.Toerring@physik.fu-berlin.de
