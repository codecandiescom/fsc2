#! /bin/sh
#
# $Id$
#
# Copyright (C) 2002-2003 Jens Thoms Toerring
#
# This init script tries to be conformant to LSB (Linux Standard Base
# Specification), version 1.1.0. 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# To contact the author send email to:
# Jens.Toerring@physik.fu-berlin.de

### BEGIN INIT INFO
# Provides:          ni_daq
# Required-Start:    $localfs $remote_fs $syslog
# Required-Stop:     $localfs $remote_fs $syslog
# Default-Start:     2 3 5
# Default-Stop:      0 1 6
# Short-Description: Loads ni_daq module and creates device files
# Description:       The script tries to load or unload the module for National
#                    Instruments NI PCI E Series DAQ cards. The module must
#                    already have been installed successfully for the currently
#                    running kernel. Beside loading or unloading the module
#                    also device files for 4 boards of this type are created on
#                    start and deleted on stop.
#					 Please note: Using this init script only makes sense when
#					 a dynamically assigned major device number is used for the
#					 module, otherwise demand-loading (via /etc/modules.conf)
#					 should be used.
### END INIT INFO

. /lib/lsb/init-functions


# Uncomment the following 5 lines if you're using SuSE and want to make
# starting the NI_DAQ module and creating device files dependent on an entry
# like "START_NI_DAQ=yes" or "START_NI_DAQ=no" in /etc/rc.config

# . /etc/rc.config
# base=${0##*/}
# link=${base#*[SK][0-9][0-9]}
# test $link = $base && START_NI_DAQ=yes
# test "$START_NI_DAQ" = yes || exit 0


if [ -z $1 ]; then
	log_failure_msg "Missing argument."
	exit 2;
fi

case "$1" in
    start)
		insmod ni_daq > /dev/null 2>&1
		if [ $? != 0 ]; then
			log_failure_msg "Loading NI_DAQ module failed."
			exit 1
		fi
		grep 'devfs=only' /proc/cmdline > /dev/null 2>&1
		if [ $? != 0 ]; then
			major=`grep ni_daq /proc/devices | awk '{print $1}'`
			if [ -z $major ]; then
				log_failure_msg "Can't determine major device number for NI_DAQ cards."
				exit 1
			fi
			nboards=0
			nboards=$(($nboards+`lspci -n | grep -i '1093:1180' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:1190' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:0162' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:2a60' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:2a70' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:1330' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:1270' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:1340' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:18b0' | wc -l`))
			nboards=$(($nboards+`lspci -n | grep -i '1093:1350' | wc -l`))
			i=0;
			while [ $i -lt $nboards -a $i -lt 4 ]; do
				mknod /dev/pci_e_series_$i c $major $i
				if [ $? != 0 ]; then
					log_failure_msg "Creating device files for NI_DAQ cards failed."
					exit 1
				fi
				chmod 666 /dev/pci_e_series_$i
				i=$(($i+1))
			done
		fi
		test "$2" = "restart" || log_success_msg "Starting NI_DAQ support."
		;;

	 stop)
		grep 'devfs=only' /proc/cmdline > /dev/null 2>&1
		if [ $? != 0 ]; then
			for f in /dev/pci_e_series_*; do
				rm -f $f
				if [ $? != 0 ]; then
					log_failure_msg "Deleting device files for NI_DAQ cards failed."
					exit 1
				fi
			done
		fi
		rmmod ni_daq > /dev/null 2>&1
		if [ $? != 0 ]; then
			log_failure_msg "Unloading NI_DAQ module failed."
			exit 1
		fi
		test "$2" = "restart" || log_success_msg "Stopping NI_DAQ support."
		;;

	 restart|reload|force-reload)        # no reason here to differentiate...
		$0 stop restart
		$0 start restart && log_success_msg "NI_DAQ support restarted."
		;;

	 status)
		grep ni_daq /proc/devices
		if [ $? = 0 ]; then
			log_success_msg "NI_DAQ support is up and running."
			exit 0
		else
			log_failure_msg "NI_DAQ support is not available."
			exit 3
		fi
		;;
    *)
		echo "Usage: $0 {start|stop|restart|force-reload|reload|status}"
		exit 1
	;;
esac
