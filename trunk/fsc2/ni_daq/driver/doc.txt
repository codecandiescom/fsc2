Please note: to be able to understand the following you must already
             have read and understood the DAQ-STC manual!


----------------------------------------------------------------------


Before any AI can be done one must specify which channels are to be used.
This is done by calling ioctl() with the value 'NI_DAQ_IOC_AI' as the
second argument and a structure of type 'NI_DAQ_AI_ARGS'

typedef struct {
	NI_DAQ_AI_CMD cmd;
	NI_DAQ_CLOCK_SPEED_VALUE speed;
	unsigned int num_channels;
	NI_DAQ_AI_CHANNEL_ARGS *channel_args;
	NI_DAQ_ACQ_SETUP *acq_args;
} NI_DAQ_AI_ARG;

as the third. In this case the members 'cmd', 'num_channels' and
'channel_args' of the structure must have valid values.


'cmd' must be set to the value 'NI_DAQ_AI_CHANNEL_SETUP', 'num_channels'
be the number of channels to be converted at once and 'channel_args' a
pointer to an array of 'num_channels' structures (one for each channel)
of type 'NI_DAQ_AI_CHANNEL_ARGS':

typedef struct {
	unsigned int channel;
	NI_DAQ_AI_TYPE channel_type;
	NI_DAQ_STATE generate_trigger;
	NI_DAQ_STATE dither_enable;
	NI_DAQ_BU_POLARITY polarity;
	NI_DAQ_AI_GAIN_TYPES gain;
} NI_DAQ_AI_CHANNEL_ARGS;


The first member of the structure, 'channel', is the number of the
channel under consideration, a value between 0 and the number of
channels your card has minus 1.


The second member, 'channel_type', must be a value from the enumeration
typdef'ed as

typedef enum {
	NI_DAQ_AI_TYPE_Calibration ,
	NI_DAQ_AI_TYPE_Differential,
	NI_DAQ_AI_TYPE_NRSE,
	NI_DAQ_AI_TYPE_RSE,
	NI_DAQ_AI_TYPE_Aux,
	NI_DAQ_AI_TYPE_Ghost
} NI_DAQ_AI_TYPE;

It informs the driver about the way the channel is to be used. Please
note that when the channel is of type 'Differential' atcually two
channels are going to be used. The first channel (i.e. the one
listed as the 'channel' member in the 'NI_DAQ_AI_CHANNEL_ARGS'
structure) must be one from the set =0..7,16..23,32..29,48..55
(reduce this as necessary to the number of channels available
on your card) and the associated channel has the number (i+8).


The third argument, 'generate_trigger', must be a value from the
enumeration typdef'ed as

typedef enum {
	NI_DAQ_DISABLED,
	NI_DAQ_ENABLED
} NI_DAQ_STATE;

If enabled, an active low trigger pulse is sent top the RTSI_BRD0 input
of the DAQ-STC during the CONVERT signal.


The fourth member, 'dither_enable', must have a value of the same
'NI_DAQ_STATE' enumeration. It is used to decide if the dither
circuitry feeding the analog input is enabled.


The fifth member, 'polarity', must be set to a value from the
enumeration typedef'ed as

typedef enum {
	NI_DAQ_BIPOLAR,
	NI_DAQ_UNIPOLAR
} NI_DAQ_BU_POLARITY;

and is used to configure the ADC for the channel to unipolar or
bipolar mode.


The sixth and final member, 'gain', must be a value of the enumeration
typedef'ed as

typedef enum {
	NI_DAQ_GAIN_0_5,        /* divide by 2 gain */
	NI_DAQ_GAIN_1,          /* no amplification */
	NI_DAQ_GAIN_2,          /* amplify by a factor of 2 */
	NI_DAQ_GAIN_5,          /* amplify by a factor of 5 */
	NI_DAQ_GAIN_10,         /* amplify by a factor of 10 */
	NI_DAQ_GAIN_20,         /* amplify by a factor of 20 */
	NI_DAQ_GAIN_50,         /* amplify by a factor of 50 */
	NI_DAQ_GAIN_100,        /* amplify by a factor of 100 */
} NI_DAQ_AI_GAIN_TYPES;

It is used to set the ADC input amplifier gain. Please note that some
boards only allow subsets of these gains.


----------------------------------------------------------------------


Before starting AI conversions the triggering and timing as well
as the number of scans has to be specified. This is done by an iotcl()
call with the value 'NI_DAQ_IOC_AI' as the second argument and a
structure of type 'NI_DAQ_AI_ARGS' as the third.


In this case the 'cmd' member of the 'NI_DAQ_AI_ARGS' structure must
be set to the value 'NI_DAQ_AI_ACQ_SETUP' and the 'acq_args' member
must be a pointer to a structure of type

typedef struct {
	NI_DAQ_INPUT START_source;
	NI_DAQ_INPUT START1_source;
	NI_DAQ_INPUT CONVERT_source;
	NI_DAQ_INPUT SI_source;
	NI_DAQ_INPUT SI2_source;
	
	NI_DAQ_TRIGGER_MODE START_mode;

	NI_DAQ_POLARITY START_polarity;
	NI_DAQ_POLARITY START1_polarity;
	NI_DAQ_POLARITY CONVERT_polarity;

	unsigned long SI_start_delay;
	unsigned long SI_stepping;

	unsigned int SI2_start_delay;
	unsigned int SI2_stepping;

	unsigned long num_scans;
} NI_DAQ_ACQ_SETUP;


The first five member of this structure are values from an enumeration
of type

typedef enum {
	NI_DAQ_IN_TIMEBASE1,
	NI_DAQ_AI_START1_Pulse,
	NI_DAQ_SI_TC,
	NI_DAQ_SI2_TC,
	NI_DAQ_SAME_AS_SI,
	NI_DAQ_AI_IN_TIMEBASE1,
	NI_DAQ_PFI0,
	NI_DAQ_PFI1,
	NI_DAQ_PFI2,
	NI_DAQ_PFI3,
	NI_DAQ_PFI4,
	NI_DAQ_PFI5,
	NI_DAQ_PFI6,
	NI_DAQ_PFI7,
	NI_DAQ_PFI8,
	NI_DAQ_PFI9,
	NI_DAQ_RTSI_0,
	NI_DAQ_RTSI_1,
	NI_DAQ_RTSI_2,
	NI_DAQ_RTSI_3,
	NI_DAQ_RTSI_4,
	NI_DAQ_RTSI_5,
	NI_DAQ_RTSI_6,
	NI_DAQ_IN_TIMEBASE2,
	NI_DAQ_AI_START_Pulse,
	NI_DAQ_GOUT_0,
	NI_DAQ_LOW,
} NI_DAQ_INPUT;


The 'START_source' member determines the source of the START signal.
It can be set to either 'NI_DAQ_SI_TC', 'NI_DAQ_PFI0' to 'NI_DAQ_PFI9',
NI_DAQ_RTSI0' to 'NI_DAQ_RTSI6', 'NI_DAQ_GOUT_0', NI_DAQ_AI_START_Pulse'
or 'NI_DAQ_LOW'.

If set to 'NI_DAQ_SI_TC' the DAQ-STC is in internal START mode and the
START signal comes from the SI counter TC event. The DAQ-STC is also
in internal START mode when 'START_Source' is 'NI_DAQ_AI_START_Pulse',
in which case the trigger is a software strobe. Otherwise the START
signal is external and can come either from one of the PFI<0..9>, the
RTSI<0..6> lines, the G_OUT signal from the general purpose counter 0
or is always low.


The 'START1_source' member determines the source of the START1 signal.
It can be set to either 'NI_DAQ_AI_START1_Pulse',  'NI_DAQ_PFI0' to
'NI_DAQ_PFI9', NI_DAQ_RTSI0' to 'NI_DAQ_RTSI6', 'NI_DAQ_GOUT_0' or
'NI_DAQ_LOW'.

If set to 'NI_DAQ_AI_START1_Pulse', the START1 signal must be raised
by software. Otherwise it is external and can come either from one of
the PFI<0..9>, the RTSI<0..6> lines, the G_OUT signal from the general
purpose counter 0 or is always low. 


The 'CONVERT_source' member determines the source of the CONVERT signal.
It can be set to either 'NI_DAQ_SI2_TC', 'NI_DAQ_PFI0' to 'NI_DAQ_PFI9',
NI_DAQ_RTSI0' to 'NI_DAQ_RTSI6', 'NI_DAQ_GOUT_0' or 'NI_DAQ_LOW'.

If set to 'NI_DAQ_SI2_TC', the DAQ-STC is in internal CONVERT mode and
the CONVERT signal comes from the SI2 counter TC event. Otherwise the
CONVERT signal is external and comes from one of the PFI<0..9>, the
RTSI<0..6> lines, the G_OUT signal from the general purpose counter 0
or is always low.


The 'SI_source' member, which needs to be set when the 'START_source'
member is 'NI_DAQ_SI_TC', determines what the SI counter is counting.
It then must have one of the values 'NI_DAQ_AI_IN_TIMEBASE1',
'NI_DAQ_PFI0' to 'NI_DAQ_PFI9', 'NI_DAQ_RTSI0' to 'NI_DAQ_RTSI6',
'NI_DAQ_IN_TIMEBASE2' or 'NI_DAQ_LOW'.

If set to 'NI_DAQ_AI_IN_TIMEBASE1' the counter is based on the
AI_IN_TIMEBASE1 signal, when set to 'NI_DAQ_IN_TIMEBASE2' on the
_IN_TIMEBASE2 signal, both of them internal. Otherwise the counter is
based on an external signal, either PFI<0..9> or RTSI<0..6>.


The 'SI2_source' member, which must be set when the 'CONVERT_source'
member is 'NI_DAQ_SI2_TC', determines what the SI2 counter is counting.
It must have the value 'NI_DAQ_SAME_AS_SI' or 'NI_DAQ_AI_IN_TIMEBASE1'.

If set to 'NI_DAQ_SAME_AS_SI' the SI2 counter will count what the SI
counter is counting (which then must be set up correctly). Otherwise
the SI2 counter is based on the AI_IN_TIMEBASE1 signal.


The 'START_polarity' member determines the polarity of the START
trigger and can be set to either 'NI_DAQ_NORMAL' (for trigger on
rising edge) or 'NI_DAQ_INVERTED' (for trigger on falling edge).
The value is only used when using an external trigger for START
(i.e. the 'START_source' member isn't set to 'NI_DAQ_SI_TC').



The 'START1_polarity' member determines the polarity of the START1
trigger and can be set to either 'NI_DAQ_NORMAL' (for trigger on
rising edge) or 'NI_DAQ_INVERTED' (for trigger on falling edge).
The value is only used when using an external trigger for START1
(i.e. the 'START1_source' member isn't set to 'NI_DAQ_AI_START1_Pulse').


The 'CONVERT_polarity' member determines the polarity of the
CONVERT trigger and can be set to either 'NI_DAQ_NORMAL' (for
trigger on rising edge) or 'NI_DAQ_INVERTED' (for trigger on
falling edge). The value is only used when using an external
trigger for CONVERT (i.e. when the 'CONVERT_source' member isn't
set to 'NI_DAQ_SI2_TC').


The 'SI_start_delay' member determines how long the SI counter is
counting before the first TC event happens, resulting in the first
START signal. The value must be between 1 and 2^24.


The 'SI_stepping' member determines how long the SI counter is counting
between TC events, which result in START signals, starting a new scan.
The value must be between 1 and 2^24.


The 'SI2_start_delay' member determines how long the SI2 counter is
counting before the first TC event happens, resulting in the first
CONVERT signal. The value must be between 1 and 2^16.


The 'SI2_stepping' member determines how long the SI2 counter is
counting between TC events, each event resulting in a CONVERT signal.
The value must be between 1 and 2^16 and the duration resulting from
this setting (which depends on the setting for 'CONVERT_source' and
possibly the timing settings for the AI subsystem of the board) must
not be less than 100 ns.


The 'num_scans' member determines the number of scans to be done
during an acquisition. This value must be between 1 and 2^24.


----------------------------------------------------------------------

