@c  Copyright (C) 1999-2009 Jens Thoms Toerring
@c
@c  This file is part of fsc2.
@c
@c  Fsc2 is free software; you can redistribute it and/or modify
@c  it under the terms of the GNU General Public License as published by
@c  the Free Software Foundation; either version 2, or (at your option)
@c  any later version.
@c
@c  Fsc2 is distributed in the hope that it will be useful,
@c  but WITHOUT ANY WARRANTY; without even the implied warranty of
@c  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c  GNU General Public License for more details.
@c
@c  You should have received a copy of the GNU General Public License
@c  along with fsc2; see the file COPYING.  If not, write to
@c  the Free Software Foundation, 59 Temple Place - Suite 330,
@c  Boston, MA 02111-1307, USA.


@node Command Line Options, GUI-fying, Example EDL Scripts, Top
@chapter Command Line Options
@cindex command line options

@ifnottex

Before going into the details of batch processing and listing
@code{fsc2}'s command line options a remark concerning the use of
several instances of @code{fsc2}: Until version 2.4.0 only a single
instance of @code{fsc2} could be run. This limitation was deliberate
in order to avoid having different instances trying to access the same
devices at the same time. With version 2.4.0 this limitation has been
removed and devices instead are "locked" by an instance of @code{fsc2}
while using them, and another instance trying to gain access to an
already locked device will be notified and output a suitable error
message. Devices controlled via GPIB, LAN and serial ports as well as
devices, that are PCI cards, are locked individually (in the case of
GPIB devices by use of an extra program, the "GPIB daemon"
@code{gpibd}, in the other cases via UUCP style lock files). Devices
connected via USB (except USB-serial converters, which are treated
like serial port devices) and via RULBUS currently get locked as
groups, i.e.@: only one instance of @code{fsc2} can access USB or
RULBUS devices. This restriction may be removed in later versions.


@menu
* Batch mode::              Non-supervised operation
* Options summary::         List of all command line options
@end menu

@end ifnottex


@node Batch mode, Options summary, Command Line Options, Command Line Options
@section Batch mode
@cindex batch mode

Under normal circumstances an @code{EDL} script gets loaded into
@code{fsc2} and this script is then executed. During the experiment
@code{fsc2} might expect further user input (e.g.@: the user selecting
file names etc.). When the experiment is finished @code{fsc2} waits for
further instructions by the user.

But sometimes it might be advantageous to pass a whole set of @code{EDL}
scripts to @code{fsc2}, which then get executed one after another
without the need for further user interaction and supervision.  This is
called @strong{batch mode} and gets invoked by starting @code{fsc2} with
the '@code{-B}' option, directly followed by a list of @code{EDL}
scripts to be executed. @code{fsc2} will then try to execute these
@code{EDL} scripts in the order they were specified on the command line
and quit when done.

To make @code{fsc2} run independently of user input it must behave
differently from normal mode in several situations. Here's a hopefully
complete list of all differences that might be expected:
@itemize @bullet
@item
  If one of the @code{EDL} scripts specified on the command line does
  not exist or can't be opened, an error message is printed to the
  (error channel) of the terminal @code{fsc2} was started from and
  the next script from the list is executed.

@item
  If the test of an @code{EDL} script fails with a fatal error an error
  message is printed to the (error channel) of the terminal @code{fsc2}
  was started from and execution of this script is skipped.

@item
  If the test of an @code{EDL} script results in warnings or severe warnings
  it is executed anyway without asking for further confirmation by the
  user. Thus scripts to be run in batch mode should be carefully tested before
  used in this way.

@item
  If the experiment gets stopped due to a fatal error an error message is
  printed to the (error channel) of the terminal @code{fsc2} was started
  from and execution of the next script from the list is scheduled.

@item
  Pressing the @code{Stop} button in the display window stops the
  currently running @code{EDL} script and execution of the next script
  from the list starts automatically.

@item
  In batch mode @code{fsc2} does not query the user for names of
  output file names. Instead, a file name is constructed from the name
  of the currently executed @code{EDL} script and an extension of
  @code{'.batch_output.'}, followed by a unique integer number. See the
  description of the built-in @code{EDL} functions
  @code{@ref{get_file()}}, @code{@ref{open_file()}} and
  @code{@ref{clone_file()}} for the details.

@item
  Device modules, that under normal circumstances ask the user for
  confirmation before starting potentially dangerous operations, will use a
  default answer. This may result in the execution of the script ending
  prematurely, depending on the what the device module takes to be the
  default answer. Take care that this this might deactivate some security
  checks!
@end itemize

@quotation
@cartouche
Because some of the safety mechanisms normally built into @code{fsc2}
must be switched off when running in batch mode it is important to check
the scripts to be used carefully before running them in batch mode.
@end cartouche
@end quotation


@node Options summary, , Batch mode, Command Line Options
@section Options summary
@cindex options summary


@code{fsc2} can be invoked from the command line with the following
syntax:

@strong{@code{              fsc2 [OPTION] [FILE]}}

The square brackets indicate that the options as well as the file name
are optional. @code{FILE} is expected to be an @code{EDL} file. The
available options are:

@table @samp
@item @option{-t}
Runs a syntax check on FILE and quits. No graphic is used and all output is
written to the controlling terminal. No interaction with any device happens.

@item @option{-T}
Starts @code{fsc2} in graphics mode and immediately does a syntax
check on FILE.  When @code{fsc2} is done with the check it waits for
further commands.

@item @option{-S}
Starts @code{fsc2} in graphics mode and immediately does a syntax
check on FILE. If the syntax check does not fail the experiment is
started without the need for further user input.

@item @option{-I}
Starts @code{fsc2} in graphics mode but with the main window being
iconified. After a syntax check the experiment is started immediately.
If the main window is still iconified when the experiment display
window gets closed @code{fsc2} is also quit. On syntax or other
errors in the @code{EDL} script the main window gets automatically
de-iconified so that the error messages become readable.

@item @option{-B}
Starts @code{fsc2} in batch mode, see discussion above.

@item @option{-ng, -nw}
Does both the test run as well as the experiment for the input
@code{EDL} file without using any graphics. Afterwards @code{fsc2}
quits immediately, returning @code{0} on success and @code{1} on
failure. Error messages and warnings get written to the standard
error channel, output of the program to the standard output channel.

In the @code{EDL} script no @code{EDL} functions can be used that
wold require graphics or user interaction - and the script must stop
all by itself since there's no @code{STOP} button (so infinite loops
can't be used).

This mode is mostly useful when for example just a few settings for a device
are to be changed that don't require user interaction and also don't need
graphical output.

@item @option{--delete}
Starts @code{fsc2} in graphics mode and loads FILE (or also tests
and/or starts the program when used in conjunction with the @code{-T}
or @code{-S} flags). The input file will be @strong{automatically
deleted} when @code{fsc2} is done with it, i.e.@: when either
@code{fsc2} exits or a new file is loaded. This flag is only useful
for cases where the input file is a temporary file that needs to be
deleted when it isn't needed anymore, so better be @strong{really
careful}.

@item @option{-h, --help}
Displays a very short help text and exits.

@item @option{-size size}
This option specifies the sizes of the window to be used etc. Use either
@code{Small} for low resolution displays or @code{Large} for high resolution
displays. If not specified the size will default to @code{Small} for
displays with a resolution of less than 1152x870, for all other to
@code{Large}. @code{Small} and @code{Large} can be abbreviated to
@code{S} or @code{s} and @code{L} and @code{l}.

@item @option{-geometry geometry_string}
This option specifies the preferred size and position of the main
window in the form @code{height x width + x-position + y-position},
see also the man page for X for a description of correct formats of
geometry strings.

@item @option{-displayGeometry geometry_string}
Sets the preferred size and position for the display windows, i.e.@: the
windows with the measured data. This setting is used for both the 1D and
2D data display window unless one of the next two options is given.

@item @option{-display1dGeometry geometry_string}
Sets the preferred size and position for the 1D data display windows,
overrides the setting of the @option{-displayGeometry} option.

@item @option{-display2dGeometry geometry_string}
Sets the preferred size and position for the 2D data display windows,
overrides the setting of the @option{-displayGeometry} option.

@item @option{-cutGeometry geometry_string}
Sets the preferred size and position for the window with the
cross-section through a 2D data set.

@item @option{-toolGeometry geometry_string}
Sets the preferred position for the window with the user defined objects
like buttons, sliders and in- and output fields.  Please note that for
this window only the position part of the geometry string is used, its
size is determined by the elements that the @code{EDL} script requires.

@item @option{-browserFontSize number}
Sets the size (in pixels) of the font to be used in both browsers in the
main window.

@item @option{-toolboxFontSize number}
Sets the size (in pixels) of the font to be used for all objects in the
toolbox.

@item @option{-helpFontSize number}
Sets the size (in pixels) of the font to be used for the pop-up help
texts.

@item @option{-fileselectorFontSize number}
Sets the size (in pixels) of the font used in the file selector.

@item @option{-axisFont font}
This option sets the font to be used in the axes in the display window.
You will find the various X fonts in the /usr/lib/X11/fonts directory.
To find out about available X fonts the tools @code{xlsfonts},
@code{xfontsel} and @code{xfd} can be rather useful. When you specify a
font be sure to enclose the font name in quotes if the name contains
characters that the shell might try to expand.

@item @option{-stopMouseButton button_identifier}
Specifies which mouse button has to be used to activate the @code{Stop}
button while the experiment is running. Use the string @code{left} or
the number @code{1} for the left mouse button, @code{middle} or @code{2}
for the middle and @code{right} or @code{3} for the right mouse
button. Per default each of the three mouse buttons can be used.

@item @option{-noCrashMail}
Usually, @code{fsc2} sends an email to the author whenever it
crashes. This email contains informations about the reasons for the
crash as well as the currently loaded @code{EDL} program. If you
would prefer @code{fsc2} @b{not} to send such a mail use this
option.

@item @option{-noBalloons}
Normally, whenever the mouse hovers over a button for some time a
little help message is shown, explaining what the button is supposed to
do. If you get annoyed with this you can use this option to switch off
the display of the help balloons.

@item @option{-httpPort}
This option tells @code{fsc2}'s web server on which port to listen for
incoming connections. Per default the port is 8080, but using this
option a different port (in the range between 1024 and 65535) can be
set.

@end table

All of the above options can also be set from within the
@file{.Xdefaults} or @file{.Xresources} files. To e.g.@: set the size
and position of the main window from within one of these files you
would need a line like
@example
fsc2.geometry:         800x600+200+200
@end example
