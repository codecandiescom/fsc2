Please take the time to read the following carefully before trying to
install and run fsc2.

fsc2 supports too many devices and configurations to use a one-
fits-all compilation process. Thus some manual configuration has
to be done before compilation and installaion can be started. You
may have to set up a number of general options and also parameters
for the devices you want to use may need to be adjusted. But let's
start with what you will definitely need to be able to compile the
whole beast;-)


A) Requirements
===============

The following tools and libraries are needed to compile, install and
run fsc2:

 1) gmake (i.e. the GNU version of 'make')
 2) gcc/g++ (clang may also do)
 3) flex
 4) bison
 5) install
 6) sed
 7) grep
 8) libz (the library for compressing used with gzip)
 9) The XFORMS (shared) library and the properly installed header
    file. You can download all of it from

       http://savannah.nongnu.org/projects/xforms/.

	Then compile and install it. I strongly recommend to use the
    newest available version, which currently is xforms-1.2.4.
    Many Linux distributions also come with ready-made packages
    - often named something like 'libforms-dev' or similar (pick
    the development version, otherwise the required header will be
    missing!)

10) GPIB library (fsc2 can also be compiled and run without it but
    with restricted functionality, see below)


Optionally, you should have

11) mail and sendmail (or similar) installed, or, if you want to use the
    built-in mail agent, the libresolv.so library is required.
12) addr2line
13) perl (version 5.6 or higher) with the pTk (Tk support) package
14) pnmtopng
15) pnmtojpeg
16) If you want to compile fsc2 with the FFT module you also need
    the FFTW library, version 3, which can be downloaded e.g. from
    http://www.fftw.org/

If these are missing the basic functionality is still there (without mail
and addr2line no automatic bug reports can be sent and without Perl you
won't be able to wrap a GUI around EDL scripts and the built-in web server
won't work (which also requires the next two utilities).


To create the complete documentation beside Perl you also need

17) makeinfo
18) install-info (see GNU texinfo)
19) texi2html (at least version 1.78)
20)
11) TeX (if missing no PostScript and PDF documentation is created)
22) convert and identify from the ImageMagick package (or no PostScript
	and PDF documentation will be created)
23) dvips (if missing no PostScript documentation is created)
24) pdftex (if missing no PDF documentation will be created)
25) gzip



A1) GPIB support
----------------

GPIB support requires a library and a driver to interface GPIB cards to
be installed. I'd strongly recommend to use what I will call SLG in
the following (for SourceForge Linux GPIB) and which is now hosted on
SourceForge at

http://linux-gpib.sourceforge.net/

It seems to be rather mature and upports a lot of different
GPIB cards.

You may also be able to stuff to work with my own version (but
which works, as far as I know, only for some ISA cards with 2.0,
2.2 and 2.4 kernels and can be downloaded from

  http://www.physik.fu-berlin.de/~toerring/GPIB.tar.gz

There's also something from National Instruments, to be downloaded
from

  http://www.natinst.com

(but which I nver managed to get to work properly).

From the documentations of the SLG libraries and the one I have writ-
ten it should already be clear that a GPIB configuration file (that
is typically '/etc/gpib.conf') is required for the accompanying libraries
to work correctly, in which all devices to be used with are listed with
their respective properties.

For the NI libraries the GPIB library doesn't need such a configuration file,
but fsc2 does. So you have to create one, following the conventions used in
the configuration files for the LLP and SLG library, which I also (mostly)
used for my library). A typical entry in this file looks like the following

device {
        name        = "TDS744A"
        pad         = 26
        timeout     = 3s
        eos         = '\n'
        set-reos    = no
        set-xeos    = no
        set-bin     = no
        set-eot     = yes
}

It specifies a symbolic name for the device, the primary GPIB address (you
may also specify a secondary GPIB address, following the keyword 'sad'),
the timeout to be used for communication with the device and a few more
settings controlling the determination of the end of messages send to and
read from the device. 'eos' is the character to be used as the end of trans-
mission (EOS) character (none has to be set when no such character is to be
used). When 'set-reos' is set he driver stops reading from a device whenever
the EOS character is encountered in the message, even when the EOI line did
not get raised while receiving the EOS character. When 'set-xeos' is set
the EOI line is automatically raised when the EOS character is found in a
message send to the device (even when there are more characters in the
message). Setting 'set-bin' will make the driver check all 8 bits of each
character for identity with the EOS character, while, when unset, only the
lower 7 bits are tested (the top-most bit is excluded from the comparison).
Finally, setting 'set-eot' makes the driver raise the EOI line automatically 
with the last byte of a message send to a device (which is also the default),
while unsetting it will keep the driver from doing so.

Beside the entries for the devices another one for the GPIB board itself
is required:

device {
        name        = "gpib"
        pad         = 0
        sad         = 0
        master
        file        = "/dev/gpib"
}

Here a symbolic name and the primary and secondary GPIB address are set
for the board. The 'master' flag tells the driver that the board is the
device controlling the GPIB bus and 'file' sets the name of the device
file used for the board.

Only the LLP and SLG libraries supports cards from companies other than
National Instruments (actually, I have been told that my driver for ISA
GPIB cards also works with those from some other companies but I haven't
been able to check that). You may also compile fsc2 without having a GPIB
library, but then devices controlled via the GPIB bus can't be used for
obvious reasons.

Please make sure that the GPIB library you want to use is already compiled
and installed _before_ trying to compile fsc2 (unless you don't need GPIB
support built into fsc2).



A2) Support for other devices
-----------------------------

Devices that are controlled via the serial port (or USB-serial con-
verters) are always supported (at least as long as the variable
'WITHOUT_SERIAL_PORTS isn't set).

"Normal" USB-controlled devices can be used via the libusb package,
either verson 0.1 or 1.0 (which has to be installed on your machine).

Devices controlled via LAN can be used if you have a network card and
networking support enabled in the kernel (which it usually is).

Also devices that are ISA or PCI cards (or connected to dedicated ISA
or PCI card) or are controlled via the Rulbus (Rijksuniversiteit Leiden
BUS). All of these require an additional library and a kernel driver to
be installed prior to building fsc2. If these come from the makers of
 the device (e.g. Roper Scientific Spec-10 CCD camera) please see the
documentation coming with the device on how to do that. For the other
devices the sources for the libraries and kernel drivers are part of
fsc2, see the subdirectories 'me6x00', 'ni6601', 'ni_daq', 'rulbus'
and 'witio_48'). You must create and install the libraries and kernel
drivers before you can make fsc2. Typically it's as easy as going into
the subdirectory, typing "./INSTALL" and answering a few questions.
Please refer to the documentation (README files) in these subdirectories
for more details. After a successful installation fsc2 should be able to
find the libraries and include support for the devices.


B) Security issues
==================

To be able to read from and write to the device files for the devices
fsc2 is supposed to control it needs permissions that often per default
only the root account has. Therefore fsc2 per default gets installed
setuid'ed to root (i.e. it starts running with the privileges of the
root account, i.e. with the user and group ID of the root account).
But most of the time fsc2 drops those privileges and runs with only
the effective user ID (EUID) and group ID (EGID) of the users that
started fsc2, i.e. with the permissions that user normally as. Care
has been taken drop the extra privileges the root account has except
for the few places where either device files are accessed or log files
get written to. The obvious problem is that a single bug in the program
concerning the handling of permissions may allow a user to take over
the machine.


Should you feel uneasy about running a program setuid'ed to root
(and I would sympathize strongly with you if you do, I myself never
do that;-) there are alternatives, but which may requires a bit
of extra work. There are two variables in the Makefile, OWNER and
GROUP, that can be used to avoid running fsc2 with the full per-
missions of the root account. If both are set the program runs
with the UID and GID of the account and group specified by these
variables. If neither of them is set then they default to 'root'
and the program gets setuid'ed and setguid'ed to root, i.e. as in
the default case discussed above. But if only GROUP is set then
the program becomes setgid'ed to this group, i.e. it will run
with the UID of the user but with the GID of the group specified
by GROUP - this may already give it high enough access permissions
for the device files if the device files are set up accordingly
(i.e. the permission bits of all required device files are set to
allow read and write access for members of this group). It's also
possible to specify OWNER alone and in this case the program runs
with the UID of that process butthe GID of the user.


In the most simple case where you didn't set these variables (or both
to 'root') and fsc2 has in principle all permissions the root account
has you don't have to care about the permission settings for the device
files but bugs in the program could result in a local user taking
over the machine.


In all other cases you have to make sure that either the account
the program belongs to or the group it belongs to has the necessary
permissions to read and write the required device files. If both
OWNER and GROUP are set, the device files must be readable and
writable by either that account or that group (or both). If only
OWNER but not GROUP is set they must be accessible by the account
specified by OWNER. And if only GROUP but not OWNER is set the must
be readable and writable by that group. Please note that if you
change the access permissions of the device files on some systems
they may get reset by the system to what it believes to be more
secure, e.g. on a reboot or as part of some daily system maintenance
tasks etc. (or because you use udev and the device files get deleted
on shutdown and re-created on boot - but this can be handled by
setting up udev correctly, i.e. to create the device files with
the necessary permissions and ownerships being set).


One possible scenario is to create an account for fsc2 with extremely
low permissions (even logging in can be disabled) and set USER to that
account, but set GROUP to a group that has read and write access
permissions for the device files that are going to be required. This
could be the 'uucp' (or 'dialout') group that typically has the
necessary permissions for the accessing the device files for the
serial ports. Of course, you need to allow read and write access for
all other device files (e.g. GPIB card, PCI data acquisition cards
etc.) for this group or make the account fsc2 is running under member
of the groups that have read and write access permissions to these
device files.


The way I set up things is to set the OWNER variable to 'nobody'
(a user with the most minimal permissions) and GROUP to either
'uucp' or 'dialout', depending on what are the default group
for the serial port devices files (/dev/tty*). Then I set the
group for all other device files required by fsc2 to the same
group I set GROUP to.


C) Preparing for Installation
=============================

After installing the required tools and libraries (see above) and
extracting the archive with the distribution of fsc2 go into the newly
created directory fsc2. Now you have to set up fsc2 for your system
and requirements. You can use two methods. You either edit the Makefile
directly and change some variables at its top. Alternatively, go into the
'machines' subdirectory and copy the file 'template.nowhere' to a file
with the fully qualified hostname of your machine (i.e. its full name,
including the domain name) as its name. Now edit this file and it will
automatically get evaluated during the make process. This is probably
more convenient: when you edit the Makefile you will have to do it
again each time you install a new version. In contrast the file in the
'machines' subdirectory can just be copied from an existing installation
to a new version and everything should stay the same.


Now follows a description of all the variables that can be set to change
the way fsc2 is created and installed (which is more or less identical
to the comments in the Makefile as well as the template for the machine
file in the 'machine' directory):

Normally, fsc2 and all auxiliary files needed will be installed below
/usr/local (in /usr/local/bin, /usr/local/lib/fsc2, /usr/local/info
and /usr/local/share/doc). To change this location edit the lines
defining the variable 'prefix' in the Makefile or the file you're
setting up for your machine.


The next two variables, OWNER and GROUP, will be used when setting the
owner of all the files that will be installed as well as its group. See
the preceeding section for all the details and security implications.


The variable DEF_INCL_DIR sets a default directory for EDL include files
(see the documentation for the EDL '#INCLUDE' directive for details).


The next lines are for setting the GPIB library that you are going to use.
You may set the first variable, GPIB_LIBRARY either to

  LLP     for the old (Linux Lab Project) library, 
  NI      for the newer National Instruments library (but up until know
          I haven't got that to work correctly),
  NI_OLD  for the old National Instruments library (you can distinguish
          them from the include file they install, if it is ni488.h then
          it's the newer version, if it's ugpib.h it's the older one)
  SLG     for the updated version of the LLP library, now hosted on
          SourceForge
  JTT     for the library I wrote for some ISA GPIB cards
  NONE    if you don't use any GPIB cards

In the last case fsc2 won't be able to run experiments requiring devices
that are controlled via the GPIB bus (but you still can test such EDL
programs). Use this option only if you either want to built a test
version or if all your devices are controlled via other means (i.e via
serial ports, are PCI or ISA cards, Rulbus devices or are controlled
via the LAN).

If you use the SourceForge or the Linux Lab Project driver and library you
also may have to define the name of the GPIB card as it is set in the GPIB
configuration file by defining the variable GPIB_CARD_NAME (the default is
"gpib0").


If you use the National Instruments GPIB driver you can set the location
where fsc2 will expect the GPIB configuration file, gpib.conf (this is
only needed for the National Instruments library, in all other cases fsc2
doesn't need to know about this file). But usually there is no reason to
change the default value, which is /etc/gpib.conf.


While running fsc2 may write out information about the activity on the
GPIB bus into a log file. You can change the default log file /tmp/gpib.log
to something appropriate for your setup (or even to /dev/null). You can also
set the verbosity of the logs by changing the variable GPIB_LOG_LEVEL to
either HIGH, MEDIUM, LOW or OFF. To help me find bugs in the device
modules setting it to HIGH is recommended. But note that the file can
get rather large, so better have it on a partition where there is a lot
of free space. In order not to have it grow indefinitely each time a
new experiment is started the log file is truncated to zero length, so
it contains only information about the last experiment you run.


If the header files for the GPIB library aren't in either '/usr/include'
or '/usr/local/include' you will have to tell fsc2 where to look for
them by setting the variable GPIB_HEADER_DIR accordingly.


The next variable, WITHOUT_SERIAL_PORTS can be used to surpress
support for devices controlled via serial ports and USB-serial
converters. Otherwise the three variables SERIAL_LOCK_DIR,
SERIAL_LOG_FILE and SERIAL_LOG_LEVEL allow finer-grained control.


SERIAL_LOCK_DIR must be a string with the name of the directory where
UUCP type lock files for the serial ports are created (there is a
convention that programs opening a serial port create such a lock file
that contains the process ID (PID) of the program as a decimal ASCII
number, so that other programs can check if the port is already in use
and by whom). According to version 2.2 of the Filesystem Hierarchy
Standard this directory should be '/var/lock', but on old systems also
'/usr/spool/locks' and '/usr/spool/uucp' were commonly used, so this
can be adjusted via this variable. If you don't want lock files for the
serial port to be created simply don't define this variable. A possible
problem arises if you use programs creating lock files not in the HDB
UUCP format (the PID being stored in a ten byte string, left-padded
with spaces and with a trailing newline). In this case fsc2 will not
try to remove stale lock files and instead print an error message to
the terminal that the lock file has to be removed manually.


While running fsc2 may write out information about the activity on the
serial ports into a log file. You can change the default log file
/tmp/serial.log to something appropriate for your setup (or even to
/dev/null). You can also set the verbosity of the logs by changing the
 variable SERIAL_LOG_LEVEL to either HIGH, MEDIUM, LOW or OFF. To help
me find bugs in the device modules setting it to HIGH is recommended.
But note that the file can get rather large, so better have it on a
partition with lots of free space. In order not to have it grow
indefinitely each time a new experiment is started the log file is
truncated to zero length, so it contains only information about the
last experiment you run.


If there are devices controlled via the LAN also a log file will get
generated for keeping track of the communications. Again, you can change
the default log file '/tmp/fsc2_lan.log' to something else(or even to
'/dev/null') via the variable 'LAN_LOG_FILE'. And you can also set the
verbosity of the logs by changing the variable LAN_LOG_LEVEL to either
HIGH, MEDIUM, LOW or OFF.


Via the EDITOR variable you can set the editor that gets invoked by fsc2
by default when the user clicks on the "Edit" button or wants to send a
bug report. The user can still override this setting by setting the
EDITOR environment variable.


By setting the variable BROWSER you can select the default browser to use
when the "Help" button gets pressed and the manual is to be shown.
Currently supported are netscape, mozilla, firefox, opera, konqueror,
galeon, lnyx and w3m (but a user can still override this by setting an
environment variable named BROWSER).


The WITH_NI6601, WITH_PCI_MIO_16E_1, WITH_ME6000, WITH_WITIO_48 and
WITH_RS_SPEC10 variables are only needed when support for the National
Instruments 6601 GPCT or PCI-MIO-16E-1 cards, the Meilhaus Electronic
6000 or 6100 DAC card, the Wasco WITIO-48 DIO card or the Roper
Scientific Spec-10 CCD camera are required. In these cases the lines
where these variables are defined must be uncommented and the
additional variables for the include paths and the exact locations
for the required libraries may have to be changed. Please see the
comments in the Makefile or the template file in the 'machines'
directory for details. Please note that defining WITH_RS_SPEC10 will
lead to a few warnings during the compilation of the corresponding
module of fsc2 since the header files for the pvcam library for
the Roper Scientific Spec-10 CCD have some issues I can't do any-
thing about.


Moreover, support for the National Instruments PCI-MIO-16E-1 and the
6601 GPCT cards, the Meilhaus ME6000 and ME6100 DAQ and the Wasco
WITIO-48 DIO card requires that the drivers and libraries for the
cards (which are part of fsc2) are already successfully installed,
otherwise the corresponding modules can't be built. For support for
the Roper Scientific CCD Spec-10 camera the PVCAM library supplied by
Roper Scientific is required and also must be installed together with
its header files before you should try to compile fsc2.


The WITH_HTTP_SERVER variable tells if support for the web server should
be built into fsc2. Just comment out the line and the web server won't be
available. If the web server gets included into fsc2 the next variable,
DEFAULT_HTTP_PORT, determines on which port the web server will listen for
incoming connections by default (use a number above 1023, lower numbered
ports are only accessible by programs with root privileges). A reasonable
choice is 8080.


The variable NO_MAIL can be defined if you don't wish that an email gets
send automatically to me (or someone else adjustable via the variable
MAIL_ADDRESS, so below) in case the program crashes.


Normally, fsc2 will try to send mails through the standard mail system,
i.e. sendmail or one of the possible replacements. If you don't have
sendmail or a replacement installed but want to send mail anyway you can
built fsc2 to use its built-in mail transport agent. For this define the
variable USE_FSC2_MTA. If you're on a IPv6 network please also define the
variable USE_IPv6.


The final variable to be set is the email address of the person that will
receive bug reports and notifications if fsc2 crashes. Usually, you should
not change this variable except when you apply changes to the program on
your own. In this case sending these kind of mails to me obviously doesn't
make too much sense... Another obvious reason for changing it would be that
the machine isn't connected to the internet.


C1) Device setup
----------------

For each device there exists a configuration file in the @file{config}
subdirectory. In many cases you don't have to change anything there,
but e.g. for devices controlled via a serial port by may have to
set the number of the port in the device's configuration file and
for devices controlled via the LAN its IP number. And then there are
a number of modules that support serveral models of a device series,
and in that case you may have to set the model type in the configuration
file for the device. Please take the time and have a look at the
configuration files for the devices you are planning to use, the
adjustable parameters should be documented in the individual files.



D) Compiling and Installation
=============================


Now you're ready to go into the main directory of the package and type
@code{make}. This may take some time to finish. In a perfect world no
compiler warnings would show up even with lots of checks enabled.
Unfortunately, this can't be always achieved. Use of different versions
of the C library, the tools that are used to automatically create some
of the source code as well as not 100% clean external header files not
under may control makes achieving this goal impossible. Further warnings may
occur when the documentation is created and some of the required tools are
not available. It may even happen that the make process stops with an error
message during this stage (i.e. while making the documentation). This does
*not* mean that the program didn't compile successfully but only that
parts of the documentation could not be created.


Don't try to invoke 'make' from one of the sub-directories. While in
some cases this might work, i.e. things in the sub-directory will be
created, in most cases it won't even work that far.


If you get more than a few warnings (about problems with fsc2, not header
files included by fsc2) during the compilation stage of the program or if
the make process fails completely please send me an email with the output
of make. You can save the output of make to a file, e.g. 'makelog', by
running make with the command line

    make > makelog 2>&1

if you're using the Bourne or Korn shell (sh or ksh) or bash. Use

    make >& makelog

if you use the C shell (csh) or tcsh.


When the compilation of the program succeeds (even though building the
documentation failed at some stage), you can now install the program
with the command

    make install

Normally you will need root privileges to do this. If making the
documentation failed with an error also its installation will fail,
but that's not something to worry too much about...


If you want to you can also try to test your built of fsc2 before
installation by running

    make test

This will make fsc2 run a set of EDL scripts that (hopefully) test most
of its built-in functions at least once. Be prepared for lots of windows
popping up during the test run, displaying some rather strange graphics.
Normally the test should run without any errors, otherwise you probably
should contact me and complain. All these tests don't access any of the
devices, writing a test suite for the supported devices is still on my
to-do list.


    September 4, 2015                   Much luck, Jens

--
  \   Jens Thoms Toerring  ___    jt@toerring.de
   \__________________________    http://www.toerring.de
                                  Hertzbergstr. 28, 12055 Berlin, Germany
                                  Tel.: +49 (0)30 691 64 54
