;;; edl-mod.el.template --- template file for emacs EDL mode 
;;
;;  Copyright (C) 1999-2009 Jens Thoms Törring
;;
;;  This file is part of fsc2.
;;
;;  Fsc2 is free software; you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation; either version 2, or (at your option)
;;  any later version.
;;
;;  Fsc2 is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with fsc2; see the file COPYING.  If not, write to
;;  the Free Software Foundation, 59 Temple Place - Suite 330,
;;  Boston, MA 02111-1307, USA.
;;
;;  This file provides emacs support for editing EDL files.
;;
;;  To get support for EDL mode being loaded automatically for all files
;;  with ;; the extension ".edl" add the following lines to your .emacs
;;  file:
;;  (autoload 'edl-mode "edl-mod.elc"
;;            "edl-mod.el -- editing EDL files with Emacs")
;; (setq auto-mode-alist (append (list (cons "\\.edl\\'" 'edl-mode))
;;                                auto-mode-alist))


(defconst edl-maintainer-address
  "Jens Thoms Törring <jt@toerring.de>")

(defgroup edl nil
  "Major mode for editing EDL source files"
  :group 'edl)

(defcustom edl-mode-hook nil
  "*Hook to be run when EDL mode is started"
  :type 'hook
  :group 'edl)

(defvar edl-tab-width nil
  "Tab width for EDL scripts")

(if edl-tab-width
	()
	(setq edl-tab-width 4))

;; Syntax Table (stolen from c-mode)

(defvar edl-mode-syntax-table nil
  "Syntax table used in EDL-mode buffers")

(if edl-mode-syntax-table
    ()
  	(setq edl-mode-syntax-table (make-syntax-table))
	(modify-syntax-entry ?_   "_"       edl-mode-syntax-table)
	(modify-syntax-entry ?\\  "\\"      edl-mode-syntax-table)
    (modify-syntax-entry ?+   "."       edl-mode-syntax-table)
    (modify-syntax-entry ?-   "."       edl-mode-syntax-table)
    (modify-syntax-entry ?=   "."       edl-mode-syntax-table)
    (modify-syntax-entry ?%   "."       edl-mode-syntax-table)
    (modify-syntax-entry ?<   "."       edl-mode-syntax-table)
    (modify-syntax-entry ?>   "."       edl-mode-syntax-table)
    (modify-syntax-entry ?\(  "()"      edl-mode-syntax-table)
    (modify-syntax-entry ?\)  ")("      edl-mode-syntax-table)
    (modify-syntax-entry ?\{  "(}"      edl-mode-syntax-table)
    (modify-syntax-entry ?\}  "){"      edl-mode-syntax-table)
    (modify-syntax-entry ?\[  "(]"      edl-mode-syntax-table)
    (modify-syntax-entry ?\]  ")["      edl-mode-syntax-table)
    (modify-syntax-entry ?&   "."       edl-mode-syntax-table)
    (modify-syntax-entry ?"   "\""      edl-mode-syntax-table)
    (modify-syntax-entry ?!   "."       edl-mode-syntax-table)
    (modify-syntax-entry ?\'  "."       edl-mode-syntax-table)
	(modify-syntax-entry ?/   ". 124b"  edl-mode-syntax-table)
	(modify-syntax-entry ?*   ". 23"    edl-mode-syntax-table)
	(modify-syntax-entry ?\n  "> b"     edl-mode-syntax-table)
	(modify-syntax-entry ?\^m "> b"     edl-mode-syntax-table)
	(set-syntax-table edl-mode-syntax-table))


;; Various variables for font locking

(defvar edl-comments
  (concat "\\("
		  (mapconcat 
		   'identity
		   '("\\/\\/.*"                                             ; C++ style
			 "\\/\\*\\(\\([^\\*]*\\)\\|\\(\\*[^\\/]\\)*\\)\\*\\/")  ; C style
		   "\\|")
		  "\\)")
  "REGEXP for comments")

(defvar edl-strings
  "\\\"[^\"]*\\\""
  "REGEXP for strings")

(defvar edl-reserved-words
  (concat "\\<\\("
		  (mapconcat 
		   'identity
		   '("P\\(ULSE\\)?_?[0-9]+\\(\\(#[0-9]+\\)?\\|\\.\\|\\b\\)"
			 "PH\\(ASE\\)?\\(_?[12]\\)?_?S\\(ET\\)?\\(U\\(P\\)?\\)?\\(_[0-9]+\\)?:?"
			 "PH\\(ASE\\)?_?C\\(YC\\(LE\\)?\\)?"
			 "PH\\(ASE\\)?_?S\\(EQ\\(UENCE\\)?\\)?\\(_?[0-9]+\\)?"
			 "PH\\(ASE\\)?_?S\\(W\\(ITCH\\)?\\)?_?D\\(EL\\(AY\\)?\\)?\\(_?[12]\\)?"
			 "A\\(CQ\\(UISITION\\)?\\)?_?S\\(EQ\\(UENCE\\)?\\)?\\(_?[XY]\\)?"
			 "M\\(ICRO\\)?_?W\\(AVE\\)?\\(#[0-9]+\\)?"
			 "T\\(RAVELING\\)?_?W\\(AVE\\)?_?T\\(UBE\\)?_?G\\(ATE\\)?\\(#[0-9]+\\)?"
			 "T\\(RAVELING\\)?_?W\\(AVE\\)?_?T\\(UBE\\)?\\(#[0-9]+\\)?"
			 "DET\\(ECTION\\)?_?G\\(ATE\\)?\\(#[0-9]+\\)?"
			 "DET\\(ECTION\\)?\\(#[0-9]+\\)?"
			 "DEF\\(ENSE\\)?\\(#[0-9]+\\)?"
			 "P\\(ULSE\\)?_?SH\\(APE\\(R\\)?\\)?\\(#[0-9]+\\)?"
			 "R\\(ADIO\\)?_?F\\(REQ\\(UENCY\\)?\\)?_?G\\(ATE\\)?\\(#[0-9]+\\)?"
			 "R\\(ADIO\\)?_?F\\(REQ\\(UENCY\\)?\\)?\\(#[0-9]+\\)?"
			 "PH\\(ASE\\)?\\(_?[12]\\)?\\(#[0-9]+\\)?"
			 "O\\(THER\\)?\\(_?[1-4]\\)?\\(#[0-9]+\\)?"
			 "F\\(UNC\\(TION\\)?\\)?"
			 "S\\(TART\\)?"
			 "L\\(EN\\(GTH\\)?\\)?"
			 "D\\(EL\\(TA\\)?\\)?_?S\\(TART\\)?"
			 "D\\(EL\\(TA\\)?\\)?_?L\\(EN\\(GTH\\)?\\)?"
			 "M\\(AX\\(IMUM\\)?\\)?_?L\\(EN\\(GTH\\)?\\)?"
			 "DEL\\(AY\\)?"
			 "G\\(RACE\\)?_?P\\(ERIOD\\)?"
			 "P\\(OD\\)?_?[12]"
			 "P\\(OD\\)?"
			 "CH\\(ANNEL\\)"
			 "CH[0-9]"
			 "CH1[0-5]"
			 "SOURCE_[0-3]"
			 "DIO[1-2]"
			 "DEFAULT_SOURCE"
			 "NEXT_GATE"
			 "MATH[1-3]?"
			 "REF[1-4]"
			 "AUX[12]?"
			 "TRACE_[A-D]"
			 "M[1-4]"
			 "F[1-8]"
			 "LIN\\(E\\)?"
			 "EXT\\(10\\)?"
			 "FUNC_[EF]"
			 "MEM_[CD]"
			 "INV\\(ERT\\(ED\\)?\\)?"
			 "V_?H\\(IGH\\)?"
			 "V_?L\\(OW\\)?"
			 "T\\(IME\\)?_?B\\(ASE\\)?\\(#[0-9]+\\)?"
			 "T\\(RIG\\(GER\\)?\\)?_?M\\(ODE\\)?\\(#[0-9]+\\)?"
			 "MAX\\(IMUM\\)?_?PATT\\(ERN\\)?_?LEN\\(GTH\\)?\\(#[0-9]+\\)?"
			 "MODE"
			 "INT\\(ERN\\(AL\\)?\\)?"
			 "EXT\\(ERN\\(AL\\)?\\)?"
			 "SL\\(OPE\\)?"
			 "NEG\\(ATIVE\\)?"
			 "POS\\(ITIVE\\)?"
			 "LEV\\(EL\\)?"
			 "REP\\(EAT\\)?_?T\\(IME\\)?"
			 "REP\\(EAT\\)?_?F\\(REQ\\(UENCY\\)?\\)?"
			 "WHILE"
			 "UNTIL"
			 "BREAK"
			 "NEXT"
			 "IF"
			 "ELSE"
			 "UNLESS"
			 "REPEAT"
			 "FOR"
			 "FOREVER"
			 "ON"
			 "OFF"
			 "TTL"
			 "ECL"
			 "[+-]?[xX]"
			 "[+-]?[yY]"
			 "[cC][wW]")
		   "\\|")
		  "\\)\\>\\|{\\|}")
  "REGEXP for reserved words")

(defvar edl-section-keywords
  (concat "\\<\\("
		  (mapconcat 
		   'identity
		   '("DEV\\(ICE\\)?S?:"
			 "VAR\\(IABLE\\)?S?:"
			 "ASS\\(IGNMENT\\)?S?:"
			 "PHA\\(SE\\)?S?:"
			 "PREP\\(ARATION\\)?S?:"
			 "EXP\\(ERIMENT\\)?:"
			 "ON_STOP:"
			 "#EXIT"
			 "#exit"
			 "#QUIT"
			 "#quit"
			 "#INCLUDE"
			 "#include")
		   "\\|")
		  "\\)")
  "REGEXP for section keywords")

(defvar edl-unit-keywords
  (concat 
   "[+-]?"                                                     ; sign
   "\\(\\([0-9]+\\(\\.\\([0-9]+\\)?\\)?\\)"                    ; int
   "\\|\\(\\.[0-9]\\)\\)\\([eE][\\+\\-]?[0-9]+\\)?[ 	]?"    ;
   "\\(\\([numkMG]?"
   "\\(s\\|m\\|G\\|V\\|A\\|db\\|dB\\|Hz\\|T\\|K\\|C\\)\\)"
   "\\|cm^-1\\)"
   "\\>")
  "REGEXP for number with unit")

;; Note: the list of built-in functions is put in here when make is run

(defvar edl-built-in-functions
  (concat "\\<\\("
		  (mapconcat 'identity '(BUILTIN_FUNCTION_LIST) "\\|")
		  "\\)\\>")
  "REGEXP for EDL built-in functions")

(defun append-func-number (word)
  (concat word "\\(#[0-9]+\\)?"))

;; Note: the list of device functions is put in here when make is run

(defvar edl-device-functions
  (concat "\\<\\("
		  (mapconcat 'identity 
					 (mapcar 'append-func-number
							 '(DEVICE_FUNCTION_LIST))
					 "\\|")
		  "\\)\\>")
  "REGEXP for EDL device functions")

(defvar edl-extra-operators
  (concat "\\("
		  (mapconcat
		   'identity
		   '("AND"
			 "OR"
			 "NOT"
			 "XOR")
		   "\\|")
		  "\\)")
  "REGEXP for EDL extra operators")

(defvar edl-font-lock-keywords
  (list (cons edl-strings            'font-lock-string-face)
		(cons edl-comments           'font-lock-comment-face)
		(cons edl-section-keywords   'font-lock-warning-face)
		(cons edl-device-functions   'font-lock-function-name-face)
		(cons edl-built-in-functions 'font-lock-builtin-face)
		(cons edl-reserved-words     'font-lock-keyword-face)
		(cons edl-extra-operators    'font-lock-builtin-face)
		(cons edl-unit-keywords      'font-lock-type-face))
  "List of EDL keywords for font locking")

(defun edl-indent-line ()
   "Indent current line of EDL code"
   (interactive)
   (message "%d %d" (current-column) (current-indentation))
   (let ((savep (> (current-column) (current-indentation)))
		 (indent (condition-case nil (max (edl-calculate-indentation) 0)
				   (error 0))))
     (if savep
		 (save-excursion (indent-line-to indent))
		 (indent-line-to indent))))


(defun edl-calculate-indentation ()
  "Return the column to which the current line should be indented"
  (save-excursion          ; don't forget were we started of
	(beginning-of-line)
	(if (bobp)
		0         ; no identation of first line
		(cond
		          ; leave comments alone
		  ((eq (get-text-property (point) 'face) 'font-lock-comment-face)
		   (current-indentation))  ; do nothing if this is a comment
		          ; lines starting with '}' are indented like line with
				  ; corresponding opening '{'
		  ((looking-at "[ \t]*}")
		   (let ((opened (count-matches "{" 0 (point)))
				 (closed (count-matches "}" 0 (point))))
			 (* tab-width (1- (- opened closed)))))
			      ; lines starting with ')' or ']' are indented to the
                  ; position of the opening '(' or '['
  		  ((looking-at "[ \t]*\\(\)\\|\\[\\)")
		   (backward-up-list)
		   (current-column))
		  (t
		          ; go back to enclosing '{', '(' or '[' (if there's one)
		   (backward-up-list)
		   (cond
		          ; if this is '{' indent as far as that line + tab width
			 ((looking-at "{")
			  (beginning-of-line-text)
			  (+ tab-width (current-column)))
			      ; for '(' and '[' indent to behind that + possible spaces
			 ((looking-at "\\(\(\\|\\[\\)")
			  (forward-char)
			  (skip-chars-forward " \t")
			  (current-column))
			      ; nothing matched yet? Don't indent at all.
			 (t
			  0)))))))

;;;###autoload

(defun edl-mode ()
  "Major mode for editing EDL files"

  (interactive)
  (kill-all-local-variables)

  (setq major-mode 'edl-mode)
  (setq mode-name "EDL")  
  (set-syntax-table edl-mode-syntax-table)

  (make-local-variable 'font-lock-defaults)
  (setq font-lock-defaults '(edl-font-lock-keywords nil nil))

  (setq tab-width edl-tab-width)

  (make-local-variable 'indent-line-function)
  (setq indent-line-function 'edl-indent-line)

  ;; this is necessary for 'comment-region'

  (setq comment-start "//")

  (run-hooks 'edl-mode-hook))

(provide 'edl-mode)

;;; edl-mod.el ends here
