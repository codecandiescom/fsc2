#!/usr/bin/perl
# -*- cperl -*-
#
#  Copyright (C) 1999-2012 Jens Thoms Toerring
#
#  This file is part of fsc2.
#
#  Fsc2 is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3, or (at your option)
#  any later version.
#
#  Fsc2 is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


use strict;
use warnings;


my ( $dev, $dev_name, $new_dev, $new_dev_name, $line );
my $kind = -1;

#
# Primary checks
#

die "\nThis program must be started from within the utils subdirectory\n" .
    "of fsc2's main directory and must have the necessary permissions\n" .
    "to write files in the modules and config subdirectory.\n\n"
    unless -d "../modules" and -W "../modules" and
           -d "../config"  and -w "../config"  and
           `pwd` =~ /.\/utils/;


#
# First part: Ask the user which device (s)he wants to duplicate
#

print "\nThis program allows you to automatically create a new device\n" .
      "module from an already existing module. This is necessary only\n" .
      "in cases where two identical devices must be used simultaneously.\n\n" .
      "You will have to enter the name of the device you want to clone\n" .
      "in exactly the same way as it would appear in the DEVICES section\n" .
      "of an EDL program.\n\n" .
      "Do you want to continue [y/n]? ";

while ( <> ) {
    exit if $_ =~ /^no?$/i;
    last if $_ =~ /^y(es)?$/i;
    print "Sorry, I didn't understand your reply.\n" .
          "Do you want to continue [y/n]? ";
}

print "\nName of the device module you want to clone:   ";
$dev = <>;
chomp $dev;

die "Sorry, no module with this name seems to exist.\n"
    unless -e "../config/$dev.conf" and
           -e "../modules/$dev.c";

print "\nPlease enter the name for the new module:      ";

$new_dev = <>;
chomp $new_dev;

die "Sorry, invalid module name, it doesn't consists of just letters\n" .
    "numbers and underscores.\n" unless $new_dev =~ /^\w+$/;

die "Sorry, old and new module name are identical.\n" if $dev eq $new_dev;

die "Sorry, a module with the name $new_dev already seems to exist.\n"
    if -e "../config/$new_dev.conf" or -e "../config/$new_dev.c";

open my $f, '<', "../config/$dev.conf"
    or die "Can't open configuration file $dev.conf.\n";

while ( defined( $line = <$f> ) ) {
    if ( $line =~ /#define\s+DEVICE_NAME\s+"(\w+)"/ ) {
        $dev_name = $1;
        last;
    }
}
close $f;

die "Sorry, can't find device name (a line with #define DEVICE_NAME)\n" .
    "in configuration file ../config/$dev.conf.\n" unless defined $dev_name;

print "\nAlso a device name (to be used in error messages and\n" .
      "possibly in the GPIB configuration file) is needed.\n\n" .
      "Please enter a new device name (the old name is $dev_name):   ";

$new_dev_name = <>;
chomp $new_dev_name;

die "Sorry, the old and the new device name are identical.\n"
    if $dev_name eq $new_dev_name;
die "Sorry, invalid device name, it doesn't consists of just letters\n" .
    "numbers and underscores or starts with a number.\n"
    unless $new_dev =~ /^[A-Za-z_]\w+$/;

print "\nThanks, that's all the informations I needed...\n\n";


#
# Second part: Figure out if this is a simple module, i.e. consisting of just
#              one C file, or a more complicated module that must be made
#              from a set of C files plus a header file. This is done by
#              looking into the module makefile.
#

open $f, '-|', 'cd ..; make -s list_simp_modules'
    or die "Sorry, can't run makefile ../Makefile.\n";

my $list = <$f>;
close $f;

if ( $list =~ /\b$dev\b/ ) {
    make_simple_clone( $dev, $dev_name, $new_dev, $new_dev_name );
} else {
    open my $f, '-|', 'cd ..; make -s list_comp_modules';
    $list = <$f>;
    close $f;
    if ( $list =~ /\b$dev\b/ ) {
        make_comp_clone( $dev, $dev_name, $new_dev, $new_dev_name );
    } else {
        die "Sorry, can't find module $dev.c in module makefile " .
            "../modules/Makefile.\n";
    }
}

#
# Finally append the new device to the device data base
#

rename "../config/Devices", "../config/Devices.old"
    or die "Can't create new files in ../config, please check permissions.\n";
open my $fin, '<', '../config/Devices.old';
open my $fout, '>', '../config/Devices';

while ( defined( $line = <$fin> ) ) {
    print $fout $line;
}
print $fout "\n$new_dev      // added automatically by clone_device\n";

close $fin;
close $fout;

#
# Say good bye to the user
#

print <<'EOT';
Everything worked out well. Now you simply have to re-make fsc2
(just cd back to the main directory and type 'make' and, when
this succeeds, become root and type 'make install').

But before you run 'make' you should take a look at the confi-
guration file ($new_dev.conf the 'config' directory) which
might need some tweaking (e.g. serial port parameters, IP
addresses or model specific settings etc.).

If the device is controlled via the GPIB bus you still have to
update the GPIB configuration file manually (usually, it's
/etc/gpib.conf). Just copy the section for the old device,
replace the device name by '$new_dev_name' and change the GPIB
address to the one of the new device.
EOT

#
# That's it...
#


#####################################################

sub make_simple_clone{
    my ( $dev, $dev_name, $new_dev, $new_dev_name ) = @_;
    my $line;

    replace_hooks_and_h( "../modules/$dev.c", "../modules/$new_dev.c",
                         $dev, $new_dev );
    replace_txt( "../config/$dev.conf", "../config/$new_dev.conf",
                 "\"$dev_name\"", "\"$new_dev_name\"" );

    rename "../modules/Makefile", "../modules/Makefile.old" or die
        "Can't create new files in ../module, please check permissions.\n";
    open $fin, '<', '../modules/Makefile.old';
    open $fout, '>', '../modules/Makefile'
        or die "Can't open modules makefile ../modules/Makefile.\n";

    while ( defined( $line = <$fin> ) ) {
        if ( $line =~ /^\s*simp_modules\s*:*=/ ) {
            print $fout $line if $line =~ /\\$/;
            while ( $line =~ /\\$/ and defined( $line = <$fin> ) ) {
                print $fout $line if $line =~ /\\$/;
            }

            chomp $line;
            print $fout "$line $new_dev\n";
            next;
        }

        print $fout $line;
    }

    close $fin;
    close $fout;
}


#####################################################

sub make_comp_clone{
    my ( $dev, $dev_name, $new_dev, $new_dev_name ) = @_;
    my ( $line, $new_name );

    die "Sorry, file ../modules/$new_dev.h already exists.\n"
        if -e "../modules/$new_dev.h";

    my @fl = get_mod_list( $dev );

    replace_txt( "../config/$dev.conf", "../config/$new_dev.conf",
                 "\"$dev_name\"", "\"$new_dev_name\"" );
    replace_txt( "../modules/$dev.h", "../modules/$new_dev.h",
                 "\"$dev.conf\"", "\"$new_dev.conf\"" );

    my $j = 0;
    for my $fn ( @fl ) {
        if ( $fn eq $dev ) {
            $new_name = $new_dev;
        } else {
            for my $i ( 1..100000 ) {
                ( $new_name = $fn ) =~ s/(.*?)\.c$/$1_$i.c/;
                last unless -e "../modules/$new_name";
            }
        }

        replace_hooks_and_h( "../modules/$fn", "../modules/$new_name",
                             $dev, $new_dev );

        $fl[ $j++ ] = $new_name;
    }

    replace_hooks_and_h( "../modules/$dev.h", "../modules/$new_dev.h",
                         $dev, $new_dev );

    rename "../modules/Makefile", "../modules/Makefile.old" or die
        "Can't create new files in ../module, please check permissions.\n";
    open $fin, '<', '../modules/Makefile.old';
    open $fout, '>', '../modules/Makefile'
        or die "Can't open modules makefile ../modules/Makefile.\n";

    while ( defined( $line = <$fin> ) ) {

        if ( $line =~ /^\s*$dev\s*:*=/ ) {
            print $fout $line;
            while ( $line =~ /\\$/ and defined( $line = <$fin> ) ) {
                print $fout $line;
            }

            print $fout "$new_dev :=";
            for ( @fl ) {
                print $fout " $_";
            }

            print $fout "\n";
            next;
        }

        if ( $line =~ /^\s*comp_modules\s*:*=/ ) {
            print $fout $line if $line =~ /\\$/;
            while ( $line =~ /\\$/ and defined( $line = <$fin> ) ) {
                print $fout $line if $line =~ /\\$/;
            }

            chomp $line;
            print $fout "$line $new_dev\n";
            next;
        }

        print $fout $line;
    }

    close $fin;
    close $fout;
}


#####################################################

sub replace_txt {
    my ( $ofn, $nfn, $os, $ns ) =  @_;

    open my $fin,  '<', $ofn or die "Can't open file $ofn for reading.\n";
    open my $fout, '>', $nfn or die "Can't open file $nfn for writing.\n";

    while ( defined( $line = <$fin> ) ) {
        $line =~ s/$os/$ns/;
        print $fout $line;
    }

    close $fin;
    close $fout;
}


#####################################################

sub replace_hooks_and_h {
    my ( $ofn, $nfn , $dev, $new_dev) = @_;

    open my $fin,  '<', $ofn or die "Can't open file $ofn for reading.\n";
    open my $fout, '>', $nfn or die "Can't open file $nfn for writing.\n";

    while ( defined( $line = <$fin> ) ) {
        $line =~ s/#include\s+\"$dev\.h\"/#include \"$new_dev\.h\"/;
        $line =~ s/#include\s+\"$dev\.conf\"/#include \"$new_dev\.conf\"/;
        $line =~ s/\b$dev\_(init|test|end_of_test|exp|end_of_exp|exit|child_exit)_hook(\W)/$new_dev\_$1_hook$2/g;
        print $fout $line;
    }

    close $fin;
    close $fout;
}


#####################################################

sub get_mod_list {
    my $d = shift;
    my ( $line, $new_line, @list );

    open $f, '<', '../modules/Makefile'
        or die "Can't open modules makefile ../modules/Makefile.\n";

    while ( defined( $line = <$f> ) ) {
        last if $line =~ /^\s*$d\s*:*=/;
    }

    while ( $line =~ /\\$/ and defined( $new_line = <$f> ) ) {
        $line =~ s/\\$/ /;
        $line .= $new_line;
    }
    close $f;

    @list = split /=/, $line;
    @list = split /\s+/, $list[ 1 ];
    splice( @list, 0, 1 ) if $list[ 0 ] =~ /^\s*$/;

    return @list;
}


# Local variables:
# tab-width: 4
# indent-tabs-mode: nil
# End:
