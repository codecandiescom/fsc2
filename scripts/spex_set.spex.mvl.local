#!/usr/bin/perl
# -*- cperl -*-
#
# Copyright (C) 1999-2009 Jens Thoms Toerring
#
# This file is part of fsc2.
#
# Fsc2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Fsc2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fsc2; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

use strict;
use warnings;
use Tk;
use Tk::Balloon;
use File::Temp ':mktemp';
use IO::Handle;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
    if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my %fp = ( -side => 'top',
           -fill => 'x',
           -padx => '2m',
           -pady => '2m' );
my %wp = ( -side => 'left',
           -fill => 'x',
           -expand => 1 );
my %up = ( -side => 'left' );
my $geom;

my $fsc2_how_to_run = "Test program";
my @fsc2_how_to_run = ( "Start experiment",
                        "Test program",
                        "Load into fsc2" );
my $fsc2_main_window = MainWindow->new( -title =>
                               ( split /\./, ( split /\//, $0 )[ -1 ] )[ 0 ] );
my $fsc2_main_frame = $fsc2_main_window->Frame( -relief => "ridge",
                                                -borderwidth => "1m" );
my $fsc2_balloon = $fsc2_main_frame->Balloon( );
my $fsc2_apply_frame = $fsc2_main_window->Frame( );
my $fsc2_apply_button = $fsc2_apply_frame->Button( -text => "Apply",
                                                   -command => \&write_out );
$fsc2_apply_button->bind( "all", "<Alt-a>" => \&write_out );
my $fsc2_quit_button = $fsc2_apply_frame->Button( -text => "Quit",
                 -command => sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                   $geom = $1;
                                   &store_defs;
                                   $fsc2_main_window->destroy } );
$fsc2_quit_button->bind( "all",
                         "<Alt-q>" =>
                                sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                      $geom = $1;
                                      &store_defs;
                                      $fsc2_main_window->destroy } );
$fsc2_apply_frame->pack( -side => "bottom",
                         -fill => "x",
                         -padx => "4m" );

my %WN;
$WN{ tk_frame } = $fsc2_main_frame->Frame( );
$WN{ tk_label } = $WN{ tk_frame }->Label( -text => "Wavenumber\n(see scale at right\nhand side of mono-\nchromator!)",
-width => 20,
-anchor => 'w' );
$WN{ min } = 11000;
$WN{ max } = 31000;
$WN{ value } = get_current_wavenumber( );
$WN{ value } = $WN{ max } if $WN{ value } > $WN{ max };
$WN{ value } = $WN{ min } if $WN{ value } < $WN{ min };

$WN{ tk_entry } = $WN{ tk_frame }->Entry( -textvariable => \$WN{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ float_check( shift,
( defined $WN{ min } ? $WN{ min } : undef ),
( defined $WN{ max } ? $WN{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $WN{ tk_entry },
-balloonmsg  => "Range: [ " . ( defined $WN{ min } ? $WN{ min } : '-inf' ) .
" : " . ( defined $WN{ max } ? $WN{ max } : '+inf' ) . " ]" );
$WN{ tk_unit } = $WN{ tk_frame }->Label( -text => " cm^-1",
-width => 5 );
$WN{ tk_frame }->pack( %fp );
$WN{ tk_label }->pack( %wp );
$WN{ tk_entry }->pack( %wp );
$WN{ tk_unit  }->pack( %up );

$fsc2_main_frame->pack( %fp, -pady => '1m' );

$fsc2_apply_button->pack( %wp, -padx => '5m', -pady => '3m' );
$fsc2_quit_button->pack(  %wp, -padx => '5m', -pady => '3m' );

load_defs( );
$fsc2_main_window->geometry( $geom ) if defined $geom;
MainLoop;


################################################################

sub int_check {
    my ( $new, $min, $max ) = @_;

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $fsc2_apply_button->configure( -state => 'normal' );
     }
     return 1;
}


################################################################

sub float_check {
    my ( $new, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $fsc2_apply_button->configure( -state => 'normal' );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

     return 0;
}


################################################################

sub write_out {
	my $f;

	unless ( open $f, '<', '/usr/local/lib/fsc2/spex232.state' ) {
		show_message( "Couldn't set new wavenumber." );
		return;
	}
	my @lines = <$f>;
	close $f;

	my $i = 0;
	for ( @lines ) {
		if ( /^(#|$)/ ) {
			$i++;
			next ;
		}
		last;
	}

	$lines[ $i ] = sprintf "%.5f nm\n", 1.5e7 / $WN{ value };
	$lines[ ++$i ] = "0.00000 nm\n";

	unless ( open $f, '>', '/usr/local/lib/fsc2/spex232.state' ) {
		show_message( "Couldn't set new wavenumber." );
		return;
	}

	print $f $_ for @lines;
	close $f;

	show_message( "New wavenumber has been set.\n" .
				  "Please don't forget to do a new calibration." );
}


################################################################

sub show_message {
    my $text = shift;

    $fsc2_main_window->messageBox( -icon => 'error',
                                   -type => 'Ok',
                                   -title => 'Error',
                                   -message => $text );
}


################################################################

sub store_defs {
    my $fh;
    my $name = $0;

    $name =~ s|^.*?([^/]+)$|$1|;
    mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
    open( $fh, ">$ENV{ HOME }/.fsc2/$name" ) or return;
    print $fh "# Do not edit - created automatically!\n";

    print $fh "$fsc2_how_to_run\n";

    print $fh "$geom\n" if defined $geom;

    close $fh;
};


################################################################

sub load_defs {
    my $fh;
    my $name = $0;
    my $ne;
    my $found;

    $name =~ s|^.*?([^/]+)$|$1|;
    if ( $ARGV[ 0 ] ) {
        open( $fh, "<$ARGV[ 0 ]" ) or return;
    } else {
        open( $fh, "<$ENV{ HOME }/.fsc2/$name" ) or return;
    }

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @fsc2_how_to_run ) {
        if ( $ne eq $_ ) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $fsc2_how_to_run = $ne;

    goto done_reading unless defined( $ne = <$fh> )
                             and $ne =~ /^\s*([+-]\d+[+-]\d+)\s*$/;
    $geom = $1;

  done_reading:
    close $fh;
};


################################################################

sub get_current_wavenumber {
	open my $f, '<', '/usr/local/lib/fsc2/spex232.state' or return;
	while ( <$f> ) {
		next if /^\s*(#|$)/;
		/^\s*(\d+(\.\d+?)?)\s+nm/;
		close $f;
		return unless $1;
		return sprintf "%.2f", 1.5e7 / $1;
	}
}
