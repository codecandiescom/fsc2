#!/usr/local/bin/fsc2 -S
// -*- edl -*-

/*************************************************************************/
/*  EDL program for running cw-ENDOR test measurements with the 360 GHz  */
/*  spectrometer.                                                        */
/*************************************************************************/


DEVICES:

sr830;                         // load module for the lock-in
ips20_4;                       // load module for the sweep power supply
hp8648b;                       // load module for RF synthesizer


VARIABLES:

freq;
min_freq      =   10 kHz;
max_freq      =    2 GHz;

step_freq     =  500 kHz;
min_step_freq =   10 kHz;
max_step_freq =  100 MHz;

atten;
max_atten     = -136 db;
min_atten     = 14.5 dB;

mod_freq, mod_ampl;
min_mod_freq  = 0 Hz;
max_mod_freq  = 100 kHz;
min_mod_ampl  = 0 Hz;
max_mod_ampl  = 100 kHz;

Syn_State;
current;                       // current through magnet coil

new_freq, new_step_freq, new_mod_freq,
new_mod_ampl, new_atten, new_current;

MAX_POINTS = 20000;            // maximum number of data points
data[ MAX_POINTS, 2 ];         // array of data points (X and Y)
I, J;                          // count of data points
File;                          // file handle for storing data

Pause_State = 1;

/* Variables for all buttons etc. */

Freq, Step_Freq, Mod_Freq, Mod_Ampl, Sweep_Up, Sweep_Stop,
Sweep_Down, POnS, OnOff, Atten, Current, Pause, Save, Clear;


/* Some variables to make the program  easier to read */

STOPPED = 0;
UP = 1;
DOWN = -1;

Sweep_State = STOPPED;


PREPARATIONS:

init_1d( 2, "Points", "Signal [mV]\n(X: red, Y: green)" );


EXPERIMENT:

/* We start with asking the magnet for the current after having made
   sure that the magnet isn't sweeping */

IF magnet_sweep( ) != STOPPED {
	magnet_sweep( STOPPED );
}
current = magnet_field( );

/* Get synthesizer settings */

freq  = synthesizer_frequency( );
atten = synthesizer_attenuation( );
Syn_State = synthesizer_state( );
synthesizer_mod_type( "FM" );
synthesizer_mod_source( "EXT DC" );
mod_ampl = synthesizer_mod_ampl( );

/* Get lock-in setttings and unlock its keyboard */

mod_freq = lockin_ref_freq( );
lockin_ref_level( 1 V );
lockin_lock_keyboard( "OFF" );

/* Create the form with the buttons for sweeping etc. */

hide_toolbox( "ON" );
Freq = input_create( "FLOAT_INPUT", freq / 1 MHz, "RF frequency (in MHz)" );
Step_Freq = input_create( "FLOAT_INPUT", step_freq / 1 kHz,
                          "RF step frequency (in kHz)" );
Mod_Freq = input_create( "FLOAT_INPUT", mod_freq / 1 kHz,
	                     "Modulation frequency (in kHz)" );
Mod_Ampl = input_create( "FLOAT_INPUT", mod_ampl / 1 kHz,
	                     "Modulation amplitude (in kHz)" );
OnOff = button_create( "PUSH_BUTTON", "Toggle RF power on/off" );
button_state( OnOff, Syn_State );
Sweep_Up   = button_create( "RADIO_BUTTON", "Sweep up" );
Sweep_Stop = button_create( "RADIO_BUTTON", Sweep_Up, "Stop sweep" );
Sweep_Down = button_create( "RADIO_BUTTON", Sweep_Up, "Sweep Down" );
button_state( Sweep_Stop, "ON" );
POnS       = button_create( "PUSH_BUTTON", "Pause On Stop" );
button_state( POnS, "ON" );

Atten = input_create( "FLOAT_INPUT", atten, "RF attenuation (in dB)" );
Current = input_create( "FLOAT_INPUT", current, "Set new current (in A)" );

Pause = button_create( "PUSH_BUTTON", "Pause display" );
button_state( Pause, Pause_State );
Save  = button_create( "NORMAL_BUTTON", "Save data" );
Clear = button_create( "NORMAL_BUTTON", "Clear screen" );
hide_toolbox( "OFF" );


/* Now we're done with all preparations and run the experiment within an
   infinite loop */

I = 0;

FOREVER {

	/* Remove curve if "Clear curve" button has been pressed */

	IF button_state( Clear ) {
		clear_curve( );
		I = 0;
	}

	/* If the frequency has been changed set the new frequency */

	IF input_changed( Freq ) {
		new_freq = input_value( Freq ) * 1 MHz;
		IF new_freq >= min_freq AND new_freq <= max_freq {
			freq = synthesizer_frequency( new_freq );
		}
		input_value( Freq, freq /  1 MHz );
	}

	/* Check value of the step frequency */

	IF input_changed( Step_Freq ) {
		new_step_freq = input_value( Step_Freq ) * 1 kHz;
		IF new_step_freq < min_step_freq OR new_step_freq > max_step_freq {
			input_value( Step_Freq, step_freq / 1 kHz );
		} ELSE {
			step_freq = new_step_freq;
		}
	}

	/* Check if the modulation frequency has been changed */

	IF input_changed( Mod_Freq ) {
		new_mod_freq = input_value( Mod_Freq ) * 1 kHz;
		IF new_mod_freq >= min_mod_freq AND new_mod_freq <= max_mod_freq {
			mod_freq = lockin_ref_freq( new_mod_freq );
		}
		input_value( Mod_Freq, mod_freq / 1 kHz );
	}

	/* Check if the modulation amplitude has been changed */

	IF input_changed( Mod_Ampl ) {
		new_mod_ampl = input_value( Mod_Ampl ) * 1 kHz;
		IF new_mod_ampl >= min_mod_ampl AND new_mod_ampl <= max_mod_ampl {
			mod_ampl = synthesizer_mod_ampl( new_mod_ampl );
		}
		input_value( Mod_Ampl, mod_ampl / 1 kHz );
	}

	/* Check if RF power on/off state has changed */

	IF button_state( OnOff ) != Syn_State {
		Syn_State = Syn_State ~ 1;
		synthesizer_state( Syn_State );
	}

	/* Check if attenuation has been changed (and the new value is within
	   the limits) */

	IF input_changed( Atten ) {
		new_atten = input_value( Atten );
		IF new_atten > min_atten OR new_atten < max_atten {
			input_value( Atten, atten );
		} ELSE IF atten != new_atten {
			atten = new_atten;
			synthesizer_attenuation( atten );
		}
	}

	/* Check if a new current has been set - if yes go to the new current
	   after checking that it's within the allowed limits */

	new_current = input_value( Current );
	IF abs( current - new_current ) > 0.01 mA {
		IF new_current > 7.5 A OR new_current < -7.5 A {
			current = magnet_field( );
		} ELSE {
			current = magnet_field( new_current );
		}
		input_value( Current, current );
	}

	/* Check if the Save button has been pressed (but save only as many points
	   has have been measured, not the complete array) */

	IF button_state( Save ) AND I > 0 {
		File = get_file( );
		FOR J = 1 : I {
			fsave( File, "#, #\n", data[ J, 1 ], data[ J, 2 ] );
		}
	}

	/* Check if the pause state has been changed */

	IF I < MAX_POINTS {
		Pause_State = button_state( Pause );
	} ELSE {
	    Pause_State = 1;
	    button_state( Pause, "ON" );
	}

	/* Check if the sweep up button has been pressed and we're not already
	   sweeping up */

	IF  Sweep_State != UP AND button_state( Sweep_Up ) AND
        freq <= max_freq - step_freq AND I < MAX_POINTS {
		Sweep_State = UP;
		draw_marker( I + 1, "YELLOW" );
		button_state( Pause, "OFF" );
	    Pause_State = 0;
	}

	/* Check if the sweep down button has been pressed and we're not already
	   sweeping down */

	IF Sweep_State != DOWN AND button_state( Sweep_Down ) AND
       freq >= min_freq + step_freq AND I < MAX_POINTS {
		Sweep_State = DOWN;
		draw_marker( I + 1, "BLUE" );
		button_state( Pause, "OFF" );
	    Pause_State = 0;
	}

	/* Check if the sweep stop button has been pressed while we're sweeping */

	IF Sweep_State != STOPPED AND button_state( Sweep_Stop ) {
		Sweep_State = STOPPED;
		draw_marker( I + 1, "RED" );
		IF button_state( POnS ) {
			button_state( Pause, "ON" );
			Pause_State = 1;
		}
	}

	/* If pause is on or frequency has been changed go back to start
	   after short sleeping period */

	IF Pause_State {
		wait( 0.25 s );
		NEXT;
	}

	/* Get new data points, if already MAX_POINTS data points have been
	   acquired or sweep has been haltet due to the maximum or minimum
       frequency being reached stop sweep without user intervention */

	wait( lockin_time_constant( ) );
	I += 1;
	data[ I ] = lockin_get_data( 1, 2 );
	display( I, data[ I, 1 ] / 1 mV, 1, I, data[ I, 2 ] / 1 mV, 2 );

	IF Sweep_State == STOPPED {
		NEXT;
	}

	IF ( Sweep_State == UP   AND freq + step_freq > max_freq ) OR
	   ( Sweep_State == DOWN AND freq - step_freq < min_freq ) {
		Sweep_State = STOPPED;
		button_state( Sweep_Stop, "ON" );
		draw_marker( I, "RED" );
		IF button_state( POnS ) {
			button_state( Pause, "ON" );
			Pause_State = 1;
		}
		NEXT;
	}

	IF Sweep_State == UP {
		freq += step_freq;
	} ELSE IF Sweep_State == DOWN {
		freq -= step_freq;
	}

	freq = synthesizer_frequency( freq );
	input_value( Freq, freq /  1 MHz );
}


ON_STOP:

synthesizer_state( "OFF" );
