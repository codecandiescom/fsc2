/* -*-C-*-
 *  Copyright (C) 1999-2009 Jens Thoms Toerring
 *
 *  This file is part of fsc2.
 *
 *  Fsc2 is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  Fsc2 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with fsc2; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 59 Temple Place - Suite 330,
 *  Boston, MA 02111-1307, USA.
 */


#include "fsc2.h"
#include "gpib_if.h"

char gpib_error_msg[ 1024 ];      /* global for GPIB error messages */


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_init( const char * log_file_name  UNUSED_ARG,
           int          log_level      UNUSED_ARG )
{
    strcpy( gpib_error_msg, "No GPIB support compiled into fsc2." );
    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_shutdown( void )
{
    return SUCCESS;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_init_device( const char * device_name  UNUSED_ARG,
                  int *        dev          UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_timeout( int device  UNUSED_ARG,
              int period  UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_clear_device( int device  UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_local( int device  UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_local_lockout( int device  UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_trigger( int device  UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_write( int          device  UNUSED_ARG,
            const char * buffer  UNUSED_ARG,
            long         length  UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

int
gpib_read( int    device  UNUSED_ARG,
           char * buffer  UNUSED_ARG,
           long * length  UNUSED_ARG )
{
    /* Keep the module writers from calling the function anywhere else
       than in the exp- and end_of_exp-hook functions and the EXPERIMENT
       section */

    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );

    return FAILURE;
}


/*--------------------------------------*
 *--------------------------------------*/

void
gpib_log_message( const char * fmt  UNUSED_ARG,
                  ... )
{
    fsc2_assert(    Fsc2_Internals.state == STATE_RUNNING
                 || Fsc2_Internals.state == STATE_FINISHED
                 || Fsc2_Internals.mode  == EXPERIMENT );
}


/*
 * Local variables:
 * tags-file-name: "../TAGS"
 * tab-width: 4
 * indent-tabs-mode: nil
 * End:
 */
