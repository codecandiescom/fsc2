=== START_FIELD float [ -50.0 : 23000.0 ] [ 3200.0 ] "Start field" "G"
=== END_FIELD   float [ -50.0 : 23000.0 ] [ 3500.0 ] "End field"   "G"
=== FIELD_STEP  float [ 0.001 : 100.0 ] [ 1.0 ] "Field step" "G"
=== SIGNAL_START float [ -50.0 : 23000.0 ] [ 3250.0 ]  "Signal start field\n(for laser correction)" "G"
=== PRETRIGGER  float [ 0.0 : 100.0 ] [ 10.0 ] "Pre-trigger" "in %"
=== NUM_AVG menu [ "10", "20", "50", "100", "200", "500", "1000", "2000",  \
===                "5000", "10000", "20000", "50000",  "100000", "200000", \
===                "500000", "1000000" ] [ 1 ] "Number of averages"
=== ACQ_CH menu [ "CH1", "CH2" ] [ 1 ] "Acquisition channel"
=== AVG_CH menu [ "FUNC_E", "FUNC_F" ] [ 1 ] "Averaging channel"
=== TRG_CH menu [ "CH1", "CH2", "EXT", "EXT10" ] [ 3 ] "Trigger channel"
DEVICES:

er032m;                                   // Field controller
lecroy9400;                               // Digitizer


VARIABLES:

start_field = START_FIELD G;             // Start field
end_field   = END_FIELD G;               // End field
=== if START_FIELD < END_FIELD
field_step  = FIELD_STEP G;              // Field step size
=== else
field_step  = - FIELD_STEP G;            // Field step size
=== endif
Num_Traces  = round( abs( start_field - end_field ) / abs( field_step ) ) + 1;
                                         // Number of field points
field[ * ];                              // Current field values

=== if ( START_FIELD < SIGNAL_START and SIGNAL_START < END_FIELD ) or  ( START_FIELD > SIGNAL_START and SIGNAL_START > END_FIELD )
no_signal_max_field = SIGNAL_START G;    // Start of field region with signals
Num_No_Signal_Traces = floor( abs( start_field - no_signal_max_field )
                       / abs( field_step ) );
                                         // No. of traces without signal
=== else
Num_No_Signal_Traces = 0;
=== endif

Num_Avg     = NUM_AVG;                   // Number of averages per trace

Trace_Len;                               // Digitizer trace length
timebase;                                // Digitizer timebase
time_res;                                // Digitizer time resolution
pretrigger = 0.01 * PRETRIGGER;          // Amount of pre-trigger (rel. to
                                         // digitizer trace length)
data[ *, * ];                            // Data of single scan
mdata[ *, * ];                           // Averaged data of all scans
mdata_g[ *, * ];                         // Averaged and corrected data
new_mdata[ * ];                          // New (scan averaged) trace
new_mdata_g[ * ];                        // New (scan averaged and baseline
                                         // corrected) trace
Int_Start, Int_Len;                      // Start point and widthof integrated
                                         // signal
background[ * ];                         // averaged laser background signal
Pretrigger_Points;                       // No. of points before trigger
ground[ * ];                             // baseline offsets for each trace

Scan_No = 0;                                   // Counter for scans
I;                                       // Counter for traces
J;                                       // Misc counter
BG_Count = 0;                            // No. of averaged backgrounds
B1, B2, B3, B4, B5;                      // Toolbox variables
File_p, File_f, File_r, File_d;          // File handle
Scans_Done = 0;                          // Number of finished scans
New_Num_Traces;
new_end_field;
K;


PREPARATIONS:

/* Initialize graphics and set up the magnet */

init_1d( 1, Num_Traces, start_field, field_step, "Field [G]",
         "Integrated Signal [mV]" );
=== if ( START_FIELD < SIGNAL_START and SIGNAL_START < END_FIELD ) or  ( START_FIELD > SIGNAL_START and SIGNAL_START > END_FIELD )
init_2d( 3, 0, Num_Traces, 0, 1, start_field, field_step, "Time [µs]",
         "Field [G]", "Signal [mV]" );
=== else
init_2d( 2, 0, Num_Traces, 0, 1, start_field, field_step, "Time [µs]",
         "Field [G]", "Signal [mV]" );
=== endif

EXPERIMENT:

/* Set up the digitizer - first determine the length of the digitizers traces
   and set up the lengths of a few arrays accordingly */

Trace_Len = digitizer_record_length( ACQ_CH );

background[ Trace_Len ] = 0.0;     // initialize array

/* Now get the timebase and the corresponding time resolution */

timebase = digitizer_timebase( );
time_res = digitizer_time_per_point( );

/* Using the time resolution calculate and set the amount if pre-trigger
   (which has to be adjusted to 1/50 of the timebase) and determine the
   number of points before the trigger */

pretrigger = 0.02 * timebase * round(   pretrigger * time_res
                                      * Trace_Len * 50.0 / timebase );
digitizer_trigger_delay( pretrigger );
Pretrigger_Points = int( pretrigger / time_res );

/* Calculate the start and end point for the integrated signal - the
   integration range should normally start 0.5 us after the trigger and
   extend over 1 us (if the start position is too late we go to one point
   before the end of the trace, if the range is too large we use either 10%
   of the total range or, if even this doesn't work out, everything to the
   very end of the trace) */

Int_Start = Pretrigger_Points + round( 0.5 us / time_res );
Int_Len   = round( 1 us / time_res );

IF Int_Start > Trace_Len {
    Int_Start = Trace_Len - 1;
}

IF Int_Start + Int_Len > Trace_Len {
    Int_Len = Int_Start + 0.1 * Trace_Len < Trace_Len ?
              0.1 * Trace_Len : Trace_Len - Int_Start;
}

/* Correct the x-axis for to the amount of pre-trigger and the timebase */

change_scale_2d( - pretrigger / 1 us, time_res / 1 us );

/* Set up triggering and averaging */

digitizer_trigger_channel( TRG_CH );
digitizer_trigger_mode( "NORM" );

digitizer_averaging( AVG_CH, ACQ_CH, Num_Avg );

/* Create the toolbox with two output field, one for the current scan number
   and one for the current field as well as a push button for stopping the
   experiment at the end of a scan */

hide_toolbox( "ON" );
B1 = output_create( "INT_OUTPUT", "Current scan" );
B2 = output_create( "FLOAT_OUTPUT", "Current field [G]", "%.3f" );
B3 = button_create( "PUSH_BUTTON", "Pause/Continue" );
B4 = button_create( "PUSH_BUTTON", "Stop after end of scan" );
B5 = input_create( "FLOAT_INPUT", end_field, "New end field [G]" );
hide_toolbox( "OFF" );

/* Open files we're going to need */

File_d = get_file( "", "*.dat", "", "", "dat" );
File_p = clone_file( File_d, "dat", "par" );
File_f = clone_file( File_d, "dat", "fld" );
File_r = clone_file( File_d, "dat", "raw" );

/* Now we need two nested loops, the outer loop over the scans and the inner
   loop over the field positions */

FOREVER {

    Scan_No += 1;

    field[ 1 ] = magnet_field( start_field );
    output_value( B1, Scan_No );          // Update the scan count display

	IF Scan_No == 2 {
		input_delete( B5 );
    }

	I = 0;

    WHILE I < Num_Traces {

		I += 1;

        output_value( B2, field[ I ] );   // Update the field value display

		/* During first scan allow the end field to be changed (but only if
		   that makes the difference between start end end field larger) */

        IF Scan_No == 1 {

			mdata[ I, Trace_Len ] = 0.0;      // initialize i-th rows
			mdata_g[ I, Trace_Len ] = 0.0;

			IF input_changed( B5 ) {
				new_end_field = input_value( B5 );
				New_Num_Traces = round(   abs( start_field - new_end_field )
                                        / abs( field_step ) ) + 1;
	            IF New_Num_Traces >= I {
					Num_Traces = New_Num_Traces;
					rescale_2d( Trace_Len, Num_Traces );
					end_field = start_field + ( Num_Traces - 1 ) * field_step;
                }
				input_value( B5, end_field );
			}
        }

        /* Start an acquisition and fetch the resulting curve, then
           immediately sweep up */

        digitizer_start_acquisition( );
        data[ I ] = digitizer_get_curve( AVG_CH );

        IF I != Num_Traces {
            field[ I + 1 ] = magnet_field( field[ I ] + field_step );
        }

        /* Calculate the mean of the data points before the trigger for the
           elimination of baseline drifts */

        IF Pretrigger_Points == 0 {
            ground[ I ] = 0.0;
        } ELSE IF Pretrigger_Points == 1 {
            ground[ I ] = data[ I, 1 ];
        } ELSE {
            ground[ I ] = mean( data[ I, 1 : Pretrigger_Points ] );
        }

=== if ( START_FIELD < SIGNAL_START and SIGNAL_START < END_FIELD ) or  ( START_FIELD > SIGNAL_START and SIGNAL_START > END_FIELD )
        /* While we're still in the field region where no signal is to be
           expected add up the trace for background correction, then draw
           the curves. */

        new_mdata = add_to_average( mdata[ I ], data[ I ], Scan_No );
        mdata_g[ I ] = add_to_average( mdata_g[ I ],
                                       data[ I ] - ground[ I ], Scan_No );

        IF I <= Num_No_Signal_Traces {
            BG_Count += 1;
            background = add_to_average( background, data[ I ] - ground[ I ],
                                         BG_Count );

            display_2d( 1, I, new_mdata / 1 mV, 1,
                        1, I, mdata_g[ I ] / 1 mV, 2 );

            FOR J = 1 : I {
                IF Pretrigger_Points > 0 {
                    new_mdata = mdata_g[ J ] - background;
                    display_1d( J,
                                mean( new_mdata, Int_Start, Int_Len ) / 1 mV );
                    display_2d( 1, J, new_mdata / 1 mV, 3 );
                } ELSE {
                    new_mdata = mdata[ J ] - background;
                    display_1d( J,
                                mean( new_mdata, Int_Start, Int_Len ) / 1 mV );
                    display_2d( 1, J, new_mdata / 1 mV, 3 );
                }
            }
        }

        /* When we're in the field region where signals are to be expected draw
           the raw data, the data corrected for baseline drifts and the data
           with both baseline drift and background correction as well as the
           fully corrected and integrated data */

        IF I > Num_No_Signal_Traces  {
            display_1d( I, mean( mdata_g[ I ] - background,
                           Int_Start, Int_Len ) / 1 mV );
            display_2d( 1, I, new_mdata / 1 mV, 1,
                        1, I, mdata_g[ I ] / 1 mV, 2,
                        1, I, ( mdata_g[ I ] - background ) / 1 mV, 3 );
        }
=== else
        /* Display the raw and the baseline drift corrected data (averaged
           over all scans done so far) as well as the integrated signal */

        new_mdata = add_to_average( mdata[ I ], data[ I ], Scan_No );
        mdata_g[ I ] = add_to_average( mdata_g[ I ],
                                       data[ I ] - ground[ I ], Scan_No );

        display_1d( I, mean( mdata_g[ I ], Int_Start, Int_Len ) / 1 mV );
        display_2d( 1, I, new_mdata / 1 mV, 1,
                    1, I, mdata_g[ I ] / 1 mV, 2 );
=== endif

        WHILE button_state( B3 ) {
            wait( 0.25 s );
        }
    }

    /* Now that we're done with the scan recalculate the new mean of the
       data and reset the field to the start position */

    mdata = add_to_average( mdata, data, Scan_No );

	/* Write out all data we got so far (there are sometimes hardware
	   problems and we need to make sure data are saved for that case) */

	reset_file( File_p );
	fsave( File_p, "Date              : # #\n"
    	           "Start field       = # G\n"
                   "End field         = # G\n"
                   "Field step size   = # G\n"
                   "No. of scans      = #\n"
                   "No. of averages   = #\n"
                   "Signal channel    = ACQ_CH\n"
                   "Averaging channel = AVG_CH\n"
                   "Sensitivity       = # mV\n"
                   "Timebase          = # us\n"
                   "Time resolution   = # ns\n"
                   "Trigger channel   = TRG_CH\n"
                   "Trigger position  = # us\n"
                   "Trigger mode      = NORM\n"
                   "Trigger level     = # V\n"
                   "No. of traces     = #\n"
                   "Trace length      = #\n"
                   "No signal traces  = #\n",
           date( ), time( ), field[ 1 ], field[ Num_Traces ], field_step,
           Scan_No, Num_Avg, digitizer_sensitivity( ACQ_CH ) / 1 mV,
           timebase / 1 us, time_res / 1 ns, pretrigger / 1 us,
           digitizer_trigger_level( ), Num_Traces, Trace_Len,
		   Num_No_Signal_Traces );

    reset_file( File_f );
    save( File_f, field );
    reset_file( File_r );
    save( " ", File_r, mdata );
    reset_file( File_d );
    save( " ", File_d, mdata_g );

    Scans_Done += 1;                      // Update the number of scans done

	/* Wait while the if "Pause" button is active */

    WHILE button_state( B3 ) {
        wait( 0.25 s );
    }

	/* End the exeriment of the "Stop after end of scan button: is active */

    IF button_state( B4 ) {               // Stop on user request
        BREAK;
    }
}


ON_STOP:

/* Clear the contents of all files, we're going to rewrite them */

reset_file( File_d );
reset_file( File_p );
reset_file( File_f );
reset_file( File_r );

fsave( File_p, "Date              : # #\n"
               "Start field       = # G\n"
               "End field         = # G\n"
               "Field step size   = # G\n"
               "No. of scans      = #\n"
               "No. of averages   = #\n"
               "Signal channel    = ACQ_CH\n"
               "Averaging channel = AVG_CH\n"
               "Sensitivity       = # mV\n"
               "Timebase          = # us\n"
               "Time resolution   = # ns\n"
               "Trigger channel   = TRG_CH\n"
               "Trigger position  = # us\n"
               "Trigger mode      = NORM\n"
               "Trigger level     = # V\n"
               "No. of traces     = #\n"
               "Trace length      = #\n"
               "No signal traces  = #\n",
       date( ), time( ), field[ 1 ],
       Scans_Done == 0 ? field[ I - 1 ] : field[ Num_Traces ], field_step,
       Scans_Done == 0 ? 1 : Scans_Done, Num_Avg,
       digitizer_sensitivity( ACQ_CH ) / 1 mV,
       timebase / 1 us, time_res / 1 ns, pretrigger / 1 us,
       digitizer_trigger_level( ), Scans_Done == 0 ? I - 1 : Num_Traces,
       Trace_Len, Num_No_Signal_Traces );

/* Write all (scan averaged if applicable) raw and corrected data to
   the files */

IF Scans_Done == 0 {
    save( File_f, field[ 1 : I - 1 ] );
    save( " ", File_r, data[ 1 : I - 1 ] );
    save( " ", File_d, mdata_g[ 1 : I - 1 ] );
} ELSE {
    save( File_f, field );
    save( " ", File_r, mdata );
    save( " ", File_d, mdata_g );
}

/* Finally ask the user for a comment and write it into the file */

save_comment( File_p );
