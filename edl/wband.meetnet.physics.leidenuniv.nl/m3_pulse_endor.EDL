=== TRIG_MODE menu [ "EXTERNAL", "INTERNAL" ] [ 1 ] "Trigger mode"
=== REP_TIME float [ 0.001 : ] [ 50 ] "Repetition time" "ms"
=== P1_POS int [ 200 : 167772150 ] [ 200 ] "Pos. of 1st MW pulse" "ns"
=== P1_LEN int [ 10 : 167772150 ] [ 100 ] "Length of 1st MW pulse" "ns"
=== P2_LEN int [ 10 : 167772150 ] [ 200 ] "Length of 2nd MW pulse" "ns"
=== P3_LEN int [ 10 : 167772150 ] [ 200 ] "Length of 3rd MW pulse" "ns"
=== P1_P2_DIST int [ 70 : 167772150 ] [ 400 ] "1st to 2nd MW pulse\ndistance (C2C)" "ns"
=== P2_P3_DIST int [ 70 : 167772150 ] [ 2000 ] "2nd to 3rd MW pulse\ndistance (C2C)" "ns"
=== P2_RF_DEL int [ 0 : 167772150 ] [ 100 ] "2nd MW to 1st RF pulse\ndelay (E2E)" "ns"
=== RF_P3_DEL int [ 0 : 167772150 ] [ 100 ] "1st RF to 3rd MW pulse\ndelay (E2E)" "ns"
=== P3_RF2_DIST int [ 200 : 167772150 ] [ 1000 ] "3rd MW to recovery\npulse delay (C2C)" "ns"
=== DET_OFFSET int [ -167772150 : 167772150 ] [ 0 ] "Detection offset" "ns"
=== CREATE_DEFENSE button [ ON ] "Create defense pulse"
=== PULSE_2_DEFENSE float [ 0 : ] [ 50 ] "End of MW pulse to end\nof defense pulse distance" "ns"
=== N_AVG menu [ "1", "3", "10", "30", "100", "300", "1000", \
===              "3000", "10000" ] [ 3 ] "Number of averages"
=== FIELD float [ 0 : 48370.8 ] [ 35000 ] "Field" "G"
=== START_FREQ float [ 0.009 : 1100 ] [ 130 ] "Start frequency" "MHz"
=== END_FREQ float [ 0.009 : 1100 ] [ 160 ] "End frequency" "MHz"
=== FREQ_STEP float [ 0.001 : 1000 ] [ 0.25 ] "Step frequency" "MHz"
=== RF_ATT float [ -140 : 13 ] [ -13 ] "RF Gain" "dBm"
=== ADC_CHANNELS menu [ "0", "1", "0 and 1" ] "ADC channel(s) to use"
=== SHOW_PREV button [ OFF ] "Show pulse preview"
=== WAIT_TIME float [ 0.0 : ] [ 5 ] "Delay between scans" "s"
DEVICES:

ips120_10;
rs_sml01;
rb8509;
rb_pulser_w;


VARIABLES:

repeat_time    = REP_TIME ms;
p1_pos         = P1_POS ns;
p1_to_p2_dist  = P1_P2_DIST ns;
p2_to_p3_dist  = P2_P3_DIST ns;
p1_len         = P1_LEN ns;
p2_len         = P2_LEN ns;
p3_len         = P3_LEN ns;
p2_rf_delay    = P2_RF_DEL ns;
rf_p3_delay    = RF_P3_DEL ns;
det_offset     = DET_OFFSET ns;

start_freq     = START_FREQ MHz;
end_freq       = END_FREQ MHz;
=== if ( START_FREQ <= END_FREQ )
freq_step      = FREQ_STEP MHz;
=== else
freq_step      = - FREQ_STEP MHz;
=== endif
att            = RF_ATT;
freq;

pre_scan_delay = WAIT_TIME s;

field          = FIELD G;
N_Avg          = N_AVG;
N_Points       = ceil( ( end_freq - start_freq ) / freq_step ) + 1;
I = 0;
J = 0;
K;
=== if ( ADC_CHANNELS eq "0 and 1" )
data[ 2, *, *];
avg[ 2, N_Points ];
=== else
data[ *, *];
avg[ N_Points ];
=== endif
File1, File2;
B1, B2;


ASSIGNMENTS:

TIMEBASE: 10 ns;
=== if ( TRIG_MODE eq "EXTERNAL" )
TRIGGER_MODE: EXTERNAL;
=== else
TRIGGER_MODE: TRIG_MODE, REPEAT_TIME = repeat_time;
=== endif


PREPARATIONS:

=== if ! CREATE_DEFENSE
pulser_defense_pulse_mode( "OFF" );
=== else
pulser_minimum_defense_distance( PULSE_2_DEFENSE ns );
=== endif

P1:  FUNCTION = MICROWAVE,
     START    = p1_pos,
     LENGTH   = p1_len;

P2:  FUNCTION = MICROWAVE,
     START    = P1.START + p1_to_p2_dist + 0.5 * ( P1.LENGTH - p2_len ),
     LENGTH   = p2_len;

P3:  FUNCTION = MICROWAVE,
     START    = P2.START + p2_to_p3_dist + 0.5 * ( P2.LENGTH - p3_len ),
     LENGTH   = p3_len;

P4:  FUNCTION = RF,
     START    = P2.START + P2.LENGTH + p2_rf_delay,
     LENGTH   =   p2_to_p3_dist - 0.5 * ( P2.LENGTH + P3.LENGTH )
                - p2_rf_delay - rf_p3_delay;

P5:  FUNCTION = RF,
	 START    = P3.START + 0.5 * ( P3.LENGTH - P4.LENGTH ) + P3_RF2_DIST ns, 
	 LENGTH   = P4.LENGTH;

P6:  FUNCTION = DETECTION,
     START    = P3.START + det_offset + p1_to_p2_dist + 0.5 * P3.LENGTH,
     LENGTH   = 10 ns;

=== if SHOW_PREV
pulser_show_pulses( );
=== endif

=== if ( ADC_CHANNELS eq "0 and 1" )
=== if ( START_FREQ <= END_FREQ )
init_1d( 4, N_Points, start_freq / 1 MHz, freq_step / 1 MHz,
         "RF frequency [MHz]", "Echo amplitude [a.u.]" );
=== else
init_1d( 4, N_Points, end_freq / 1 MHz, - freq_step / 1 MHz,
         "RF frequency [MHz]", "Echo amplitude [a.u.]" );
=== endif
=== else
=== if ( START_FREQ <= END_FREQ )
init_1d( 2, N_Points, start_freq / 1 MHz, freq_step / 1 MHz,
         "RF frequency [MHz]", "Echo amplitude [a.u.]" );
=== else
init_1d( 2, N_Points, end_freq / 1 MHz, - freq_step / 1 MHz,
         "RF frequency [MHz]", "Echo amplitude [a.u.]" );
=== endif
=== endif

EXPERIMENT:
=== if ( TRIG_MODE eq "EXTERNAL" )
print( "Please make sure the repetition time is set correctly!\n" );
=== endif

field = magnet_field( field );

File1 = get_file( "", "*.avg", "", "", "avg" );

synthesizer_attenuation( att );
freq = synthesizer_frequency( start_freq );
synthesizer_state( "ON" );
pulser_state( "ON" );
daq_gain( 4 );

/* Create the toolbox */

hide_toolbox( "ON" );
B1 = output_create( "INT_OUTPUT", "Current scan" );
B2 = button_create( "PUSH_BUTTON", "Stop after end of scan" );
hide_toolbox( "OFF" );

FOREVER {
    freq = synthesizer_frequency( start_freq );
    J += 1;
    output_value( B1, J );

	wait( pre_scan_delay );

    FOR I = 1 : N_Points {
        wait( 1.1 * repeat_time * N_Avg );
=== if ( ADC_CHANNELS eq "0 and 1" )
=== if ( START_FREQ <= END_FREQ )
        data[ 1, J, I ] = daq_get_voltage( CH0 );
        data[ 2, J, I ] = daq_get_voltage( CH1 );
        display_1d( I, data[ 1, J, I ], 1, I, data[ 2, J, I ], 2,
                    I, ( ( J - 1 ) * avg[ 1, I ]  + data[ 1, J, I ] ) / J, 3,
					I, ( ( J - 1 ) * avg[ 2, I ]  + data[ 2, J, I ] ) / J, 4 );
=== else
        data[ 1, J, N_Points - I + 1 ] = daq_get_voltage( CH0 );
        data[ 2, J, N_Points - I + 1 ] = daq_get_voltage( CH1 );
        display_1d( N_Points - I + 1, data[ 1, J, N_Points - I + 1 ], 1,
					N_Points - I + 1, data[ 2, J, N_Points - I + 1 ], 2,
                    N_Points - I + 1, ( ( J - 1 ) * avg[ 1, N_Points - I + 1 ]
                    + data[ 1, J, N_Points - I + 1 ] ) / J, 3,
                    N_Points - I + 1, ( ( J - 1 ) * avg[ 2, N_Points - I + 1 ]
                    + data[ 2, J, N_Points - I + 1 ] ) / J, 4 );
=== endif
=== else
=== if ( START_FREQ <= END_FREQ )
=== if ( ADC_CHANNELS eq "0" )
        data[ J, I ] = daq_get_voltage( CH0 );
=== else
        data[ J, I ] = daq_get_voltage( CH1 );
=== endif
        display_1d( I, data[ J, I ], 1,
                    I, ( ( J - 1 ) * avg[ I ]  + data[ J, I ] ) / J, 2 );
=== else
=== if ( ADC_CHANNELS eq "0" )
        data[ J, N_Points - I + 1 ] = daq_get_voltage( CH0 );
=== else
        data[ J, N_Points - I + 1 ] = daq_get_voltage( CH1 );
=== endif
        display_1d( N_Points - I + 1, data[ J, N_Points - I + 1 ], 1,
                    N_Points - I + 1, ( ( J - 1 ) * avg[ N_Points - I + 1 ]
                    + data[ J, N_Points - I + 1 ] ) / J, 2 );
=== endif
=== endif

=== if ( START_FREQ <= END_FREQ )
        IF I < N_Points {
=== else
        IF I > 1 {
=== endif
			pulser_state( "OFF" );
            freq += freq_step;
            synthesizer_frequency( freq );
			pulser_state( "ON" );
        }
    }

=== if ( ADC_CHANNELS eq "0 and 1" )
    avg[ 1 ] = add_to_average( avg[ 1 ], data[ 1, J ], J );
    avg[ 2 ] = add_to_average( avg[ 2 ], data[ 2, J ], J );
=== else
    avg = add_to_average( avg, data[ J ], J );
=== endif

    IF button_state( B2 ) {
        BREAK;
    }
}

ON_STOP:

synthesizer_state( "OFF" );

IF I != 0 {
    IF J == 1 {
=== if ( START_FREQ <= END_FREQ )
        FOR K = 1 : I - 1 {
=== if ( ADC_CHANNELS eq "0 and 1" )
            fsave( File1, "#,#,#\n",
                   ( start_freq + ( K - 1 ) * freq_step ) / 1 MHz,
                   data[ 1, 1, K ], data[ 2, 1, K ] );
=== else
            fsave( File1, "#,#\n",
                   ( start_freq + ( K - 1 ) * freq_step ) / 1 MHz,
                   data[ 1, K ] );
=== endif
        }
=== else
        FOR K = N_Points - I + 2 : N_Points {
=== if ( ADC_CHANNELS eq "0 and 1" )
            fsave( File1, "#,#,#\n",
                   ( end_freq - ( K - 1 ) * freq_step ) / 1 MHz,
                   data[ 1, 1, K ], data[ 2, 1, K ] );
=== else
            fsave( File1, "#,#\n",
                   ( end_freq - ( K - 1 ) * freq_step ) / 1 MHz,
                   data[ 1, K ] );
=== endif
        }
=== endif
    } ELSE {
        IF I < N_Points {
            J -= 1;
        }

        IF J > 1 {
            File2 = clone_file( File1, "avg", "scans" );
            FOR I = 1 : N_Points {
=== if ( START_FREQ <= END_FREQ )
                fsave( File2, "#",
                       ( start_freq + ( I - 1 ) * freq_step ) / 1 MHz );
=== else
                fsave( File2, "#",
                       ( end_freq - ( I - 1 ) * freq_step ) / 1 MHz );
=== endif
                FOR K = 1 : J {
=== if ( ADC_CHANNELS eq "0 and 1" )
                    fsave( File2, ",#,#", data[ 1, K, I ], data[ 2, K, I ] );
=== else
                    fsave( File2, ",#", data[ K, I ] );
=== endif
                }
                fsave( File2, "\n" );
            }

	        fsave( File2,
				   "\n"
	               "% Date:                     # #\n"
	               "% Script:                   m3_pulse_endor (W-band, Leiden)\n"
	               "% Field:                    # G\n"
	               "% RF Start frequency:       # MHz\n"
	               "% RF End frequency:         # MHz\n"
	               "% RF Frequency step:        # MHz\n"
	               "% RF Gain:                  # dBm\n"
	               "% Repetition time:          # ms\n"
	               "% Length of 1st MW pulse:   # ns\n"
	               "% Length of 2nd MW pulse:   # ns\n"
	               "% Length of 3rd MW pulse:   # ns\n"
				   "% Position of 1st MW pulse: # ns\n"
	               "% P1-P2 separation:         # ns\n"
	               "% P2-P3 separation:         # ns\n"
	               "% 1st RF pulse position:    # ns\n"
	               "% Length of RF pulses:      # ns\n"
		           "% Recovery pulse position:  # ns\n"
		           "% Detection pulse delay:    DET_OFFSET ns\n"
	               "% Number of averages:       >= #\n"
	               "% ADC gain:                 4\n"
				   "% ADC channel(s):           ADC_CHANNELS\n",
	               date( ), time( ), field, start_freq / 1 MHz, freq / 1 MHz,
	               freq_step / 1 MHz, att, repeat_time / 1 ms,
	               int( P1.LENGTH / 1 ns ), int( P2.LENGTH / 1 ns ),
	               int( P3.LENGTH / 1 ns ), int( P1.START / 1 ns ),
				   int( p1_to_p2_dist / 1 ns ), int( p2_to_p3_dist / 1 ns ),
				   int( P4.START / 1 ns ), int( P4.LENGTH / 1 ns ),
				   int( P5.START / 1 ns ), N_Avg );
        }

        FOR I = 1 : N_Points {
=== if ( START_FREQ <= END_FREQ )
=== if ( ADC_CHANNELS eq "0 and 1" )
            fsave( File1, "#,#,#\n",
                   ( start_freq + ( I - 1 ) * freq_step ) / 1 MHz,
				   avg[ 1, I ], avg[ 2, I ] );
=== else
            fsave( File1, "#,#\n",
                   ( start_freq + ( I - 1 ) * freq_step ) / 1 MHz, avg[ I ] );
=== endif
=== else
=== if ( ADC_CHANNELS eq "0 and 1" )
            fsave( File1, "#,#,#\n",
                   ( end_freq - ( I - 1 ) * freq_step ) / 1 MHz,
				   avg[ 1, I ], avg[ 2, I ] );
=== else
            fsave( File1, "#,#\n",
                   ( end_freq - ( I - 1 ) * freq_step ) / 1 MHz, avg[ I ] );
=== endif
=== endif
        }
    }

    fsave( File1,
		   "\n"
           "% Date:                     # #\n"
           "% Script:                   m3_pulse_endor (W-band, Leiden)\n"
           "% Field:                    # G\n"
           "% RF Start frequency:       # MHz\n"
           "% RF End frequency:         # MHz\n"
           "% RF Frequency step:        # MHz\n"
           "% RF Gain:                  # dBm\n"
           "% Repetition time:          # ms\n"
           "% Length of 1st MW pulse:   # ns\n"
           "% Length of 2nd MW pulse:   # ns\n"
           "% Length of 3rd MW pulse:   # ns\n"
		   "% Position of 1st MW pulse: # ns\n
           "% P1-P2 separation:         # ns\n"
           "% P2-P3 separation:         # ns\n"
           "% 1st RF pulse position:    # ns\n"
           "% Length of RF pulses:      # ns\n"
		   "% Recovery pulse position:  # ns\n"
		   "% Detection pulse delay:    DET_OFFSET ns\n"
           "% Number of averages:       >= #\n"
           "% ADC gain:                 4\n"
		   "% ADC channel(s):           ADC_CHANNELS\n",
           date( ), time( ), field, start_freq / 1 MHz, freq / 1 MHz,
           freq_step / 1 MHz, att, repeat_time / 1 ms,
           int( P1.LENGTH / 1 ns ), int( P2.LENGTH / 1 ns ),
           int( P3.LENGTH / 1 ns ), int( P1.START / 1 ns ),
           int( p1_to_p2_dist / 1 ns ), int( p2_to_p3_dist / 1 ns ),
		   int( P4.START / 1 ns ), int( P4.LENGTH / 1 ns ),
		   int( P5.START / 1 ns ), N_Avg );

    save_comment( File1, "%" );
}
