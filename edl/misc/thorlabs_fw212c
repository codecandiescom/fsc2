#!/usr/bin/perl
# -*- cperl -*-
# Generated by fsc2_guify from thorlabs_fw212c.edl on Di 11. Apr 11:40:51 CEST 2017

use strict;
use warnings;
use utf8;
use Tk;
use Tk::Balloon;

my @version = split /\./, $Tk::VERSION;
die "Installed Perl-Tk version is $Tk::VERSION but Tk800.022 is required.\n"
    if $version[ 0 ] + 0.001 * $version[ 1 ] < 800.022;

my %fp = ( -side => 'top',
           -fill => 'x',
           -padx => 10,
           -pady => 5 );
my %wp = ( -side   => 'left',
           -fill   => 'x',
           -expand => 1 );
my %up = ( -side => 'left' );
my $geom;
my $store = 1;

my @VARS;
my $fsc2_how_to_run = 'Start program';
my @fsc2_how_to_run = ( 'Start experiment',
                        'Test program',
                        'Load into fsc2' );
my $fsc2_main_window = MainWindow->new( -title =>
                               ( split /\./, ( split /\//, $0 )[ -1 ] )[ 0 ] );
my $fsc2_main_frame = $fsc2_main_window->Frame( -relief      => 'ridge',
                                                -borderwidth => 5 );
my $fsc2_balloon = $fsc2_main_frame->Balloon( );
my $fsc2_apply_frame = $fsc2_main_window->Frame( );
my $fsc2_apply_button = $fsc2_apply_frame->Button( -text    => 'Apply',
                                                   -command => \&write_out );
$fsc2_apply_button->bind( 'all', '<Alt-a>' => \&write_out );
my $fsc2_quit_button = $fsc2_apply_frame->Button( -text => 'Quit',
                 -command => sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                   $geom = $1;
                                   store_defs( $store );
                                   $fsc2_main_window->destroy } );
$fsc2_quit_button->bind( 'all',
                         '<Alt-q>' =>
                                sub { $fsc2_main_window->geometry =~
                                                   /^\d+x\d+([+-]\d+[+-]\d+)$/;
                                      $geom = $1;
                                      store_defs( $store );
                                      $fsc2_main_window->destroy } );
$fsc2_apply_frame->pack( -side => 'bottom',
                         -fill => 'x',
                         -padx => 20 );

# === POSITION int [ 1:12 ] [ 7 ] "Set position"

my %POSITION;
push @VARS, \%POSITION;
$POSITION{ is_valid } = 1;
$POSITION{ type } = 'int';
$POSITION{ tk_frame } = $fsc2_main_frame->Frame( );
$POSITION{ tk_label } = $POSITION{ tk_frame }->Label( -text => "Set position",
-width => 20,
-anchor => 'w' );
$POSITION{ value } = 7;
$POSITION{ min } = 1;
$POSITION{ max } = 12;
$POSITION{ tk_entry } = $POSITION{ tk_frame }->Entry( -textvariable => \$POSITION{ value },
-width => 10,
-validate => 'key',
-validatecommand => sub{ int_check( shift, \$POSITION{ is_valid },
( defined $POSITION{ min } ? $POSITION{ min } : undef ),
( defined $POSITION{ max } ? $POSITION{ max } : undef ) ); },
-relief => 'sunken' );
$fsc2_balloon->attach( $POSITION{ tk_entry },
-balloonmsg  => 'Range: [ ' . ( defined $POSITION{ min } ? $POSITION{ min } : '-inf' ) . ' : ' . ( defined $POSITION{ max } ? $POSITION{ max } : '+inf' ) . ' ]' . ( $POSITION{ type } =~ /_empty$/ ? ' or leave empty' : '' ) );
$POSITION{ tk_unit } = $POSITION{ tk_frame }->Label( -text => "",
-width => 5 );
$POSITION{ tk_frame }->pack( %fp );
$POSITION{ tk_label }->pack( %wp );
$POSITION{ tk_entry }->pack( %wp );
$POSITION{ tk_unit  }->pack( %up );

# === STATE button [ 0:1 ]  "Open shutter (red = open)"

my %STATE;
push @VARS, \%STATE;
$STATE{ is_valid } = 1;
$STATE{ type } = 'button';
$STATE{ tk_frame } = $fsc2_main_frame->Frame( );
$STATE{ tk_label } = $STATE{ tk_frame }->Label( -text => "Open shutter (red = open)",
-width => 20,
-anchor => 'w' );
$STATE{ value } = 1;
$STATE{ tk_entry } = $STATE{ tk_frame }->Checkbutton( -variable => \$STATE{ value },
-width => 10 );
$STATE{ tk_unit } = $STATE{ tk_frame }->Label( -text => "",
-width => 5 );
$STATE{ tk_frame }->pack( %fp );
$STATE{ tk_label }->pack( %wp );
$STATE{ tk_entry }->pack( %wp );
$STATE{ tk_unit  }->pack( %up );

$fsc2_main_frame->pack( %fp, -pady => '5' );
$fsc2_main_window->Optionmenu( -options      => \@fsc2_how_to_run,
                                -textvariable => \$fsc2_how_to_run,
                              )->pack( -padx => 15,
                                       -pady => 5 );

$fsc2_apply_button->pack( %wp, -padx => 25, -pady => 5 );
$fsc2_quit_button->pack(  %wp, -padx => 25, -pady => 5 );

load_defs( 1 );
$fsc2_main_window->geometry( $geom ) if defined $geom;
MainLoop;


################################################################

sub int_check {
    my ( $new, $is_valid, $min, $max ) = @_;

    $$is_valid = 0;

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $$is_valid = 1;
         check_all_vars( );
     }
     return 1;
}


################################################################

sub int_empty_check {
    my ( $new, $is_valid, $min, $max ) = @_;

    $$is_valid = 0;

    if ( $new =~ /^$/ ) {
        $$is_valid = 1;
        check_all_vars( );
        return 1;
    }

    return 0 if $new =~ /^\+?(\d+)?$/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min >= 0;
    if ( $new =~ /^[+-]?$/ ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
         return 1;
     }

    return 0 unless $new =~ /^[+-]?\d+?$/;

    if ( ( defined $min and $new < $min )
         or ( defined $max and $new > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $$is_valid = 1;
         check_all_vars( );
     }

     return 1;
}


################################################################

sub float_check {
    my ( $new, $is_valid, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    $$is_valid = 0;

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $$is_valid = 1;
            check_all_vars( );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
        $$is_valid = 0;
        check_all_vars( );
        return 1;
     }

     return 0;
}


################################################################

sub string_check {
    my ( $new, $is_valid, $min, $max ) = @_;

    $$is_valid = 0;

    if (    length( $new ) < $min
         or ( defined $max and length( $new ) > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $$is_valid = 1;
         check_all_vars( );
     }
     return 1;
}


################################################################

sub float_empty_check {
    my ( $new, $is_valid, $min, $max ) = @_;
    my $float_rep = '[+-]?((\d+(\.(\d+)?)?)|(\.\d+))([eE][+-]?\d+)?';

    $$is_valid = 0;

    if ( $new =~ /^$/ ) {
        $$is_valid = 1;
        check_all_vars( );
        return 1;
    }

    return 0 if $new =~ /^\+/ and defined $max and $max < 0;
    return 0 if $new =~ /^-/ and defined $min and $min > 0;

    if ( $new =~ /^$float_rep$/ ) {
        if ( ( defined $max and $max < $new ) or
             ( defined $min and $min > $new ) ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
        } else {
            $$is_valid = 1;
            check_all_vars( );
        }
        return 1;
    }

    if ( $new =~ /^[+-]?(\d+)?\.?(\d+)?([Ee][+-]?(\d+)?)?$/ ) {
        $$is_valid = 0;
        check_all_vars( );
        return 1;
    }

    return 0;
}


################################################################

sub string_empty_check {
    my ( $new, $is_valid, $min, $max ) = @_;

    $$is_valid = 0;

    if (    ( length( $new ) < $min and length( $new ) != 0 )
         or ( defined $max and length( $new ) > $max ) ) {
         $fsc2_apply_button->configure( -state => 'disabled' );
     } else {
         $$is_valid = 1;
         check_all_vars( );
     }
     return 1;
}


################################################################

sub check_all_vars {
    for ( @VARS ) {
        if ( ! $_->{ is_valid } ) {
            $fsc2_apply_button->configure( -state => 'disabled' );
            return;
        }
    }

    $fsc2_apply_button->configure( -state => 'normal' );
}


################################################################

sub write_out {
    for ( @VARS ) {
        $_->{ value } = undef
            if $_->{ type } =~ /^(int|float)_empty/ and $_->{ value } eq '';
    }

    open my $fh, '|-:utf8', 'fsc2_' . lc $fsc2_how_to_run
        or die "Can't find utility fsc2_" . lc $fsc2_how_to_run . ".\n";

    my $POSITION = $POSITION{ value };
    my $STATE = $STATE{ value };

    print $fh "DEVICES:
  thorlabs_fw212c;
  mc_1024ls;

VARIABLES:
  Position = $POSITION;
  State = $STATE;


EXPERIMENT:
  print( \"Filter wheel position is #\\n\", filterwheel_position( ) );
  filterwheel_position( Position );
  print( \"Filter wheel position is #\\n\", filterwheel_position( ) );
  dio_value( State );
  #EXIT
";
    close $fh;

    my $text;
    if ( $? != 0 ) {
        if ( $? >> 8 == 255 ) {
            $text = "Internal error.";
        } elsif ( $? >> 8 == 1 ) {
            $text = "Could not start fsc2.";
        } else {
            $text = "Something strange\nis going on here.";
        }

        &show_message( $text ) if $? >> 8 != 0;
    }
}


################################################################

sub show_message {
    my $text = shift;

    $fsc2_main_window->messageBox( -icon    => 'error',
                                   -type    => 'Ok',
                                   -title   => 'Error',
                                   -message => $text );
}


################################################################

sub store_defs {
    my $store_defaults = shift;
    my $fh;
    my $name = $0;

    $name =~ s|^.*?([^/]+)$|$1|;
    mkdir "$ENV{ HOME }/.fsc2", 0777 unless -e "$ENV{ HOME }/.fsc2";
    open $fh, '>:utf8', $ENV{ HOME } . "/.fsc2/$name" or return;
    print $fh "# Do not edit - created automatically!\n";

    goto skip_defaults if ! $store_defaults;

    if (     defined $POSITION{ value }
         and $POSITION{ value } ne ''
         and $POSITION{ value } =~ /^[+-]?\d+$/o
         and ( defined $POSITION{ max } ? $POSITION{ max } >= $POSITION{ value } : 1 )
         and ( defined $POSITION{ min } ? $POSITION{ min } <= $POSITION{ value } : 1 ) ) {
        print $fh "$POSITION{ value }\n";
    } else {
        print $fh "7\n";
    }

    print $fh "$STATE{ value }\n";


  skip_defaults:

    print $fh "$fsc2_how_to_run\n";

    print $fh "$geom\n" if defined $geom;

    close $fh;
};


################################################################

sub load_defs {
    my $store_defaults = shift;
    my $fh;
    my $name = $0;
    my $ne;
    my $found;

    $name =~ s|^.*?([^/]+)$|$1|;
    if ( $ARGV[ 0 ] ) {
        open $fh, '<:utf8', $ARGV[ 0 ] or return;
    } else {
        open $fh, '<:utf8', $ENV{ HOME } . "/.fsc2/$name" or return;
    }

    goto done_reading unless defined( $ne = <$fh> ) and $ne =~ /^#/;

    goto skip_defaults if ! $store_defaults;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^[+-]?\d+$/;
    chomp $ne;
    goto done_reading if    ( defined $POSITION{ max } and $ne > $POSITION{ max } )
                         or ( defined $POSITION{ min } and $ne < $POSITION{ min } );
    $POSITION{ value } = $ne;

    goto done_reading unless defined( $ne = <$fh> ) and $ne =~ /^1|0$/o;
    chomp $ne;
    $STATE{ value } = $ne;

  skip_defaults:

    goto done_reading unless defined( $ne = <$fh> );
    chomp $ne;
    $found = 0;
    for ( @fsc2_how_to_run ) {
        if ( $ne eq $_ ) {
            $found = 1;
            last;
        }
    }
    goto done_reading unless $found;
    $fsc2_how_to_run = $ne;

    goto done_reading unless     defined( $ne = <$fh> )
                             and $ne =~ /^\s*([+-]\d+[+-]\d+)\s*$/;
    $geom = $1;

  done_reading:
    close $fh;
};
