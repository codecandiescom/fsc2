DEVICES:

//pulser;
//gaussmeter;
//magnet;
dg2020_b;
tds754a;


VARIABLES:

timebase = 5 ns;
tau = 300 ns;
dtau = 20 ns;
t_dead = 255 ns;
data[ 2 ];
res;

I, J;
W1, W2;

ASSIGNMENTS:

TIMEBASE:     timebase;
TRIGGER_MODE: INTERNAL, REP_FREQ = 200 Hz;

TWT_GATE:            POD = 8,    V_HIGH = 5 V, V_LOW = 0 V;
DETECTION:           POD = 0,    V_HIGH = 5 V, V_LOW = 0 V;
DETECTION_GATE:      POD = 7,    V_HIGH = 5 V, V_LOW = 0 V;
//PHASE_1:             POD = 1, 2, V_HIGH = 5 V, V_LOW = 0 V;

MICROWAVE:           POD = 1, 2, 3    V_HIGH = 5 V, V_LOW = 0 V, INV,
					 DELAY = 5 ns;


PHASE_SETUP_1:	MW,
				 X: POD = 1,
				-X: POD = 2;


PHASES:

PHASE_SEQUENCE_1     = +x, +x, -x, -x;
PHASE_SEQUENCE_2     = +x, -x, +x, -x;
ACQUISITION_SEQUENCE = +, -, -, +;


PREPARATIONS:

P0:  FUNC        = MW,
	 START       = 200 ns,
	 LENGTH      = 15 ns
	 PHC         = PHS1;

P1:  FUNC     	 = MW,
	 START    	 = P0.START + tau,
	 LENGTH   	 = 15 ns,
	 PHC         = PHS2;

P2:  FUNC        = MW,
	 START       = P1.START + tau
	 LENGTH      = 15 ns,
	 DSTART      = dtau;

P3:  FUNC        = TWT_GATE,
	 START       = 0 ns,
	 LENGTH      = P2.START + P2.LENGTH - 80 ns - P3.START,
	 DLENGTH     = dtau;

P31: FUNC        = TWT_GATE;

P32: FUNC        = TWT_GATE
	 DSTART      = dtau;


P4:  FUNC        = DETECTION,
	 START       = P2.START,
	 LEN         = 10 ns,
	 DSTART      = dtau;

P5:  FUNC        = DETECTION_GATE,
	 START       = P3.START + P3.LENGTH + t_dead,
	 LENGTH      = 500 ns,
	 DSTART      = dtau;


W1 = digitizer_define_window( 400 ns, 30 ns );
W2 = digitizer_define_window( 500 ns, 30 ns );
digitizer_num_averages( 100 );
digitizer_trigger_channel( CH4 );

init_1d( 1, 1024, tau * 1e6, dtau * 1e6, "tau [ us ]",
		 "Echo intensity [ Vs ]" );


EXPERIMENT:


pulser_update( );


save_program( "% " );


FOR I = 1 : 1024 {

	res = 0.0;

	FOR J = 1 : 4 {

		digitizer_start_acquisition( );
		data[ 1 ] = digitizer_get_area( CH1, W1 );
		data[ 2 ] = digitizer_get_area( CH1, W2 );

		IF ( J == 1 | J == 4 ) {
			res = res + ( data[ 1 ] - data[ 2 ] );
		} ELSE {
			res = res - ( data[ 1 ] - data[ 2 ] );
		}

		pulser_next_phase( );
		pulser_update( );
	}

	display( I, res );

	fsave( "#\n", res );

	pulser_shift( );
	pulser_increment( );

	IF ( P3.LENGTH > 5 us ) {
		P31.START  = P3.START;
		P31.LENGTH = P1.START + P1.LENGTH - 80 ns - P31.START;
		P32.START  = P2.START - 200 ns;
		P32.LENGTH = P2.START + P2.LENGTH - 80 ns - P32.START;
		P3.LENGTH = 0 ns;
	}

	pulser_update( );
}
