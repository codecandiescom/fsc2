/* -*-C-*-
 *  Copyright (C) 1999-2011 Jens Thoms Toerring
 *
 *  This file is part of fsc2.
 *
 *  Fsc2 is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3, or (at your option)
 *  any later version.
 *
 *  Fsc2 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include "fsc2_module.h"
#include <medriver.h>

#include "me_dio_#.conf"

const char device_name[ ]  = DEVICE_NAME;
const char generic_type[ ] = DEVICE_TYPE;


static int query_flags[ ]  = { ME_CAPS_DIO_DIR_BIT,
							   ME_CAPS_DIO_DIR_BYTE };
static const char *mode_name[ ] = { "8 1-bit DIO channels",
									"1 8-bit DIO channel", };

enum DIO_MODE {
    DIO_BIT   = 1,
    DIO_BYTE  = 8,
};

enum DIO_DIR {
    DIO_UNKNOWN = 0,
    DIO_IN      = 1,
    DIO_OUT     = 2
};


enum DIO_TYPE {
    DI          = 0,
    DO          = 1,
    DIO         = 2
};


int me_dio_#_init_hook(       void );
int me_dio_#_test_hook(       void );
int me_dio_#_exp_hook(        void );
int me_dio_#_end_of_exp_hook( void );


Var_T * dio_name(        Var_T * v );
Var_T * dio_reserve_dio( Var_T * v );
Var_T * dio_mode(        Var_T * v );
Var_T * dio_value(       Var_T * v );


static void me_dio_#_init( void );
static void me_dio_#_exit( void );
static unsigned long me_dio_#_in( int ch );
static void me_dio_#_out( int           ch,
                        unsigned long val );
static long me_dio_#_translate_channel( long channel );


struct ME_DIO {
    bool is_locked;
    char *reserved_by;
    int dev_no;
    int subdev_no;
    int type;
    bool caps[ 2 ];
    int mode;
    int config_flags;
    int single_flags;
    int max_channels;
    unsigned int dir[ MAX_CHANNELS ];
};


static struct ME_DIO me_dio_#, me_dio_#_saved;


/*--------------------------------------------------------*
 *--------------------------------------------------------*/

int
me_dio_#_init_hook( void )
{
    size_t i;


	Need_MEDRIVER = SET;

    me_dio_#.dev_no    = DEVICE_NUMBER;
    me_dio_#.subdev_no = SUBDEVICE_NUMBER;

    switch ( TYPE )
    {
        case DI :
            me_dio_#.type = ME_TYPE_DI;
            break;

        case DO :
            me_dio_#.type = ME_TYPE_DO;
            break;

        case DIO :
            me_dio_#.type = ME_TYPE_DIO;
            break;

        default:
            print( FATAL, "Invalid device type in configiration file.\n" );
            return 0;
    }

    me_dio_#.max_channels = MAX_CHANNELS;
    me_dio_#.is_locked = UNSET;

    for ( i = 0; i < sizeof query_flags / sizeof *query_flags; i++ )
        me_dio_#.caps[ i ] = CAPABILITIES & query_flags[ i ] ? SET : UNSET;

    for ( i = 0; i < MAX_CHANNELS; i++ )
	{
		if ( me_dio_#.type == ME_TYPE_DI )
			me_dio_#.dir[ i ] = DIO_IN;
		else if ( me_dio_#.type == ME_TYPE_DO )
			me_dio_#.dir[ i ] = DIO_OUT;
		else
			me_dio_#.dir[ i ] = DIO_UNKNOWN;
	}

    me_dio_#.reserved_by = NULL;

	return 1;
}


/*--------------------------------------------------------*
 *--------------------------------------------------------*/

int
me_dio_#_test_hook( void )
{
    me_dio_#_saved = me_dio_#;
	return 1;
}


/*--------------------------------------------------------*
 *--------------------------------------------------------*/

int
me_dio_#_exp_hook( void )
{
    if ( me_dio_#_saved.reserved_by != NULL )
        me_dio_#_saved.reserved_by = T_free( me_dio_#_saved.reserved_by );

    me_dio_# = me_dio_#_saved;
    me_dio_#_init( );
	return 1;
}


/*--------------------------------------------------------*
 *--------------------------------------------------------*/

int
me_dio_#_end_of_exp_hook( void )
{
    me_dio_#_exit( );
    if ( me_dio_#.reserved_by != NULL )
        me_dio_#.reserved_by = T_free( me_dio_#.reserved_by );

	return 1;
}


/*----------------------------------------------------------------*
 * Function returns a string variable with the name of the device
 *----------------------------------------------------------------*/

Var_T *
dio_name( Var_T * v  UNUSED_ARG )
{
    return vars_push( STR_VAR, DEVICE_NAME );
}


/*-----------------------------------------------------------*
 * The module allows to get locks on the DIO. This is done
 * so that another module can reserve a DIO for its own use
 * and the user can't accidentally mess around with the DIO.
 * To get a lock this function must be called with a pass-
 * phrase (usually the device name for the module requesting
 * the lock). If there's also a second argument it must be
 * boolean and if set the function will look the DIO,
 * otherwise it is unlocked.
 * The function never throws an exception, it just returns 1
 * on success (the requested DIO is now locked or unlocked)
 * or 0 if the lock state could not be changed. Trying to
 * lock twice with the same pass-phrase succeeds but is a
 * NOP.
 *-----------------------------------------------------------*/

Var_T *
dio_reserve_dio( Var_T * v )
{
    bool lock_state = SET;


    /* If there's no argument return a value indicating if the DIO is locked */

    if ( v == NULL )
        return vars_push( INT_VAR, me_dio_#.reserved_by ? 1L : 0L );

    /* Get the pass-phrase */

    if ( v->type != STR_VAR )
    {
        print( FATAL, "Argument isn't a string.\n" );
        THROW( EXCEPTION );
    }

    /* The next, optional argument tells if the DIO is to be locked or
       unlocked (if it's missing it defaults to locking the DIO) */

    if ( v->next != NULL )
    {
        lock_state = get_boolean( v->next );
        too_many_arguments( v->next );
    }

    /* Lock or unlock (after checking the pass-phrase) the DIO */

    if ( me_dio_#.reserved_by )
    {
        if ( lock_state == SET )
        {
            if ( ! strcmp( me_dio_#.reserved_by, v->val.sptr ) )
                return vars_push( INT_VAR, 1L );
            else
                return vars_push( INT_VAR, 0L );
        }
        else
        {
            if ( ! strcmp( me_dio_#.reserved_by, v->val.sptr ) )
            {
                me_dio_#.reserved_by = T_free( me_dio_#.reserved_by );
                return vars_push( INT_VAR, 1L );
            }
            else
                return vars_push( INT_VAR, 0L );
        }
    }

    if ( ! lock_state )
        return vars_push( INT_VAR, 1L );

    me_dio_#.reserved_by = T_strdup( v->val.sptr );
    return vars_push( INT_VAR, 1L );
}


/*--------------------------------------------------------------*
 * Function for querying or setting the mode the DIO. Modes are
 * either 1 or 8 (for the number of bits to be used).
 * If the DIO has been reserved, the first argument must be the
 * correct pass-phrase agreed upon in the lock operation.
 *--------------------------------------------------------------*/

Var_T *
dio_mode( Var_T * v )
{
    long mode;
    char *pass = NULL;
    int i;


    if ( FSC2_MODE != TEST && FSC2_MODE != EXPERIMENT )
    {
        print( FATAL, "Function can only be used in EXPERIMENT section.\n" );
        THROW( EXCEPTION );
    }

    /* If the first argument is a string we assume it's a pass-phrase */

    if ( v != NULL && v->type == STR_VAR )
    {
        pass = v->val.sptr;
        if ( v->next == NULL )
        {
            print( FATAL, "Missing argument(s).\n" );
            THROW( EXCEPTION );
        }
        v = v->next;
    }

	/* If there's no (further) argument return the current mode */

	if ( v == NULL )
		return vars_push( INT_VAR, ( long ) me_dio_#.mode );

    /* Get and check the mode */

	mode = get_long( v, "DIO mode" );

    if ( mode != DIO_BIT && mode != DIO_BYTE )
    {
		print( FATAL, "Invalid mode, must be 1 or 8.\n" );
		THROW( EXCEPTION );
	}

    /* If the DIO is locked check the pass-phrase */

    if ( me_dio_#.reserved_by )
    {
        if ( pass == NULL )
        {
            print( FATAL, "DIO is reserved, phase-phrase required.\n" );
            THROW( EXCEPTION );
        }
        else if ( strcmp( me_dio_#.reserved_by, pass ) )
        {
            print( FATAL, "DIO is reserved, wrong phase-phrase.\n" );
            THROW( EXCEPTION );
        }
    }

    too_many_arguments( v );

	/* Check that the mode can be set... */

    if ( mode > me_dio_#.max_channels )
    {
        print( FATAL, "Device does not support %s.\n",
               mode_name[ mode == DIO_BIT ? 0 : 1 ] );
        THROW( EXCEPTION );
    }

    /* ...and set it */

    me_dio_#.mode = mode;

    switch ( mode )
    {
        case DIO_BIT :
            if ( me_dio_#.caps[ 0 ] )
                me_dio_#.config_flags = ME_IO_SINGLE_CONFIG_DIO_BIT;
            else
                me_dio_#.config_flags = ME_IO_SINGLE_CONFIG_DIO_BYTE;
            me_dio_#.single_flags = ME_IO_SINGLE_TYPE_DIO_BIT;
            break;

        case DIO_BYTE :
            me_dio_#.config_flags = ME_IO_SINGLE_CONFIG_DIO_BYTE;
            me_dio_#.single_flags = ME_IO_SINGLE_TYPE_DIO_BYTE;
            break;
    }

    for ( i = 0; i < me_dio_#.max_channels; i++ )
        me_dio_#.dir[ i ] = DIO_UNKNOWN;

    return vars_push( INT_VAR, ( long ) me_dio_#.mode );
}


/*-------------------------------------------------------------
 *-------------------------------------------------------------*/

Var_T *
dio_value( Var_T * v )
{
    long ch;
    long val;
    unsigned long uval = 0;
    char *pass = NULL;


    if ( v == NULL )
    {
        print( FATAL, "Missing arguments.\n" );
        THROW( EXCEPTION );
    }

    /* If the first argument is a string we assume it's a pass-phrase */

    if ( v->type == STR_VAR )
    {
        pass = v->val.sptr;
        if ( v->next == NULL )
        {
            print( FATAL, "Missing arguments.\n" );
            THROW( EXCEPTION );
        }
        v = v->next;
    }

    /* Get and check the channel number */

    ch = me_dio_#_translate_channel( get_strict_long( v, "channel number" ) );

    /* If the DIO is locked check the pass-phrase */

    if ( me_dio_#.reserved_by )
    {
        if ( pass == NULL )
        {
            print( FATAL, "DIO is reserved, phase-phrase required.\n" );
            THROW( EXCEPTION );
        }
        else if ( strcmp( me_dio_#.reserved_by, pass ) )
        {
            print( FATAL, "DIO is reserved, wrong phase-phrase.\n" );
            THROW( EXCEPTION );
        }
    }

    if ( ch < 0 || ch >= ( me_dio_#.mode == 1 ? 8 : 1 ) )
    {
        print( FATAL, "Invalid channel %s\n", Channel_Names[ ch ] );
        THROW( EXCEPTION );
    }

    /* If there's no value to output read the input and return it */

    if ( ( v = vars_pop( v ) ) == NULL )
    {
        if ( me_dio_#.type == ME_TYPE_DO )
        {
            print( FATAL, "Device is a digital output (DO).\n" );
            THROW( EXCEPTION );
        }

        if ( FSC2_MODE == EXPERIMENT )
            uval = me_dio_#_in( ch );

        return vars_push( INT_VAR, ( long ) uval );
    }

    /* Otherwise get the value and check if it's reasonable */

    val = get_strict_long( v, "value to output" );

    too_many_arguments( v );

    if ( me_dio_#.type == ME_TYPE_DI )
    {
        print( FATAL, "Device is a digital input (DI).\n" );
        THROW( EXCEPTION );
    }

    uval = ( unsigned long ) val;

    /* Check if the value is reaonable */

    if (    ( me_dio_#.mode == DIO_BIT  && uval > 1 )
         || ( me_dio_#.mode == DIO_BYTE && uval > 0xFF ) )
    {
        if ( FSC2_MODE != EXPERIMENT )
        {
            print( FATAL, "Output value of %lu too large for %s mode.\n",
				   uval, mode_name[ me_dio_#.mode == DIO_BIT ? 0 : 1 ] );
            THROW( EXCEPTION );
        }
        else
        {
            if ( me_dio_#.mode == DIO_BIT )
                uval &= 1;
            else if ( me_dio_#.mode == DIO_BYTE )
                uval &= 0xFF;

            print( WARN, "Output value of %lu too large for %s mode, "
				   "truncating it to %lu.\n", ( unsigned long ) val,
                   mode_name[ me_dio_#.mode == DIO_BIT ? 0 : 1 ], uval );
        }
    }

    if ( FSC2_MODE == EXPERIMENT )
        me_dio_#_out( ch, uval );

    return vars_push( INT_VAR, ( long ) uval );
}


/*-------------------------------------------------------------
 *-------------------------------------------------------------*/

static void
me_dio_#_init( void )
{
    int type;
    int subtype;
    int caps;
    int ch;


    /* Try to find the device */

    if ( meQuerySubdeviceType( DEVICE_NUMBER, SUBDEVICE_NUMBER,
                               &type, &subtype ) != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetLastMessage( msg, sizeof msg );
        print( FATAL, "Failed to locate DIO: %s\n", msg );
        THROW( EXCEPTION );
    }

    if ( type != me_dio_#.type || subtype != ME_SUBTYPE_SINGLE )
    {
        print( FATAL, "Invalid device type in configuration file.\n" );
        THROW( EXCEPTION );
    }

    /* Query capabilities */

    if ( meQuerySubdeviceCaps( me_dio_#.dev_no, me_dio_#.subdev_no,
                               &caps ) != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetLastMessage( msg, sizeof msg );
        print( FATAL, "Failed to query DIO capabilities: %s\n", msg );
        THROW( EXCEPTION );
    }

    if ( caps != CAPABILITIES )
    {
        print( FATAL, "Invalid setting for capabilities in configuration "
               "file.\n" );
        THROW( EXCEPTION );
    }

    /* Query the number of channels */

    if ( meQueryNumberChannels( me_dio_#.dev_no, me_dio_#.subdev_no,
                                &ch ) != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetLastMessage( msg, sizeof msg );
        print( FATAL, "Failed to query number of DIO channels: %s\n", msg );
        THROW( EXCEPTION );
    }

    if ( ch != me_dio_#.max_channels )
    {
        print( FATAL, "Wrong maximum number of channels in configuration "
               "file.\n" );
        THROW( EXCEPTION );
    }

    /* Try to get a lock on the subdevice */

    if ( meLockSubdevice( me_dio_#.dev_no, me_dio_#.subdev_no,
                          ME_LOCK_SET, ME_LOCK_SUBDEVICE_NO_FLAGS )
                                                          != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetLastMessage( msg, sizeof msg );
        print( FATAL, "Failed to lock DIO: %s\n", msg );
        THROW( EXCEPTION );
    }

    me_dio_#.is_locked = SET;
}


/*-------------------------------------------------------------
 *-------------------------------------------------------------*/

static void
me_dio_#_exit( void )
{
    if (    me_dio_#.is_locked
         && meLockSubdevice( me_dio_#.dev_no, me_dio_#.subdev_no,
                             ME_LOCK_RELEASE, ME_LOCK_SUBDEVICE_NO_FLAGS )
                                                          != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetLastMessage( msg, sizeof msg );
        print( FATAL, "Failed to unlock DIO: %s\n", msg );
    }

    me_dio_#.is_locked = UNSET;
}


/*-------------------------------------------------------------
 *-------------------------------------------------------------*/

static unsigned long
me_dio_#_in( int ch )
{
    int i;
    meIOSingle_t list = { me_dio_#.dev_no, me_dio_#.subdev_no, ch,
                          ME_DIR_INPUT, 0, 0, me_dio_#.single_flags, 0 };

    /* Configure the channel if necessary */

    if (    me_dio_#.dir[ ch ] != DIO_IN
         && meIOSingleConfig( me_dio_#.dev_no, me_dio_#.subdev_no,
                              me_dio_#.caps[ 0 ] ? ch : 0,
                              ME_SINGLE_CONFIG_DIO_INPUT,
                              0, 0, 0, 0, me_dio_#.config_flags )
                                                           != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetLastMessage( msg, sizeof msg );
        print( FATAL, "Error while setting up DIO: %s\n", msg );
        THROW( EXCEPTION );
    }

    if ( me_dio_#.config_flags == ME_IO_SINGLE_CONFIG_DIO_BYTE )
        for ( i = 0; i < me_dio_#.max_channels; i++ )
            me_dio_#.dir[ i ] = DIO_IN;
    else
        me_dio_#.dir[ ch ] = DIO_IN;

    /* Prepare input and send to DIO */

    if ( meIOSingle( &list, 1, ME_IO_SINGLE_NO_FLAGS ) != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetMessage( list.iErrno, msg, sizeof msg );
        print( FATAL, "Error while reading from DIO: %s\n", msg );
        THROW( EXCEPTION );
    }

    return list.iValue;
}


/*-------------------------------------------------------------
 *-------------------------------------------------------------*/

static void
me_dio_#_out( int           ch,
            unsigned long val )
{
    int i;
    meIOSingle_t list = { me_dio_#.dev_no, me_dio_#.subdev_no, ch,
                          ME_DIR_OUTPUT, val, 0, me_dio_#.single_flags, 0 };

    /* Configure the channel if necessary */

    if (    me_dio_#.dir[ ch ] != DIO_OUT
         && meIOSingleConfig( me_dio_#.dev_no, me_dio_#.subdev_no,
                              me_dio_#.caps[ 0 ] ? ch : 0,
                              ME_SINGLE_CONFIG_DIO_OUTPUT,
                              0, 0, 0, 0, me_dio_#.config_flags )
                                                          != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetLastMessage( msg, sizeof msg );
        print( FATAL, "Error while setting up DIO: %s\n", msg );
        THROW( EXCEPTION );
    }

    if ( me_dio_#.config_flags == ME_IO_SINGLE_CONFIG_DIO_BYTE )
        for ( i = 0; i < me_dio_#.max_channels; i++ )
            me_dio_#.dir[ i ] = DIO_OUT;
    else
        me_dio_#.dir[ ch ] = DIO_OUT;

    /* Prepare output and send to DIO */

    if ( meIOSingle( &list, 1, ME_IO_SINGLE_NO_FLAGS ) != ME_ERRNO_SUCCESS )
    {
        char msg[ ME_ERROR_MSG_MAX_COUNT ];

        meErrorGetMessage( list.iErrno, msg, sizeof msg );
        print( FATAL, "Error while writing to DIO: %s\n", msg );
        THROW( EXCEPTION );
    }
}


/*--------------------------------------------------------------*
 * The function is used to translate back and forth between the
 * channel numbers the way the user specifies them in the EDL
 * program and the channel numbers as specified in the header
 * file of the device library.
 *--------------------------------------------------------------*/

static long
me_dio_#_translate_channel( long channel )
{
    long ret;

    switch ( channel )
    {
        case CHANNEL_CH1 :
            ret = 0;
            break;

        case CHANNEL_CH2 :
            ret = 1;
            break;

        case CHANNEL_CH3 :
            ret = 2;
            break;

        case CHANNEL_CH4 :
            ret = 3;
            break;

        case CHANNEL_CH5 :
            ret = 4;
            break;

        case CHANNEL_CH6 :
            ret = 5;
            break;

        case CHANNEL_CH7 :
            ret = 6;
            break;

        case CHANNEL_CH8 :
            ret = 7;
            break;

        case CHANNEL_CH9 :
            ret = 8;
            break;

        case CHANNEL_CH10 :
            ret = 9;
            break;

        case CHANNEL_CH11 :
            ret = 10;
            break;

        case CHANNEL_CH12 :
            ret = 11;
            break;

        case CHANNEL_CH13 :
            ret = 12;
            break;

        case CHANNEL_CH14 :
            ret = 13;
            break;

        case CHANNEL_CH15 :
            ret = 14;
            break;

        case CHANNEL_CH16 :
            ret = 15;
            break;

        case CHANNEL_CH17 :
            ret = 16;
            break;

        case CHANNEL_CH18 :
            ret = 17;
            break;

        case CHANNEL_CH19 :
            ret = 18;
            break;

        case CHANNEL_CH20 :
            ret = 19;
            break;

        case CHANNEL_CH21 :
            ret = 20;
            break;

        case CHANNEL_CH22 :
            ret = 21;
            break;

        case CHANNEL_CH23 :
            ret = 22;
            break;

        case CHANNEL_CH24 :
            ret = 23;
            break;

        case CHANNEL_CH25 :
            ret = 24;
            break;

        case CHANNEL_CH26 :
            ret = 25;
            break;

        case CHANNEL_CH27 :
            ret = 26;
            break;

        case CHANNEL_CH28 :
            ret = 27;
            break;

        case CHANNEL_CH29 :
            ret = 28;
            break;

        case CHANNEL_CH30 :
            ret = 29;
            break;

        case CHANNEL_CH31 :
            ret = 30;
            break;

        case CHANNEL_CH32 :
            ret = 31;
            break;

        default :
            print( FATAL, "Invalid channel channel, DIO has no channel "
                   "named %s, use 'CH1' to 'CH%ld'.\n",
                   Channel_Names[ channel ], MAX_CHANNELS );
            THROW( EXCEPTION );
    }

    if ( ret >= MAX_CHANNELS )
    {
        print( FATAL, "Invalid channel channel, DIO has no channel "
               "named %s, use 'CH1' to 'CH%ld'.\n",
               Channel_Names[ channel ], MAX_CHANNELS );
        THROW( EXCEPTION );
    }

    return ret;
}


/*
 * Local variables:
 * tags-file-name: "../TAGS"
 * tab-width: 4
 * indent-tabs-mode: nil
 * End:
 */
