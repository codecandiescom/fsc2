#!/bin/bash
#
# Copyright (C) 2003-2015 Jens Thoms Toerring
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# To contact the author send email to jt@toerring.de


################################################################
# Utility function

function get_reply( )
{
    test $? -eq 0 || exit 1
    eval $1="`cat /tmp/RULBUS_reply`"
}


################################################################

function get_module_conf()
{
	if [ -e /etc/modules ]
	then
		echo "/etc/modules";
	elif [ -e /etc/modules.conf ]
	then
		echo "/etc/modules.conf"
	elif [ -e /etc/conf.modules ]
	then
		echo "/etc/conf.modules"
	elif [ -e /etc/modules.conf.local ]
	then
	    echo "/etc/modules.conf.local"
	fi
}


################################################################

function get_major()
{
	echo `grep RULBUS_EPP_MAJOR driver/rulbus_epp_autoconf.h | awk '{print $3}'`
}


################################################################
# Ask the user for the module parameters

function do_setup()
{
	if [ $1 -ne 1 ]
	then
		dialog --yesno \
"  Installation of RULBUS (Rijksuniversiteit Leiden BUS)\n\
     parallel port (EPP) interface driver and library\n\n\
You will now be asked a few questions concerning the default\n\
settings for the driver. If you have problems understanding\n\
   what this is all about please read the README file.\n\n\
             Do you want to continue?" 13 66;

        test $? -eq 0 || exit 0
	fi

	# Ask for the default parallel port base address

	REPEAT=1;
	while [ $REPEAT -ne 0 ]
	do
		BASE="0x378";
		dialog --inputbox "\
Enter the default parallel port base address. Typically,\n\
this is either 0x378 (LPT1) or 0x278 (LPT2 and sometimes\n\
0x3BC. Please note that a different parallel port base\n\
address can be set when the module is loaded." \
	    12 64 "$BASE" 2> /tmp/RULBUS_reply

		get_reply BASE
		if [ -n "$BASE" -a -z "`echo $BASE | tr -d '[:digit:] | tr -d 'x''`" ]
		then
			REPEAT=0
		fi
	done

	# Ask for the major device number, it must be between 1 and 254 (or 4094
	# for 2.6 and above) or 0 for a dynamically assigned major device number

	if [ ! $IS_NEW_KERNEL ]
	then
		MAX_MAJOR=254
	else
		MAX_MAJOR=4094
	fi

	REPEAT=1;
	while [ $REPEAT -ne 0 ]
	do
		MAJOR=0;
		dialog --inputbox "\
Select the major device number, pick one between 1 and $MAX_MAJOR\n\
and also compare with/usr/src/linux/Documentation/devices.txt.\n\
Alternatively, specify 0 to use a dynamically assigned major\n\
device number." 12 70 "$MAJOR" 2> /tmp/RULBUS_reply

		get_reply MAJOR
		if [    -n "$MAJOR" \
			 -a -z "`echo $MAJOR | tr -d '[:digit:]'`" \
			 -a $MAJOR -ge 0 \
			 -a $MAJOR -le $MAX_MAJOR ]
		then
			echo "Good"
			REPEAT=0
		fi
	done

	# Finally get user to set the install directory

	PREFIX="/usr/local"
	dialog --inputbox \
"Finally, please enter the place where to install\n\
    the include files and the library:\n" \
    10 58 "$PREFIX" 2> /tmp/RULBUS_reply
	get_reply PREFIX
	PREFIX=${PREFIX%%/}    # strip trailing slashes

	# Show user the values he has selected and give him a last chance to
	# back out

	dialog --yesno "\
You selected the following settings for the driver:\n\n\
      Parallel port base address: $BASE\n\
      Major device number:        $MAJOR\n\
      Install directory:          $PREFIX\n\n\
      Create 'driver/rulbus_epp_autoconf.h'?\n" 12 57

	return $?

}


################################################################
# Create the driver/rulbus_epp_autoconf.h file

function make_auto()
{
	echo "/* Automatically created - change carefully */" > driver/rulbus_epp_autoconf.h
	echo "" >> driver/rulbus_epp_autoconf.h
	echo "#define RULBUS_EPP_MAJOR    $MAJOR" >> driver/rulbus_epp_autoconf.h
	echo "#define RULBUS_EPP_BASE     $BASE"  >> driver/rulbus_epp_autoconf.h
	echo "#define RULBUS_EPP_PREFIX   \"$PREFIX\"" >> driver/rulbus_epp_autoconf.h

}


################################################################
# Run setup of parameters until the user is satisfied

function do_setup_loop()
{
    do_setup $1
    while [ $? -ne  0 ]
	do
        do_setup 1
    done

    make_auto

	# Ask user if she wants the program compiled

    dialog --yesno "\
    Created 'include/autoconfig.h'\n\
 Continue with compiling everything?\n\n\
(You can return to this point anytime\n\
	       you feel like it.)\n" 11 44

	test $? -eq 0 || exit 0
}


################################################################
# Function that starts the make process after some more checks

function do_compile()
{
	# Check that system headers are available

	if [    ! -e $KERNEL_DIR/include/linux/autoconf.h \
		 -a ! -e /usr/include/linux/autoconf.h \
		 -a ! -e $KERNEL_DIR/include/generated/autoconf.h ]
	then
		dialog --msgbox \
"To create the driver for the RULBUS interface the file\n\
$KERNEL_DIR/include/linux/autoconf.h,\n\
$KERNEL_DIR/include/generated/autoconf.h\n\
or /usr/include/linux/autoconf.h, depending on how old\n\
your kernel is, is required. This file contains vital\n\
information about the kernel the module is intended for.\n\
Please also see additonal information in the README file.\n\n\
Unfortunately, the installation can't proceed.\n" 13 62
		exit 1
	fi

	# Compile the driver and the library

	echo "Compiling the driver, please wait..."
	make driver > makelog 2>&1

	if [ $? -ne 0 ]
	then
		dialog --msgbox \
"Sorry, compiling the driver failed.\n\
See \"makelog\" for the reasons.\n" 7 42;
    	exit 1;
	fi

	echo "Compiling the library, please wait..."
	make lib >> makelog 2>&1

	if [ $? -ne 0 ]
	then
		dialog --msgbox \
"  Sorry, compiling the library failed.\n\
See \"makelog\" for the reasons.\n" 7 45;
    	exit 1;
	fi

}


################################################################

function install_lsb()
{
	dialog --yesno "\
Do you want me to copy the init script 'utils/rulbus_epp'\n\
to the init directory '/etc/init.d' and create the\n\
necessary runlevel links so that the RULBUS EPP module\n\
gets loaded at boot time and the device files are\n\
             created automatically?" 9 65

	if [ $? -eq 0 ]
	then
		if [ -e /etc/init.d/rulbus_epp ]
		then
			if [ -e /lib/lsb/remove_initd ]
			then
				/lib/lsb/remove_initd /etc/init.d/rulbus_epp > /dev/null 2>&1
			else
				/usr/lib/lsb/remove_initd /etc/init.d/rulbus_epp > /dev/null 2>&1
			fi
			rm -f /etc/init.d/rulbus_epp
		fi
		install -m 744 utils/rulbus_epp /etc/init.d/rulbus_epp
		if [ -e /lib/lsb/install_initd ]
		then
			/lib/lsb/install_initd /etc/init.d/rulbus_epp
		else
			/usr/lib/lsb/install_initd /etc/init.d/rulbus_epp
		fi
		dialog --msgbox "\
Unless you reboot the system (which is *not* required)\n\
please run the command\n\
\n\
         /etc/init.d/rulbus_epp start\n\
\n\
    to load the module and create device files.\n\
    If the module is already loaded please use\n\
\n\
         /etc/init.d/rulbus_epp restart\n\
\n\
      to replace it by the new version." 16 60
	fi
}


################################################################

function install_update_rc()
{
	dialog --yesno "\
Do you want me to copy the init script 'utils/rulbus_epp'\n\
to the init directory '/etc/init.d' and create the\n\
necessary runlevel links so that the RULBUS EPP module\n\
gets loaded at boot time and the device files are\n\
             created automatically?" 9 65

	if [ $? -eq 0 ]
	then
		install -m 744 utils/rulbus_epp /etc/init.d/rulbus_epp
		update-rc.d rulbus_epp defaults

		dialog --msgbox "\
Unless you reboot the system (which is *not* required)\n\
please run the command\n\
\n\
         /etc/init.d/rulbus_epp start\n\
\n\
    to load the module and create device files.\n\
    If the module is already loaded please use\n\
\n\
         /etc/init.d/rulbus_epp restart\n\
\n\
      to replace it by the new version." 16 60
	fi
}


################################################################
# Does everything needed for the installation

function do_install()
{
	# Check that user has the necessary permissions for installation

	if [ `id -u` != "0" ]
	then
		dialog --msgbox \
"For installation you need root privileges.\n\
Please become root (or run 'INSTALL' with\n\
'sudo') to continue with the installation.\n" 7 48
		exit 0;
	fi

	MAJOR=$(get_major)
	MODULECONF=$(get_module_conf)

	install_lib
	install_driver
	install_device_files
	install_modules_conf
	install_init_script
	update_dep
	load_module
}


################################################################
# Installs the library

function install_lib()
{
	# Ask user if he wants to install the library

	PREFIX=`grep RULBUS_EPP_PREFIX driver/rulbus_epp_autoconf.h | sed 's/[^\"]*//' | tr -d \"`

	dialog --yesno \
"Do you want to install the library? This involves\n\
copying the following files, if necessary creating\n\
directories that don't exist:\n\n\
 include/rulbus.h     => $PREFIX/include/rulbus.h\n\
 lib/librulbus.a      => $PREFIX/lib/librulbus.a\n\
 lib/librulbus.so     => $PREFIX/lib/librulbus.so" 12 74

	test $? -eq 0 || return

	# Do the basic installation (covered by the makefile)

	make install_lib >> makelog 2>&1
	if [ $? -ne 0 ]
	then
		dialog --msgbox \
"Sorry, installation of libarary failed.\n\
See \"makelog\" for the reasons.\n" 7 45;
    	exit 1
	fi
}


################################################################
# Installs the kernel module

function install_driver()
{
	dkms > /dev/null 2>&1
	if [ $? -eq 0 ]
	then
		dialog --yesno \
"Do you want to install the device driver using dkms?" 5 60
        if [ $? -eq 0 ]
		then
			install_dkms
		else
			install_driver_mech
		fi
	else
		install_driver_mech
	fi
}


################################################################
# Installs the kernel module using dkms

function install_dkms()
{
	if [ -n "`dkms status -m rulbus_epp -v 1.0`" ]
	then
		dkms uninstall -m rulbus_epp -v 1.0 -k $KERNEL_VERSION >> makelog 2>&1
		rm -rf /usr/src/rulbus_epp-1.0 >> makelog 2>&1
		cp -r driver /usr/src/rulbus_epp-1.0
	else
		dkms add driver >> makelog 2>&1
	fi

	if [ $? -ne 0 ]
	then
		dialog --msgbox \
"Sorry, Failed to add module to dkms.\n\
See \"makelog\" for the reasons.\n" 7 45;
        exit 1
	fi

	dkms build -m rulbus_epp -v 1.0 -k $KERNEL_VERSION >> makelog 2>&1
	if [ $? -ne 0 ]
	then
"Sorry, Failed to build module with dkms.\n\
See \"makelog\" for the reasons.\n" 7 45;
        exit 1
	fi

	dkms install -m rulbus_epp -v 1.0 -k $KERNEL_VERSION >> makelog 2>&1
	if [ $? -ne 0 ]
	then
"Sorry, Failed to unstall module with dkms.\n\
See \"makelog\" for the reasons.\n" 7 45;
        exit 1
	fi

	DKMS_INSTALL=1
}


################################################################
# Installs the kernel module "manually"

function install_driver_mech()
{
	if [ $IS_NEW_KERNEL ]
	then
		MOD_INST_AS="/lib/modules/$KERNEL_VERSION/kernel/extra/rulbus_epp.ko";
		LOCAL_NAME="driver/rulbus_epp.ko";
	else
		MOD_INST_AS="/lib/modules/$KERNEL_VERSION/misc/rulbus_epp.o";
		LOCAL_NAME="driver/rulbus_epp.o ";
	fi

	dialog --yesno \
"Do you want to install the device driver manually?\n\
We'll copy the following file, if necessary creating\n\
directories that don't exist:\n\n\
$LOCAL_NAME => $MOD_INST_AS" 12 75

    if [ $? -ne 0 ]
	then
		NO_DRIVER_INSTALL=1
		return
	fi

	make install_driver >> makelog 2>&1

	if [ $? -ne 0 ]
	then
		dialog --msgbox \
"Sorry, installation of the driver failed.\n\
See \"makelog\" for the reasons.\n" 7 50;
    	exit 1
	fi
}


################################################################

function install_device_files()
{
	# Find out if user wants to create the device file for the board, but only
	# if the major device number isn't assigned dynamically (isn't set to 0).

	test $MAJOR -ne 0 || return

	dialog --yesno \
"Do you want to create the device file\n\n\
        /dev/rulbus_epp\n\n\
   for the RULBUS interface?"  9 46

    test $? -eq 0 || return

    if [ -e /dev/rulbus_epp ]
	then 
		dialog --yesno \
"A device file /dev/rulbus_epp already exists.\n\
Delete existing file and replace with a new one?" 7 54;

        if [ $? -eq 0 ]
		then
			rm -f /dev/rulbus_epp
			mknod /dev/rulbus_epp c $MAJOR 0
			chmod 666 /dev/rulbus_epp
		fi
	else
		mknod /dev/rulbus_epp c $MAJOR 0
		chmod 666 /dev/rulbus_epp
	fi
}


################################################################
# In the olden times we needed to set up /etc/modules.conf or
# /etc/modules/conf.modules or /etc/modules.conf.local if the
# device major number was set staticatlly (i.e. set to non-zero)
# to get the module loaded at boot time.  And in modern times
# (with /etc/modules) we can request the same (independent of
# the major device number) by simply putting the driver's name
# into /etc/modules.

function install_modules_conf()
{
	if [    -z $MODULECONF \
		 -o \( $MAJOR -eq 0 -a $MODULECONF != "/etc/modules" \) ]
	then
		return
	fi

	if [ $MODULECONF = "/etc/modules" ]
	then
		dialog --yesno \
"Add rulbus_epp to /etc/modules to have\n\
the driver loaded on reboot?" 7 50
		test $? -eq 0 || return

		grep '^[ \t]*rulbus_epp[ \t]*\(#.*\)*$' $MODULECONF 2<&1 > /dev/null;
		if [ $? -ne 0 ]
		then
			cp $MODULECONF $MODULECONF.bak
			echo "rulbus_epp" >> $MODULECONF
		fi
		return
	fi

	dialog --yesno \
"Update $MODULECONF to include the driver? (Old\n\
version will be saved as $MODULECONF.bak.)" 7 62
    test $? -eq 0 || return

	cp $MODULECONF $MODULECONF.bak

	PATTERN="^[[:space:]]*alias[[:space:]+]char-major-$MAJOR[[:space:]+]"
	PATTERN2="^[[:space:]]*pre-install[[:space:]+]rulbus_epp[[:space:]+]"

	LINE=`grep $PATTERN $MODULECONF`
	if [ $? -eq 0 ]
	then
		LINE2=`grep $PATTERN2 $MODULECONF`
		if [ $? -eq 0 ]
		then
			grep -v $PATTERN $MODULECONF | grep -v $PATTERN2 > /tmp/`basename $MODULECONF`
			echo "#$LINE2" >> /tmp/`basename $MODULECONF`
			echo "#$LINE" >> /tmp/`basename $MODULECONF`
		else
			grep -v $PATTERN $MODULECONF > /tmp/`basename $MODULECONF`
			echo "#$LINE" >> /tmp/`basename $MODULECONF`
			fi

		LINE=`grep "^[[:space:]]*options[[:space:]+]rulbus_epp" /tmp/\`basename $MODULECONF\``;
		if [ $? -eq 0 ]
		then
			mv /tmp/`basename $MODULECONF` /tmp/`basename $MODULECONF`2
			grep -v "$LINE" /tmp/`basename $MODULECONF`2 > /tmp/`basename $MODULECONF`
			rm -f /tmp/`basename $MODULECONF`2
			echo "#$LINE" >> /tmp/`basename $MODULECONF`
		fi

		mv /tmp/`basename $MODULECONF` $MODULECONF
	fi

	echo "pre-install rulbus_epp modprobe \"-k\" \"parport\"" >> $MODULECONF
	echo "alias char-major-$MAJOR rulbus_epp" >> $MODULECONF
}


################################################################
# In case the major device number is selected dynamically and
# we're not on a newer system with an /etc/modules file a script
# can be installed for loading the device driver and creating the
# devide file at boot time. Ask the user if this should be done
# and then try to install the script.

function install_init_script()
{
	if [ $MAJOR -ne 0 -o $MODULECONF = "/etc/modules" ]
	then
		return
	fi

	dialog --yesno \
"Should a script be installed to load the driver\n\
and recreate the device file on reboot?" 7 65

	test $? -eq 0 || return

	# Try to install the init.d script

	if [    -d /etc/init.d \
		-a -e /lib/lsb/init-functions ]
	then
		if [    \(    -e /lib/lsb/install_initd \
			 -o -e /usr/lib/lsb/install_initd \) \
			 -a \(    -e /lib/lsb/remove_initd \
			       -o -e /usr/lib/lsb/remove_initd \) ]
		then
			install_lsb
		elif [ -e /usr/sbin/update-rc.d ]
		then
			install_update_rc
		else
			dialog --msgbox "\
Sorry, don't know how to install a script that automatically\n\
loads the RULBUS module loaded at boot time and creates the\n\
device file. Please change the script 'rulbus_epp' in the\n\
'util' subdirectory to fit your needs and install it\n\
in the directory for init scripts yourself." 12 70
		fi
	fi
}


################################################################
# Updates the modules.dep file for the currently run kernel

function update_dep()
{
	if [ -n "$NO_DRIVER_INSTALL" -o -n "$DKMS_INSTALL" ]
	then
		return
	fi

	dialog --yesno \
"Do you want to update the modules dependency\n\
file /lib/modules/$KERNEL_VERSION/modules.dep\n\
using the command 'depmod'?" 8 55
   test $? -ne 0 || depmod $KERNEL_VERSION -a >/dev/null
}


################################################################
# Tries to load the module

function load_module()
{
	if [ -n "$NO_DRIVER_INSTALL" ]
	then
		return
	fi

	dialog --yesno \
"Do you want to load the modules into the\n\
kernel? Make sure no program is using it!" 6 50
	test $? -eq 0 || return

	# Check if the module is already loaded and try to unload it

	lsmod | grep '^rulbus_epp[ \t]' > /dev/null 2>&1
	if [ $? -eq 0 ]
	then
		rmmod rulbus_epp >> makelog 2>&1
		if [ $? -ne 0 ]
		then
			dialog --msgbox \
"Failed to unload running module, so the\n\
new module could not be loaded. See\n\
\"makelog\" for the reasons." 8 45
			return
		fi
    fi

	# Now try to load it

	echo "modprobe rulbus_epp" >> makelog
	modprobe rulbus_epp >> makelog 2>&1
	if [ $? -ne 0 ]
	then
		dialog --msgbox \
"Failed to load module into the kernel.\n\
See \"makelog\" for the reasons." 7 42
   fi
}


################################################################
# Chooses either compiling or installing (called at the start
# when the driver/rulbus_epp_autoconf.h file exists)

function pref_comp()
{
	dialog --radiolist "\
  What do you want to do next?\n\
   (press <Space> to select)"  \
   10 53 2 \
   "Setup  "  "Set the board driver parameters" "off" \
   "Compile"  "Compile the driver and library"  "on"  \
   2> /tmp/RULBUS_reply

	get_reply MTYPE

	test $MTYPE != "Setup" || do_setup_loop 1
}


################################################################
# Chooses between setup, compilation or installation (called at
# the start when driver/rulbus_epp_autoconf.h file  as well as
# the compiled library and driver exist)

function pref_inst()
{
	dialog --radiolist "\
  What do you want to do next?\n\
   (press <Space> to select)"  \
   11 53 3 \
   "Setup  "  "Set the board driver parameters" "off" \
   "Compile"  "Compile driver and library"      "off" \
   "Install"  "Install driver and library"      "on"  \
   2> /tmp/RULBUS_reply

	get_reply MTYPE

	case $MTYPE in
		Setup  )
			do_setup_loop 1
			do_compile 0
			do_install
			;;

		Compile)
			make clean
			do_compile 1
			do_install
			;;

		Install)
			do_install
			;;
	esac
}


################################################################
# Function sets the variable KENREL_VERSION to a string with 
# the name of the kernel we're supposed to compile the module
# for

function get_kernel_version()
{
	if [ -n "$RULBUS_EPP_KERNEL_SOURCE" ]
	then
		KERNEL_DIR=$RULBUS_EPP_KERNEL_SOURCE;
	else
		KERNEL_DIR="/lib/modules/`uname -r`/build";
		if [ -z "$KERNEL_DIR" ]
		then
			KERNEL_DIR="/usr/src/linux";
		fi
	fi

	if [ -z "$KERNEL_DIR" ]
	then
		dialog --msgbox "\n\
Failed to find the kernel headers which are needed to\n\
compile the module. Either install the appropriate\n\
package or set the variable 'RULBUS_EPP_KERNEL_SOURCE'\n\
to the location of the kernel headers." 9 60;
		exit 1;
	fi

	KERNEL_VERSION=`grep UTS_RELEASE                                 \
		            $KERNEL_DIR/include/generated/utsrelease.h       \
                    2>/dev/null |                                    \
				    sed 's/^[^"]\+"\([^"]\+\)".*$/\1/' 2>/dev/null`;

	if [ -z "$KERNEL_VERSION" ]
	then
		KERNEL_VERSION=`grep UTS_RELEASE                                \
			            $KERNEL_DIR/include/linux/utsrelease.h          \
                        2>/dev/null |                                   \
				   s    ed 's/^[^"]\+"\([^"]\+\)".*$/\1/' 2>/dev/null`;
	fi

	if [ -z "$KERNEL_VERSION" ]
	then
		KERNEL_VERSION=`grep UTS_RELEASE
		                     $KERNELDIR/include/linux/version.h \
                       2>/dev/null |
				       sed 's/^[^"]\+"\([^"]\+\)".*$/\1/' 2>/dev/null`;
    fi

    if [ -z "$KERNEL_VERSION" ]
	then
        KERNEL_VERSION=`make --quiet -C $KERNEL_DIR kernelrelease 2>/dev/null`;
	fi

	if [ -z "$KERNEL_VERSION" ]
	then
		dialog --msgbox "\
Sorry, can't determine kernel version under the assumption\n\
that kernel sources are at '$KERNEL_DIR'" 6 64;
		exit 1
	fi

	KV_MAJOR=`echo $KERNEL_VERSION | sed 's/^\([0-9]\+\)\..*$/\1/' 2>/dev/null`
	KV_MINOR=`echo $KERNEL_VERSION | \
              sed 's/^[0-9]\+\.\([0-9]\+\)\..*$/\1/' 2>/dev/null`
	if [ $KV_MAJOR -lt 2 -o \( $KV_MAJOR  -eq 2 -a $KV_MINOR -le 4 \) ]
	then
		IS_NEW_KERNEL=0;
	else
		IS_NEW_KERNEL=1;
	fi
}


################################################################
# Main part of the installation script

trap "rm -f /tmp/RULBUS_reply" 0 1 2 15

export DIALOGRC=./.INSTALLrc

# We need dialog so check if it's available

DIALOG=`which dialog`
if [ $? -eq 1 ]
then
    echo "Sorry, you need the 'dialog' utility to run this script!";
    exit 1;
fi

# Check if this is a 2.4 or a 2.6 or newer kernel

get_kernel_version;

if [    $KV_MAJOR -ne 3 \
	 -a $KV_MAJOR -ne 4 \
	 -a \(    $KV_MAJOR -ne 2 \
           -o \( $KV_MINOR -ne 4 -a $KV_MINOR -ne 6 \) \) ]
then
    dialog --yesno \
"This package is only tested with 2.4, 2.6 and 3.x\n\
kernels. There could be problems with other kernels.\n\n\
           Do you want to continue?" 8 60
    test $? -eq 0 || exit 0
fi

rm -f makelog > /dev/null 2>&1

if [ ! -e driver/rulbus_epp_autoconf.h ]
then
   do_setup_loop 0
   do_compile 0
   do_install
else
    if [    \( ! $IS_NEW_KERNEL -a ! -e driver/rulbus_epp.o  \)  \
         -o \(   $IS_NEW_KERNEL -a ! -e driver/rulbus_epp.ko \)  \
		 -o ! -e lib/librulbus.a                                 \
		 -o ! -e lib/librulbus.so ]
	then
        pref_comp
        do_compile 0
        do_install
    else
        pref_inst
    fi
fi

dialog --msgbox "\
Ok, you're hopefully done with creating and\n\
installing the driver and the library. You\n\
still need to create a configuration file\n\
'rulbus.conf' for the Rulbus devices and\n\
then copy it to '/etc'." 9 50;

exit 0
